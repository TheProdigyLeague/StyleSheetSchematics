**A**
# Angle Units: Draft 1

This proposal adds support for units other than `deg` to HSL and HWB functions.

## Background

> This section is non-normative.

CSS Values and Units 3 defines [a number of different units] that can be used to
represent angles, including the hue angle that's passed to the [`hsl()`][css
hsl] and [`hwb()`] functions. However, Sass has historically ignored
units for arguments passed to `hsl()` and related functions, choosing instead to
always interpret the hue as degrees. For example, `hsl(1rad 50% 50%)` is
incorrectly interpreted as `hsl(1deg 50% 50%) = #bf4240` rather than
`hsl(57.3deg 50% 50%) = #bfba40`.

Relatedly, `hsl()` and related functions don't enforce that the saturation and
lightness values are percentages. This is a less pressing issue, because it
doesn't mean that Sass is misinterpreting *valid* CSS, but it does mean that
invalid CSS like `hsl(0 50 50)` or even `hsl(0 50px 50px)` is being incorrectly
accepted.

## Summary

> This section is non-normative.

This proposal makes `hsl()`, `hsla()`, `hwb()`, `adjust-hue()`,
`color.adjust()`, and `color.change()` convert all hue angles into degrees and
reject all non-angle non-empty units for hue and all non-`%` units for
saturation and lightness. Because these are breaking changes, they're split
across three distinct phases:

1. Initially, passing any non-`deg` non-empty units to hue or non-`%` units to
   saturation or lightness will produce a deprecation warning. Passing unitless
   numbers for hue will still be allowed because the CSS spec allows it, but not
   for saturation or lightness.

2. After at least three months (per the [Dart Sass compatibility policy]), all
   functions will start converting angle units to degrees. Because this brings
   Sass into compatibility with the CSS spec, Dart Sass will make it outside of
   a major version change despite it being a breaking change. All other
   deprecations will remain in place without breaking changes.

3. As part of the release of the next major version of Dart Sass, these
   functions will start throwing errors for unknown units rather than
   interpreting them as `deg` or `%`. Passing unitless numbers for hue will
   still be supported.

### Design Decisions

#### Scope of Phase 2

It would be possible to further minimize the scope of the breaking change in
phase 2 by *only* changing how `hsl()` and `hsla()` interpret hue arguments with
other angle arguments, and leaving `adjust-hue()`, `color.adjust()`, and
`color.change()` alone. However, allowing the same hue argument to be accepted
in multiple functions but interpreted different ways is likely to cause
substantial confusion. In addition, it's unlikely that users are specifically
passing `deg`, `rad`, or `turn` units today and relying on their broken
behavior.

In other words, the cost of not slightly expanding this breaking change is
likely to be high, and the benefit in terms of causing friction for existing
users is likely to be very low.

#### Global Saturation and Lightness Functions

Since we're requiring `%` for saturation and lightness in most functions, it
would make some sense to add the same requirement to the `saturate()`,
`desaturate()`, `lighten()`, and `darken()` functions as well. This proposal
chooses instead to leave them as-is because they're intended to be removed in
the next breaking release anyway, and until that release saturation and
lightness will only have deprecation warnings. This would put them in a
situation where they would *only ever* emit deprecation warnings without ever
actually rejecting other units, which is unlikely to be worth the effort.

## Functions

> Note that although the behavior of the `color.change()` function is changing,
> no explicit changes are needed because per the spec it passes its `$hue`,
> `$saturation`, and `$lightness` parameters directly to `hsl()`.

### `hsl()` and `hsla()`

In the four-argument overload of the global [`hsl()`] function, replace

[`hsl()`]: ../spec/functions.md#hsl-and-hsla

* Let `hue` be `($hue % 360) / 60` without units.

* Let `saturation` and `lightness` be the result of clamping `$saturation` and
  `$lightness`, respectively, between 0 and 100 and dividing by 100.

with

* Let `hue` be the result of [converting] `$hue` to `deg` allowing unitless.

* Set `hue` to `(hue % 360deg) / 60deg`.

* If `$saturation` and `$lightness` don't have unit `%`, throw an error.

* Let `saturation` and `lightness` be the result of clamping `$saturation` and
  `$lightness`, respectively, between `0%` and `100%` and dividing by `100%`.

[converting]: ../spec/types/number.md#converting-a-number-to-a-unit

Because `hsla()` is identical to `hsl()`, it's updated identically.

### `color.hwb()`

In the four-argument overload of [`color.hwb()`], replace

[`color.hwb()`]: ../spec/built-in-modules/color.md#hwb

* If `$hue` has any units other than `deg`, throw an error.

* If either of `$whiteness` or `$blackness` don't have unit `%` or aren't
  between `0%` and `100%` (inclusive), throw an error.

* Let `hue` be `($hue % 360) / 60` without units.

with

* Let `hue` be the result of [converting] `$hue` to `deg` allowing unitless.

* Set `hue` to `(hue % 360deg) / 60deg`.

* If either of `$whiteness` or `$blackness` don't have unit `%` or aren't
  between `0%` and `100%` (inclusive), throw an error.

### `adjust-hue()`

The global `adjust-hue()` function will now behave as follows:

```
adjust-hue($color, $degrees)
```

* If `$color` isn't a color or `$degrees` isn't a number, throw an error.

* Let `degrees` be the result of [converting] `$degrees` to `deg` allowing
  unitless.

* Let `saturation` and `lightness` be the result of calling
  [`color.saturation($color)`] and [`color.lightness($color)`], respectively.

* Return the result of calling [`hsl()`] with `degree`, `saturation`,
  `lightness`, and `$color`'s alpha channel.
  
[`color.saturation($color)`]: ../spec/built-in-modules/color.md#saturation
[`color.lightness($color)`]: ../spec/built-in-modules/color.md#lightness

### `color.adjust()`

In the definition of [`color.adjust()`], after

[`color.adjust()`]: ../spec/built-in-modules/color.md#adjust

* If `$hue` isn't a number or null, throw an error.

add

* If `$hue` is a number and it has units that aren't [compatible] with `deg`,
  throw an error.

  > Unitless numbers are allowed.

[compatible]: ../spec/types/number.md#compatible-units

> The existing definition of `color.adjust()` includes the line "set `hue` to
> `hue + $hue`" which *should* throw an error if `$hue` has units that aren't
> compatible with `deg` and otherwise should convert `$hue` to `deg`. However,
> no implementation currently follows that behavior, so this spec change
> effectively serves to make the already-specified behavior more explicit.

In addition, replace

* If either `$saturation` or `$lightness` aren't either null or numbers
  between -100 and 100 (inclusive), throw an error.

* Let `hue`, `saturation`, and `lightness` be the result of calling
  `hue($color)`, `saturation($color)`, and `lightness($color)` respectively.

* If `$hue` isn't null, set `hue` to `hue + $hue`.

* If `$saturation` isn't null, set `saturation` to `saturation + $saturation`
  clamped between 0 and 100.

* If `$lightness` isn't null, set `lightness` to `lightness + $lightness`
  clamped between 0 and 100.

with

* If either `$saturation` or `$lightness` aren't either null or numbers **with
  unit `%` between -100% and 100%** (inclusive), throw an error.

* Let `hue`, `saturation`, and `lightness` be the result of calling
  `hue($color)`, `saturation($color)`, and `lightness($color)` respectively.

* If `$hue` isn't null, set `hue` to `hue + $hue`.

* If `$saturation` isn't null, set `saturation` to `saturation + $saturation`
  clamped between **0% and 100%**.

* If `$lightness` isn't null, set `lightness` to `lightness + $lightness`
  clamped between **0% and 100%**.

## Deprecation Process

The deprecation process will be divided into three phases:

### Phase 1

> This phase adds no breaking changes. Its purpose is to notify users of the
> upcoming changes to behavior and give them a chance to move towards passing
> future-proof units.

Phase 1 implements none of the function changes described [above](#functions).
Instead, if the `$hue` parameter to [`hsl()`], [`hsla()`], `adjust-hue()`,
[`color.adjust()`], or [`color.change()`] is passed a number with a unit other
than `deg`, emit a deprecation warning. In addition, if either the `$saturation`
or `$lightness` parameters to `hsl()`, `hsla()`, `color.adjust()`, or
`color.change()` are passed a number without the unit `%`, emit a deprecation
warning.

[`hsla()`]: ../spec/functions.md#hsl-and-hsla
[`color.change()`]: ../spec/built-in-modules/color.md#change

> Unitless hues should not cause deprecation warnings, but unitless saturations
> and lightnesses should.

### Phase 2

> This phase only breaks the behavior of passing `deg`-compatible units as hues,
> and otherwise leaves existing behavior intact.

Phase 2 implements a subset of the function changes described
[above](#functions). In particular:

* The `color.hwb()` function is updated [as described above](#colorhwb).

* If the `$hue` parameter to [`hsl()`], [`hsla()`], `adjust-hue()`,
  [`color.adjust()`], or [`color.change()`] is passed a number with unit `rad`,
  `grad`, or `turn`, [convert] it to `deg` before running the original function.

* As in phase 1, if the `$hue` parameter to [`hsl()`], [`hsla()`],
  `adjust-hue()`, [`color.adjust()`], or [`color.change()`] is passed a number
  with a unit other than `deg`, `rad`, `grad`, or `turn`, emit a deprecation
  warning.

* As in phase 1, if either the `$saturation` or `$lightness` parameters to
  `hsl()`, `hsla()`, `color.adjust()`, or `color.change()` are passed a number
  without the unit `%`, emit a deprecation warning.

[convert]: ../spec/types/number.md#converting-a-number-to-a-unit

### Phase 3

Phase 3 implements the full function changes described [above](#functions).

> It's recommended that implementations increment their major version numbers
> with the release of phase 3.

### `SassArgumentList`

The JS API representation of a Sass argument list.

#### `internal`

The [private `internal` field] refers to a Sass argument list.

[private `internal` field]: index.d.ts.md#internal

# Interpolation in At-Rule Names: Draft 1

*([Issue](https://github.com/sass/sass/issues/429))*

This proposal defines support for interpolation in at-rule names.

## Summary

> This section is non-normative.

Any at-rule may include interpolation in its name. This interpolation
automatically causes it to be parsed as an unknown at-rule, even if the resolved
name of the rule is known to Sass. The only exception is the `@keyframes` rule,
which will still allows sub-rules with keyframes selectors such as `10%`.

### Design Decisions

It would be possible to treat CSS at-rules that Sass knows about, like `@media`,
specially even when they're generated from interpolated at-rule names. However,
this would add a lot of implementation complexity, since implementations would
need to be able to re-parse those at-rules' values at runtime.

It's also unclear that there's any value to be gained in return for this
complexity. At-rule interpolation is primarily useful for adding vendor
prefixes, and the two CSS at-rules that Sass has special support for (`@media`
and `@supports`) don't use vendor prefixes.

## Syntax

This proposal defines a replacement for the production `UnknownAtRule`. The
grammar for this production is:

No whitespace is allowed after `@`. As with all statements, an `UnknownAtRule`
without a block must be separated from other statements with a semicolon.

> Note that this is the same as the previous syntax, except that the at-rule's
> name can be interpolated.

When an at-rule is evaluated, its name is evaluated to produce an unquoted
string which is used as the name of the generated at-rule. Then that generated
name is checked to see if it's an at-rule that has special runtime handling.
> treated as an unknown at-rule rather than a media rule.

**B**

## Draft 3

* In Phase 1:

  * Clarify the definition of bogus selectors.

  * Only omit style rules if *all* of their complex selectors are bogus.

  * Expand the set of selectors that are treated by the extend algorithm as
    matching nothing to include bogus pseudo selectors, since these can never be
    transformed into anything useful.

* In Phase 2:

  * Don't throw an error for style rules that contain no children, since this
    would break nesting.

  * Throw an error for an `@extend` rule with a bogus extender.

  * Support single leading combinators.

  * Support complex selectors composed of only a single combinator.

  * Allow bogus selectors in `selector.append()`.

## Draft 2

* Allow leading combinators in `:has()`.

* Replace our custom `Combinator` production with the CSS spec's `<combinator>`.

## Draft 1

* Initial draft.

# Bogus Combinators: Draft 3

This proposal increases the strictness with which Sass parses and resolves
non-standard ("bogus") uses of selector combinators. In particular, it forbids
the use of multiple combinators in a row (such as `div + ~ a`) and limits the
use of leading combinators (such as `> a`) and trailing combinators (such as `a
>`) to selector nesting.

## Background

> This section is non-normative.

Currently, Sass is very liberal when it comes to where explicit selector
combinators can be written—much more so than CSS itself. It allows:

* Multiple combinators between compound selectors (`a > + b`).
* Combinators at the beginning of selectors (`> a`).
* Combinators at the end of selectors (`a >`).

The latter two are useful when nesting style rules, but the former has no known
use at all. Historically, we've said that we support these because they enable
some browser hacks, but this seems to be purely hypothetical: [browserhacks.com]
is the most comprehensive source of hacks I've found, and it doesn't list any
hacks that are enabled by this support, even among its "legacy hacks".

In addition, supporting these selectors imposes substantial complexity on Sass
implementations. They [cause bugs] and make the data model more complex than it
needs to be. This in turn makes bugs like [sass/sass#1807] that don't involve
non-standard combinators more difficult to resolve.

## Summary

> This section is non-normative.

We'll move towards forbidding these combinators in two phases.

### Phase 1: Deprecation

In the first phase, we'll issue deprecation messages for all forbidden cases,
but only change behavior in cases where Sass was already producing invalid CSS
anyway. In particular:

* Once nesting and extensions have been resolved, if any of a style rule's
  selectors contains a leading, trailing, or multiple combinator after nesting
  and extensions are resolved, omit that style rule from the generated CSS and
  emit a deprecation warning.

* If a selector with a leading or trailing combinator is used with any
  extend-related infrastructure, emit a deprecation warning but *don't* change
  the behavior unless the resolved selector still has a bogus combinator, as
  above.

* If a selector with a doubled combinator is used with any extend-related
  infrastructure, emit a deprecation warning and treat that selector as though
  it matches no elements.

This will be sufficient to substantially simplify the implementation without
affecting the in-browser behavior of any stylesheets.

### Phase 2: Removal

In the second phase, which for existing implementations will accompany a major
version release, we will emit errors everywhere Phase 1 produced deprecation
warnings. In particular:

* If a style rule's selectors contain leading, trailing, or multiple combinators
  after nesting is resolved, emit an error.

* If a selector with a leading, trailing, or multiple combinator is used with
  `@extend` (which, given the previous restriction, will only be possible using
  extension functions from `sass:selector`), emit an error.

## Definitions

> Most existing definitions being modified here haven't been defined explicitly
> before this document. The old definitions are listed in strikethrough mode to
> clarify the change.

### Visible Combinator

A *visible combinator* is any selector [combinator] other than the [descendant
combinator].

### Complex Selector

~~A *complex selector* is a sequence of [visible combinators] (its *leading
combinators*) as well as a sequence of [complex selector components]. Either,
but not both, of these sequences may be empty~~

[visible combinators]: #visible-combinator
[complex selector components]: #complex-selector-component

A *complex selector* is an optional [visible combinator] (its *leading
combinator*) as well as a sequence of [complex selector components]. The
component sequence may be empty only for complex selectors with leading
combinators.

[visible combinator]: #visible-combinator

### Complex Selector Component

~~A *complex selector component* is a compound selector as well as a sequence of
zero or more [visible combinators].~~

A *complex selector component* is a compound selector as well as a single
[combinator].

### Trailing Combinator

A [complex selector]'s *trailing combinator* is its final [complex selector
component]'s combinator if it's not a [descendant combinator]. If it *is* a
descendant combinator, the complex selector doesn't have a trailing combinator.

[complex selector]: #complex-selector
[complex selector component]: #complex-selector-component

### Bogus Selector

A [complex selector] is *bogus* if it has a leading or [trailing combinator], or
if any of the simple selectors it transitively contains is a selector pseudo
with a bogus selector, except that `:has()` may contain complex selectors with
leading combinators.

A selector list is *bogus* if any of its complex selectors are bogus.

[trailing combinator]: #trailing-combinator

## Syntax

### `ComplexSelector`

> Note that the existing productions being modified have not been defined
> explicitly before this document. The old productions are listed in
> strikethrough mode to clarify the change.

This proposal modifies the existing `ComplexSelector` and
`ComplexSelectorComponent` productions to drop support for multiple combinators:

<x><pre>
~~**ComplexSelector**          ::= [\<combinator>]\* ComplexSelectorComponent+~~
~~&#32;                          | [\<combinator>]+~~
~~**ComplexSelectorComponent** ::= CompoundSelector [\<combinator>]\*~~
**ComplexSelector**          ::= [\<combinator>]? ComplexSelectorComponent+
&#32;                          | [\<combinator>]
**ComplexSelectorComponent** ::= CompoundSelector [\<combinator>]?
</pre></x>

## Semantics

### Evaluating a Style Rule

This proposal adds the following to [Evaluating a Style Rule], after executing
each child of `rule`:

[Evaluating a Style Rule]: ../spec/style-rules.md#semantics

* If `css` contains any children and `selector` is [bogus], throw an error.

[bogus]: #bogus-selector

### Executing an Extend Rule

This proposal adds the following to [Executing an Extend Rule], after checking
for a current style rule:

[Executing an Extend Rule]: ../spec/at-rules/extend.md#executing-an-extend-rule

* If the current style rule is [bogus], throw an error.

## Functions

For the `selector.extend()`, `selector.is-superselector()`,
`selector.replace()`, and `selector.unify()` functions, after parsing their
selector arguments, throw an error if any of the parsed selectors are [bogus].

> `selector.append()`, `selector.nest()`, and `selector.parse()` are still
> allowed to take bogus selectors because these functions are syntactic rather
> than semantic. This means on one hand that there aren't ambiguities about how
> to handle bogus selector inputs, and on the other that it may be useful to
> emit bogus selectors for later use in nesting contexts.
>
> Note that `selector.append()` already forbids selectors with leading or
> trailing combinators from being passed in between selectors.

## Deprecation Process

The deprecation will be divided into two phases:

### Phase 1

This phase will only change behavior that doesn't affect in-browser rendering.
In particular:

* The parsing of `ComplexSelector` and `ComplexSelectorComponent` is unchanged.

* A complex selector is instead considered [bogus] if it would be bogus in Phase
  2 *or* if it can be parsed in Phase 1 but not in Phase 2.

* The newly-added errors produce deprecation warnings instead.

* In [Evaluating a Style Rule], remove any complex selectors from `css`'s
  selectors that are [bogus], except those that have a single leading combinator
  but are otherwise not bogus.

  > Leading combinators are allowed in Phase 1 (but still emit deprecation
  > warnings) because they may be used for nesting along with `meta.load-css()`.

* Define a "useless" selector as:

  * A complex selector that has multiple combinators.

  * A bogus pseudo selector.

  * Any selector that contains a useless selector.

  In [Extending a Selector], treat useless selectors as selectors that can match
  no elements.

  [Extending a Selector]: ../spec/at-rules/extend.md#extending-a-selector

### Phase 2

This phase will emit errors as described in the body of the proposal.

# Built-In Modules

Sass provides a number of built-in [modules] that may be loaded from URLs with
the scheme `sass`. These modules have no extensions, CSS trees, dependencies, or
source files. Their canonical URLs are the same as the URLs used to load them.

[modules]: modules.md#module

## Built-In Functions and Mixins

Each function and mixin defined in a built-in modules is specified with a
signature of the form

<x><pre>
[\<ident-token>] ArgumentDeclaration
</pre></x>

followed by a procedure. It's available as a member (either function or mixin)
in the module whose name is the value of the `<ident-token>`. When it's executed
with `args`:

* With an empty scope with no parent as the [current scope]:

  [current scope]: spec.md#scope

  * Evaluate `args` with the signature's `ArgumentDeclaration`.

  * Run the procedure, and return its result if this is a function.

Built-in mixins don't accept content blocks unless explicitly specified
otherwise.

By convention, in these procedures `$var` is used as a shorthand for "the value
of the variable `var` in the current scope".

> In other words, `$var` is the value passed to the argument `$var`.

# Boolean API

## Fields

### `sassTrue`

A `Value` whose [`internal`] is the SassScript true value.

[`internal`]: index.d.ts.md#internal

### `sassFalse`

A `Value` whose [`internal`] is the SassScript false value.

## Types

### `SassBoolean`

#### `value`

**C**

## Draft 3

* Add `@content` to the list of disallowed at-rules.

* Allow `@media` rules within style rules and at-rules. Recent CSS specs allow
  this, so we shouldn't forbid it.

* Disallow silent comments.

## Draft 2

* Explicitly defined the term "canonical URL" as it relates to stylesheets.

* Added a specification for loading plain CSS as an entrypoint file.

* Added a non-normative note explaining that the new import algorithm maintains
  the semantics of the existing import algorithm, other than supporting plain
  CSS files.

## Draft 1

* Initial draft.

## Draft 1.1

* Throw an error when serializing a degenerate number with complex units in a
  calculation.

* Clarify that we're checking for degenerate *values* in "Converting a Number to
  a Calculation".

* Use `UnquotedString`s to represent unknown calculation constants rather than
  `CalculationInterpolation`s/`CalculationRaw`s.

* Don't parenthesize the right-hand side of `"+"` or `"-"`
  `CalculationOperation`s when the right-hand side is a degenerate number with
  one or more units. Degenerate numbers are serialized to multiplication and
  division expressions, which always have higher precedence than addition and
  subtraction.

## Draft 1

* Initial draft.

# Calculation Constants: Draft 1.1

This proposal adds support for constant names in CSS calculations.

## Background

> This section is non-normative.

Since Sass now fully parses calculations and resolves them where necessary, it's
necessary to keep up with new syntactic features added in plain CSS. CSS Values
4 adds support for several [numeric constants], written as identifiers in the
calculation, which Sass should support as well.

## Summary

Calculations may now contain arbitrary identifiers in any value position. The
specific identifiers `pi`, `e`, `infinity`, `-infinity`, and `NaN` will be
parsed to their corresponding double values.

In addition, this creates for the first time a clear and standard CSS way of
representing degenerate numeric constants like `NaN` and the infinities. This
allows us to serialize a Sass number with value `Infinity`, `-Infinity`, or
`NaN` to `calc(infinity)`, `calc(-inifinity)`, and `calc(NaN)`, respectively.

### Design Decisions

#### Arbitrary Identifiers

We're choosing to support arbitrary identifiers in calculations, rather than
just those specified in CSS Values 4, for forwards-compatibility. While it's
unclear whether the `<calc-constant>` production itself will be expanded, it's
likely that calculations will begin supporting additional non-constant values
depending on context (such as in relative color functions like `rgb(from
var(--color) r g calc(b * 1.5))`).

### Serializing Complex Units

The addition of the [Converting a Number to a Calculation] procedure gives a
possibility, in principle, for representing numbers with complex units in a
standard CSS format rather than throwing an "invalid CSS value" error. However,
no browser yet supports complex unit calculations, so this would likely just
silence real errors without providing any actual value.

[Converting a Number to a Calculation]: #converting-a-number-to-a-calculation

Whether and how we want to support this once browsers *can* parse it is a
question for another time.

## Definitions

### Degenerate Number

The doubles `Infinity`, `-Infinity`, and `NaN` are *degenerate*.

A number is *degenerate* if its value is degenerate.

## Syntax

### `CalculationExpression`

This proposal adds <code>| [\<ident-token>]</code> to the `CalcValue`
production.

    ## Semantics

### `CalcValue`

Add the following to the existing semantics for `CalcValue`:

* If `value` is case-insensitively equal to `pi`, return 3.141592653589793.

  > This is the closest double approximation of the mathematical constant π.

* If `value` is case-insensitively equal to `e`, return 2.718281828459045.

  > This is the closest double approximation of the mathematical constant e.

* If `value` is case-insensitively equal to `infinity`, return the double
  `Infinity`.

* If `value` is case-insensitively equal to `-infinity`, return the double
  `-Infinity`.

* If `value` is case-insensitively equal to `nan`, return the double `NaN`.

* If `value` is any other `<identifier>`, return an `UnquotedString` with
  `value` as its contents.

## Serialization

### Calculations

#### `Number`

To serialize a `Number` within a `CalculationExpression`:

* If the number is [degenerate]:

  * If the number has more than one numerator unit, or more than zero denominator
    units, throw an error.

  * Otherwise, [convert the number to a calculation], then serialize the
    resulting calculation's sole argument.

  [degenerate]: #degenerate-number
  [convert the number to a calculation]: #converting-a-number-to-a-calculation

* Otherwise, serialize the number as normal.

#### `CalculationOperation`

Add another possible condition for parenthesizing the right value:

* the operator is `"/"` and the right value is a degenerate number with one or
  more units.

### Numbers

To serialize a number to CSS:

* If the number has more than one numerator unit, or more than zero denominator
  units, throw an error.

* If the number is degenerate, [convert it to a calculation] then serialize that
  to CSS.

  [convert it to a calculation]: ../spec/types/number.md#converting-a-number-to-a-calculation

* Otherwise:

  * Emit a string that can be parsed as a [`<number-token>`] with the
    same value as the number.

  * If the number has a numerator unit, emit that unit.

## Procedures

### Converting a Number to a Calculation

Given a number `number`, this procedure returns a CSS-compatible calculation
that represents the same numeric value.

* If `number`'s value is `Infinity`, let `value` be an `UnquotedString` whose
  `value` is `'infinity'`.

* Otherwise, if `number`'s value is `-Infinity`, let `value` be an
  `UnquotedString` whose `value` is `'-infinity'`.

* Otherwise, if `number`'s value is `NaN`, let `value` be an `UnquotedString`
  whose `value` is `'NaN'`.

* Otherwise, let `value` be a `CalculationValue` whose value is `number` without
  units.

* For each unit `unit` in `number`'s numerator units:

  * Set `value` to a `CalculationOperation` with `operator` set to `'*'`, `left`
    set to `value`, and `right` set to a number with value 1 and unit `unit`.

* For each unit `unit` in `number`'s denominator units:

  * Set `value` to a `CalculationOperation` with `operator` set to `'/'`, `left`
    set to `value`, and `right` set to a number with value 1 and unit `unit`.

* Return a `Calculation` with `name` set to `'calc'` and arguments set to
  `[value]`.

> Currently the logic for serializing multiple numerator or denominator units is
> unused, but it's likely to be useful later when determining whether/how to
> serialize numbers with complex units.

## Draft 3.2

* Support space-separated lists in calculation expressions without deprecation,
  since they're necessary to support the valid CSS construct `calc(1
  var(--plus-two))`.

* Always preserve parentheses around unquoted strings.

## Draft 3.1

* Update the definition of potentially slash-separated numbers to reflect the
  fact that calculations are no longer determinable syntactically.

* Add a section describing how to restructure slash-separated lists as division
  within calculations.

* Don't evaluate `min()`, `max()`, `round()`, or `abs()` as a calculation if it
  has keyword or rest arguments.

* During the deprecation period, only consider unbracketed
  `SpaceListExpressions` with multiple elements that actually contain
  interpolation to be calculation-safe.

* Handle `"*"` and `"/"` tokens when evaluating `SumExpresssion`s and
  `ProductExpression`s as calculations.

* Remove the `CalculationInterpolation` type, and deprecate the associated JS
  API and embedded protocol field. The problem this type existed to work around
  is no longer an issue in the new parsing structure.

* Preserve parentheses around all `var()` strings that get injected from
  anywhere, as well as any unquoted strings that appear in `calc()` and might
  need parentheses.

* Don't treat `abs()`, `min()`, `max()`, or `round()` as potentially
  slash-separated operands..

## Draft 3.0

* Refactor the way calculations are parsed to allow them to coexist with
  user-defined Sass functions of the same names.

* No longer forbid user-defined functions with the same names as CSS math
  functions and remove the associated deprecation process.

* Drop support for interpolation in calculations outside of identifier position
  and add a deprecation process for this.

## Draft 2.1

* Allow custom functions named like vendor-prefixed new CSS functions.

## Draft 2.0

* Explicitly forbid user-defined functions with the same names as CSS math
  functions.

* Add a deprecation process for gradually phasing out user-defined functions
  with name conflicts.

## Draft 1.5

* Fix the definition of `rem()` to use `result - modulus` rather than `result -
  dividend` in the case where the argument signs differ.

## Draft 1.4

* Don't exempt percentages from most functions' simplification logic, since
  those functions don't allow *any* units in CSS, including percents. Now only
  `abs()`, `sign()`, `atan2()`, and `hypot()` check for known units because CSS
  allows percentages for them but they aren't linear so they can't be resolved
  in terms of percentages in Sass.

* Throw an error if `clamp()` or `hypot()` has known-incompatible arguments even
  if they aren't all numbers.

* Throw an error if any argument to `pow()` or `log()` is a number with units,
  even if the function can't otherwise be simplified.

* Add non-normative notes clarifying when units are implicitly disallowed by
  passing them on to built-in Sass functions.

* Clarify that `log()` can invoke the built-in Sass function with one or two
  arguments.

* Remove duplicated text checking for too few arguments for `pow()` and
  `atan2()`.

## Draft 1.3

* Update the definition of potentially slash-separated numbers to exclude
  calc functions that were previously evaluated as Sass global functions.

## Draft 1.2

* Fix behavior of `round` to ensure it is backwards-compatible with the existing
  global Sass function.

## Draft 1.1

* `mod`, `rem`, `atan2`, or `pow` should take two arguments instead of three.

## Draft 1

* Initial draft

# Calculation Functions: Draft 3.2

## Background

> This section is non-normative.

Sass added support for first-class calculation objects [recently], but this
initial support only included the `calc()`, `min()`, `max()`, and `clamp()`
expressions since these were the only ones supported in browsers at the time.
Since then, between Firefox and Safari browser support has landed for the rest
of the expressions listed in [Values and Units 4].

[recently]: ../accepted/first-class-calc.md

## Summary

> This section is non-normative.

This proposal parses the full range of functions defined in [Values and Units 4]
as calculation values in Sass: `round()`, `mod()`, `rem()`, `sin()`, `cos()`,
`tan()`, `asin()`, `acos()`, `atan()`, `atan2()`, `pow()`, `sqrt()`, `hypot()`,
`log()`, `exp()`, `abs()`, and `sign()`.

Since Sass already defines top-level functions named `round()` and `abs()`,
these will fall back to Sass function calls in a similar way to how `min()` and
`max()` already work.


This also expands calculation parsing to allow constructs like `calc(1
var(--plus-two))` (where for example `--plus-two: + 2`) which are valid CSS but
weren't supported by the old first-class calculation parsing.

### Design Decisions

#### Merged Syntax

This proposal substantially changes the way calculations are parsed, merging the
syntax with the standard Sass expression syntax. Now the only difference between
a calculation and a normal Sass function is how it's *evaluated*. This has the
notable benefit of allowing calculations to coexist with user-defined Sass
functions of the same name, preserving backwards-compatibility.

Because this overlap is always going to be somewhat confusing for readers, we
considered simply disallowing Sass functions whose names matched CSS
calculations after a suitable deprecation period. However, in addition to the
intrinsic value of avoiding breaking changes, the function name `rem()` in
particular is widely used in Sass libraries as a means of converting pixel
widths to relative ems, so this is a fairly substantial breaking change in
practice.

#### Changing Mod Infinity Behavior

This proposal changes the behavior of the `%` operation when the right-hand side
is infinite *and* has a different sign than the left-hand side. Sass used to
return the right-hand side in accordance with the floating point specification,
but it now returns NaN to match CSS's `mod()` function.

Although this is technically a breaking change, we think it's highly unlikely
that it will break anyone in practice, so we're not going to do a deprecation
process for it.

## Definitions

### Calculation-Safe Expression

An expression is "calculation-safe" if it is one of:

* A [`FunctionExpression`].
* A `ParenthesizedExpression` whose contents is calculation-safe.
* A `SumExpression` whose operands are calculation-safe.
* A `ProductExpression` whose operator is `*` or `/` and whose operands are
  calculation-safe.
* A `Number`.
* A `Variable`.
* An `InterpolatedIdentifier`.
* An unbracketed `SpaceListExpression` with more than one element, whose
  elements are all calculation-safe.

[`FunctionExpression`]: ../spec/functions.md#syntax

> Because calculations have special syntax in CSS, only a subset of SassScript
> expressions are valid (and these are interpreted differently than elsewhere).

### Exact Equality

Two [doubles] are said to be *exactly equal* if they are equal according to the
`compareQuietEqual` predicate as defined by [IEEE 754 2019], §5.11.

[doubles]: ../spec/types/number.md#double

> This is as opposed to [fuzzy equality].
>
> [fuzzy equality]: ../spec/types/number.md#fuzzy-equality

### Known Units

A number has *known units* unless it has unit `%`.

> This is relevant for calculations, because in plain CSS they resolve
> percentages before doing their operations. This means that any non-linear
> operations involving percentages must be passed through to plain CSS rather
> than handled by Sass.
>
> More complex units involving percentages are allowed because any non-linear
> function will throw for complex units anyway.

### Potentially Slash-Separated Number

Replace [the definition of `Potentially Slash-Separated Number`] with the
following:

[the definition of `Potentially Slash-Separated Number`]: ../spec/types/number.md#potentially-slash-separated-number

A Sass number may be *potentially slash-separated*. If it is, it is associated
with two additional Sass numbers, the *original numerator* and the *original
denominator*. A number that is not potentially slash-separated is known as
*slash-free*.

A potentially slash-separated number is created when a `ProductExpression` with
a `/` operator is evaluated and each operand is *syntactically* one of the
following:

* a `Number`,
* a [`FunctionCall`], or
* a `ProductExpression` that can itself create potentially slash-separated
  numbers.
  
[`FunctionCall`]: ../spec/functions.md#functioncall

If the result of evaluating the `ProductExpression` is a number, that number is
potentially slash-separated if all of the following are true:

* the results of evaluating both operands were numbers, and
* if either operand was a `FunctionCall`, it was [evaluated as a calculation]
  and its name was not `"abs"`, `"max"`, `"min"`, or `"round"`.

[evaluated as a calculation]: #evaluating-a-functioncall-as-a-calculation

If both of these are true, the first operand is the original numerator of the
potentially slash-separated number returned by the `/` operator, and the second
is the original denominator.

## Syntax

> Calculations are no longer parsed differently than other Sass productions.
> Instead, they're *evaluated* differently at runtime. This allows them to
> coexist with user-defined Sass functions even when their names overlap.

### `FunctionExpression`

Remove `CssMinMax` and `CalculationExpression` from [the definition of
`FunctionExpression`].

[the definition of `FunctionExpression`]: ../spec/functions.md#syntax

### `CssMinMax`

Remove the `CssMinMax` production.

### `CalculationExpression`

Remove the `CalculationExpression` production.

## Types

### Calculation

Delete the `CalculationInterpolation` type and remove all references to it.

> This type only existed to track where we needed to defensively insert
> parentheses. Now that we track parentheses as part of the calculation AST,
> this is no longer necessary

## Operations

### Modulo

Replace [the definition of modulo for numbers] with the following:

[the definition of modulo for numbers]: ../spec/types/number.md#modulo

> Differences are highlighted in bold.

Let `n1` and `n2` be two numbers. To determine `n1 % n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

  [matching units]: ../spec/types/number.md#matching-two-numbers-units

* **If `c2` is infinity and has a different sign than `c1` (including
  oppositely-signed zero), return NaN with the same units as `c1`.**

  > This matches the behavior of CSS's `mod()` function.

* Let `remainder` be a number whose value is the result of `remainder(c1.value,
  c2.value)` as defined by [IEEE 754 2019], §5.3.1; and whose units are the same
  as `c1`'s.

* If `c2`'s value is less than 0 and `remainder`'s value isn't [exactly equal]
  to `0`, return `remainder - c2`.

  [exactly equal]: #exact-equality

  > This is known as [floored division]. It differs from the standard IEEE 754
  > specification, but matches the behavior of CSS's `mod()` function.
  >
  > Note: These comparisons are not the same as `c2 < 0` or `remainder == 0`,
  > because they don't do fuzzy equality.


* Otherwise, return `remainder`.

## Procedures

### Evaluating a `FunctionCall` as a Calculation

This algorithm takes a [`FunctionCall`] `call` whose name is a plain identifier
and returns a number or a calculation.

* If `call`'s `ArgumentInvocation` contains one or more `KeywordArgument`s or
  one or more `RestArgument`s, throw an error.

* Let `calc` be a calculation whose name is the lower-case value of `call`'s
  name and whose arguments are the result of evaluating each `Expression` in
  `call`'s `ArgumentInvocation` [as a calculation value].

  [as a calculation value]: #evaluating-an-expression-as-a-calculation-value

* Return the result of [simplifying] `calc`.

### Evaluating an Expression as a Calculation Value

This algorithm takes an expression `expression` and returns a
`CalculationValue`.

* If `expression` isn't [calculation-safe], throw an error.

* Otherwise, evaluate `expression` using the semantics defined in the
  [Calculations] specification if there are any, or the standard semantics
  otherwise.

  [Calculations]: #calculations

### Simplifying a Calculation

Replace [the definition of "Simplifying a Calculation"] with the following:

[the definition of "Simplifying a Calculation"]: ../spec/types/calculation.md#simplifying-a-calculation

This algorithm takes a calculation `calc` and returns a number or a calculation.

> This algorithm is intended to return a value that's CSS-semantically identical
> to the input.

* If `calc` was parsed from an expression within a `SupportsDeclaration`'s
  `Expression`, but outside any interpolation, return a `calc` as-is.

* Let `arguments` be the result of [simplifying] each of `calc`'s arguments.

  [simplifying]: ../spec/types/calculation.md#simplifying-a-calculationvalue

* If `calc`'s name is `"calc"` and `arguments` contains exactly a single number
  or calculation, return it.

* If `calc`'s name is `"mod"`, `"rem"`, `"atan2"`, or `"pow"`; `arguments` has
  fewer than two elements; and none of those are unquoted strings, throw an
  error.

* If `calc`'s name is `"sin"`, `"cos"`, `"tan"`, `"asin"`, `"acos"`, `"atan"`,
  `"sqrt"`, `"log"`, or `"round"` and `arguments` contains exactly a single
  number, return the result of passing that number to the function in
  [`sass:math`] whose name matches `calc`'s.

  [`sass:math`]: ../spec/built-in-modules/math.md

  > The `sass:math` functions will check units here for the functions that
  > require specific or no units.

* If `calc`'s name is `"abs"` and `arguments` contains exactly a single number
  with [known units], return the result of passing that number to the function
  in [`sass:math`] whose name matches `calc`'s.

  [known units]: #known-units

* If `calc`'s name is `"exp"` and `arguments` contains exactly a single number
  `number`, return the result of calling `math.pow(math.$e, number)`.

  > This will throw an error if the argument has units.

* If `calc`'s name is `"sign"` and `arguments` contains exactly a single number
  `number` with [known units]:

  * If `number`'s value is positive, return `1`.
  * If `number`'s value is negative, return `-1`.
  * Otherwise, return a unitless number with the same value as `number`.

    > In this case, `number` is either `+0`, `-0`, or NaN.

  > To match CSS's behavior, these computations *don't* use fuzzy comparisons.

* If `calc`'s name is `"log"`:

  * If any argument is a number with units, throw an error.

  * Otherwise, if `arguments` contains exactly two numbers, return the result of
    passing its arguments to the [`log()` function] in [`sass:math`].

  [`log()` function]: ../spec/built-in-modules/math.md#log

* If `calc`'s name is `"pow"`:

  * If any argument is a number with units, throw an error.

  * Otherwise, if `arguments` contains exactly two numbers, return the result of
    passing those numbers to the [`pow()` function] in [`sass:math`].

  [`pow()` function]: ../spec/built-in-modules/math.md#pow

* If `calc`'s name is `"atan2"` and `arguments` contains two numbers which both
  have [known units], return the result of passing those numbers to the
  [`atan2()` function] in [`sass:math`].

  > This will throw an error if either argument has units.
  >
  > `atan2()` passes percentages along to the browser because they may resolve
  > to negative values, and `atan2(-x, -y) != atan2(x, y)`.

  [`atan2()` function]: ../spec/built-in-modules/math.md#atan2

* If `calc`'s name is `"mod"` or `"rem"`:

  * If `arguments` has only one element and it's not an unquoted string, throw
    an error.

  * Otherwise, if `arguments` contains exactly two numbers `dividend` and
    `modulus`:

    * If `dividend` and `modulus` are [definitely-incompatible], throw an error.

    * If `dividend` and `modulus` are mutually [compatible]:

      * Let `result` be the result of `dividend % modulus`.

      * If `calc`'s name is `"rem"`, and if `dividend` is positive and `modulus`
        is negative or vice versa:

        * If `modulus` is infinite, return `dividend`.
        * If `result` [exactly equals] 0, return `-result`.
        * Otherwise, return `result - modulus`.

      * Otherwise, return `result`.

  [compatible]: ../spec/types/number.md#compatible-units
  [definitely-incompatible]: ../spec/types/number.md#possibly-compatible-numbers
  [exactly equals]: #exact-equality

* If `calc`'s name is `"round"`:

  * If `arguments` has exactly three elements, set `strategy`, `number`, and
    `step` to those arguments respectively.

  * Otherwise, if `arguments` has exactly two elements:

    * If the first element is an unquoted string or interpolation with value
      `"nearest"`, `"up"`, `"down"`, or `"to-zero"`, and the second argument
      isn't an unquoted string, throw an error.

      > Normally we allow unquoted strings anywhere in a calculation, but this
      > helps catch the likely error of a user accidentally writing `round(up,
      > 10px)` without realizing that it needs a third argument.

    * Otherwise, set `number` and `step` to the two arguments respectively and
      `strategy` to an unquoted string with value `"nearest"`.

  * Otherwise, if the single argument isn't an unquoted string, throw an error.

  * If `strategy`, `number`, and `step` are set:

    * If `strategy` isn't a [special variable string], nor is it an unquoted
      string or interpolation with value `"nearest"`, `"up"`, `"down"`, or
      `"to-zero"`, throw an error.

    * If `strategy` is an unquoted string or interpolation and both `number` and
      `step` are numbers:

      * If `number` and `step` are [definitely-incompatible], throw an error.

      * If `number` and `step` are mutually [compatible]:

        * If `number`'s and `step`'s values are both infinite, if `step` is
          [exactly equal] to 0, or if either `number`'s or `step`'s values are
          NaN, return NaN with the same units as `number`.

        * If `number`'s value is infinite, return `number`.

        * If `step`'s value is infinite:

          * If `strategy`'s value is `"nearest"` or `"to-zero"`, return `+0` if
            `number`'s value is positive or `+0`, and `-0` otherwise.

          * If `strategy`'s value is `"up"`, return positive infinity if
            `number`'s value is positive, `+0` if `number`'s value is `+0`, and
            `-0` otherwise.

          * If `strategy`'s value is `"down"`, return negative infinity if
            `number`'s value is negative, `-0` if `number`'s value is `-0`, and
            `+0` otherwise.

        * Set `number` and `step` to the result of [matching units] for `number`
          and `step`.

        * If `number`'s value is [exactly equal] to `step`'s, return `number`.

        * Let `upper` and `lower` be the two integer multiples of `step` which
          are closest to `number` such that `upper` is greater than `lower`. If
          `upper` would be 0, it's specifically `-0`; if `lower` would be zero,
          it's specifically `-0`.

        * If `strategy`'s value is `"nearest"`, return whichever of `upper` and
          `lower` has the smallest absolute distance from `number`. If both have
          an equal difference, return `upper`.

        * If `strategy`'s value is `"up"`, return `upper`.

        * If `strategy`'s value is `"down"`, return `lower`.

        * If `strategy`'s value is `"to-zero"`, return whichever of `upper` and
          `lower` has the smallest absolute difference from 0.

  [special variable string]: ../spec/functions.md#special-variable-string

* If `calc`'s name is `"clamp"`:

  * If `arguments` has fewer than three elements, and none of those are unquoted
    strings, throw an error.

  * Otherwise, if any two elements of `arguments` are [definitely-incompatible]
    numbers, throw an error.

  * Otherwise, if `arguments` are all mutually [compatible] numbers, return the
    result of calling `math.clamp()` with those arguments.

* If `calc`'s name is `"hypot"`:

  * If any two elements of `arguments` are [definitely-incompatible] numbers,
    throw an error.

  * Otherwise, if all `arguments` are all numbers with [known units] that are
    mutually [compatible], return the result of calling `math.hypot()` with
    those arguments.

    > `hypot()` has an exemption for percentages because it squares its inputs,
    > so `hypot(-x, -y) != -hypot(x, y)`.

* If `calc`'s name is `"min"` or `"max"` and `arguments` are all numbers:

  * If the arguments with units are all mutually [compatible], call
    [`math.min()`] or [`math.max()`] (respectively) with those arguments. If
    this doesn't throw an error, return its result.

    > `min()` and `max()` allow unitless numbers to be mixed with units because
    > they need to be backwards-compatible with Sass's old global `min()` and
    > `max()` functions.

  * Otherwise, if any two of those arguments are [definitely-incompatible],
    throw an error.

  [`math.min()`]: ../spec/built-in-modules/math.md#min
  [`math.max()`]: ../spec/built-in-modules/math.md#max

* Otherwise, return a calculation with the same name as `calc` and `arguments`
  as its arguments.

### Simplifying a `CalculationValue`

Replace the block "If `value` is a calculation" in the procedure for
[simplifying a `CalculationValue`] with the following:

[simplifying a `CalculationValue`]: ../spec/types/calculation.md#simplifying-a-calculationvalue

* If `value` is a calculation:

  * Let `result` be the result of [simplifying] `value`.

  * If `result` isn't a calculation whose name is `"calc"`, return `result`.

  * If `result`'s argument isn't an unquoted string, return `result`.

  * If `result`'s argument begins case-insensitively with `"var("`; or if it
    contains whitespace, `"/"`, or `"*"`; return `"(" +` result's argument `+
    ")"` as an unquoted string.

    > This is ensures that values that could resolve to operations end up
    > parenthesized if used in other operations. It's potentially a little
    > overzealous, but that's unlikely to be a major problem given that the
    > output is still smaller than including the full `calc()` and we don't want
    > to encourage users to inject calculations with interpolation anyway.

## Semantics

### `FunctionCall`

Add the following to [the semantics for `FunctionCall`] before checking for a
global function:

[the semantics for `FunctionCall`]: ../spec/functions.md#functioncall

* If `function` is null; `name` is case-insensitively equal to `"min"`, `"max"`,
  `"round"`, or `"abs"`; `call`'s `ArgumentInvocation` doesn't have any
  `KeywordArgument`s or `RestArgument`s; and all arguments in `call`'s
  `ArgumentInvocation` are [calculation-safe], return the result of evaluating
  `call` [as a calculation].

  [calculation-safe]: #calculation-safe-expression
  [as a calculation]: #evaluating-a-functioncall-as-a-calculation

  > For calculation functions that overlap with global Sass function names, we
  > want anything Sass-specific like this to end up calling the Sass function.
  > For all other calculation functions, we want those constructs to throw an
  > error (which they do when evaluating `call` [as a calculation]).

* If `function` is null and `name` is case-insensitively equal to `"calc"`,
  `"clamp"`, `"hypot"`, `"sin"`, `"cos"`, `"tan"`, `"asin"`, `"acos"`, `"atan"`,
  `"sqrt"`, `"exp"`, `"sign"`, `"mod"`, `"rem"`, `"atan2"`, `"pow"`, or `"log"`,
  return the result of evaluating `call` [as a calculation].

### Calculations

Remove all prior [semantics for Calculations]. The following semantics apply
only when evaluating expressions [as calculation values].

[semantics for Calculations]: ../spec/types/calculation.md#semantics
[as calculation values]: #evaluating-an-expression-as-a-calculation-value

#### `FunctionExpression` and `Variable`

To evaluate a `FunctionExpression` or a `Variable` as a calculation value,
evaluate it using the standard semantics. If the result is a number, an unquoted
string, or a calculation, return it. Otherwise, throw an error.

> Allowing variables to return unquoted strings here supports referential
> transparency, so that `$var: fn(); calc($var)` works the same as `calc(fn())`.

#### `SumExpression` and `ProductExpression`

To evaluate a `SumExpresssion` or a `ProductExpression` as a calculation value:

* Let `left` be the result of evaluating the first operand as a calculation
  value.

* For each remaining `"+"`, `"-"`, `"*"`, or `"/"` token `operator` and operand
  `operand`:

  * Let `right` be the result of evaluating `operand` as a calculation value.

  * Set `left` to a `CalcOperation` with `operator`, `left`, and `right`.

* Return `left`.

### `SpaceListExpression`

To evaluate a `SpaceListExpresssion` as a calculation value:

* Let `elements` be the results of evaluating each element as a calculation
  value.

* If `elements` has two adjacent elements that aren't unquoted strings, throw an
  error.

* Let `serialized` be an empty list.

* For each `element` of `elements`:

  * Let `css` be the result of [serializing] `element`.

    [serializing]: ../spec/types/calculation.md#serialization

  * If `element` is a `CalcOperation` that was produced by evaluating a
    `ParenthesizedExpression`, set `css` to `"(" + css + ")"`.

  * Append `css` to `serialized`.

* Return an unquoted strings whose contents are the elements of `serialized`
  separated by `" "`.

#### `ParenthesizedExpression`

> If a `var()` or an interpolation is written directly within parentheses, it's
> necessary to preserve those parentheses. CSS resolves `var()` by literally
> replacing the function with the value of the variable and *then* parsing the
> surrounding context.
>
> For example, if `--ratio: 2/3`, `calc(1 / (var(--ratio)))` is parsed as
> `calc(1 / (2/3)) = calc(3/2)` but `calc(1 / var(--ratio))` is parsed as
> `calc(1 / 2/3) = calc(1/6)`.

To evaluate a `ParenthesizedExpression` with contents `expression` as a
calculation value:

* Let `result` be the result of evaluating `expression` as a calculation value.

* If `result` is an unquoted string, return `"(" + result + ")"` as an unquoted
  string.

* Otherwise, return `result`.

#### `InterpolatedIdentifier`

To evaluate an `InterpolatedIdentifier` `ident` as a calculation value:

* If `ident` is case-insensitively equal to `pi`, return 3.141592653589793.

  > This is the closest double approximation of the mathematical constant π.

* If `ident` is case-insensitively equal to `e`, return 2.718281828459045.

  > This is the closest double approximation of the mathematical constant e.

* If `ident` is case-insensitively equal to `infinity`, return the double
  `Infinity`.

* If `ident` is case-insensitively equal to `-infinity`, return the double
  `-Infinity`.

* If `ident` is case-insensitively equal to `nan`, return the double `NaN`.

* Otherwise, return the result of evaluating `ident` using standard semantics.

  > This will be an `UnquotedString`.

## Interaction with Forward Slash as a Separator

Although the [Forward Slash as a Separator proposal] has not yet been integrated
into the canonical spec, it will affect some of the constructs modified by this
proposal. This section defines additional modifications to the spec *as it will
exist* when that proposal is integrated.

[Forward Slash as a Separator proposal]: slash-separator.md

Remove "or `/`" from the definition of a calculation-safe `ProductExpression`.
Add "An unbracketed `SlashListExpression` with more than one element, all of
which are calculation-safe" to the list of calculation-safe expressions.

Replace "evaluating each `Expression`" with "[adjusting slash precedence] in and
then evaluating each `Expression`" in [evaluting a `FunctionCall` as a
calculation].

[adjusting slash precedence]: #adjusting-slash-precedence
[evaluting a `FunctionCall` as a calculation]: #evaluating-a-functioncall-as-a-calculation

### Adjusting Slash Precedence

This algorithm takes a calculation-safe expression `expression` and returns
another calculation-safe expression with the precedence of
`SlashListExpression`s adjusted to match division precedence.

* Return a copy of `expression` except, for each `SlashListExpression`:

  * Let `left` be the first element of the list.

  * For each remaining element `right`:

    * If `left` and `right` are both `SumExpression`s:

      * Let `last-left` be the last operand of `left` and `first-right` the
        first operand of `right`.

      * Set `left` to a `SumExpression` that begins with all operands and
        operators of `left` except `last-left`, followed by a
        `SlashListExpression` with elements `last-left` and `first-right`,
        followed by all operators and operands of `right` except `first-right`.

        > For example, `slash-list(1 + 2, 3 + 4)` becomes `1 + (2 / 3) + 4`.

    * Otherwise, if `left` is a `SumExpression`:

      * Let `last-left` be the last operand of `left`.

      * Set `left` to a `SumExpression` that begins with all operands and
        operators of `left` except `last-left`, followed by a
        `SlashListExpression` with elements `last-left` and `right`.

        > For example, `slash-list(1 + 2, 3)` becomes `1 + (2 / 3)`.

    * Otherwise, if `right` is a `SumExpression` or a `ProductExpression`:

      * Let `first-right` be the first operand of `right`.

      * Set `left` to an expression of the same type as `right` that begins a
        `SlashListExpression` with elements `left` and `first-right`, followed
        by operators and operands of `right` except `first-right`.

        > For example, `slash-list(1, 2 * 3)` becomes `(1 / 2) * 3`.

    * Otherwise, if `left` is a slash-separated list, add `right` to the end.

    * Otherwise, set `left` to a slash-separated list containing `left` and
      `right`.

  * Replace each element in `left` with the result of adjusting slash precedence
    in that element.

  * Replace the `SlashListExpression` with `left` in the returned expression.

### `SlashListExpression`

To evaluate a `SlashListExpression` as a calculation value:

* Let `left` be the result of evaluating the first element of the list as a
  calculation value.

* For each remaining element `element`:

  * Let `right` be the result of evaluating `element` as a calculation value.

  * Set `left` to a `CalcOperation` with operator `"/"`, `left`, and `right`.

* Return `left`.

## API

### Types

#### `CalculationInterpolation`

Replace the definition of this class, other than its TypeScript API, with the
following:

A deprecated alternative JS API representation of an unquoted Sass string that's
always surrounded by parentheses. It's never returned by the Sass compiler, but
for backwards-compatibility users may still construct it and pass it to the Sass
compiler.

> `CalculationInterpolation`s are no longer generated by the Sass compiler,
> because it can now tell at evaluation time whether an interpolation was
> originally surrounded by parentheses. However, until we make a breaking
> revision of the JS API, users may continue to pass `CalculationInterpolation`s

##### `internal`

A private property like [`Value.internal`] that refers to a Sass string.

##### Constructor

Creates a `CalculationInterpolation` with its `internal` set to an unquoted Sass
string with text `"(" + value + ")"` and returns it.

##### `value`

Returns [`internal`](#internal)'s `value` field's text, without the leading and
trailing parentheses.

##### `equals`

Whether `other` is a `CalculationInterpolation` and [`internal`](#internal) is
equal to `other.internal` in Sass.

##### `hashCode`

Returns the same number for any two `CalculationInterpolation`s that are equal
according to [`equals`](#equals).

## Embedded Protocol

### `CalculationValue.value.interpolation`

Add the following to this field's documentation:

The compiler must treat this as identical to a `string` option whose value is
`"(" + interpolation + ")"`.

This field is deprecated and hosts should avoid using it.

## Deprecation Process

This proposal causes two breaking changes, each of which will be mitigated by
supporting something very close to the old behavior with a deprecation warning
until the next major version release.

### `abs-percent`

> Under this proposal, if a number with unit `%` is passed to the global `abs()`
> function, it will be emitted as a plain CSS `abs()` rather than returning the
> absolute value of the percentage itself.

During the deprecation period, when simplifying a calculation named `"abs"`
whose sole argument is a number *without* [known units], return the result of
calling `math.abs()` with that number and emit a deprecation warning named
`abs-percent`.

## Draft 3.1

* Narrow and clarify the behavior of `Calculation.clamp()` with
  potentially-multiple arguments.

* Make the argument type of `CalculationOperation.equals()` and
  `CalculationInterpolation.equals()` `unknown` to match the immutable.js
  typings.

* Rather than making each `SassCalculation` factory check transitively for
  quoted strings, make `CalculationOperation`'s constructor check for them so
  that they're guaranteed not to exist transitively.

## Draft 3

* Make `CalculationOperation` and `CalculationInterpolation` concrete rather
  than abstract classes.
* Export `CalculationValue` and `CalculationOperator` types.
* Adjust `SassCalculation.clamp` to interpret comma-separated `min` values as
  valid input for `value` and `max`.

## Draft 2

* Simplify calculations at the point at which they're returned from the JS API,
  rather than eagerly when they're constructed.

## Draft 1

* Initial draft.

# JavaScript Calculation API: Draft 3.1
## Background, Summary, Design, Simplification

> This section is non-normative.

This proposal simply exposes the [calculation type] to the JavaScript API.

[calculation type]: ../accepted/first-class-calc.md

We considered eagerly simplifying calculations as they were constructed to
match the behavior of values in Sass itself. However, this poses a problem
for API implementations that don't have direct access to compiler logic, such
as the Node.js embedded host: they would need to implement the simplification
logic locally, which is relatively complex and opens a broad surface area for
subtle cross-implementation incompatibilities.

This could potentially be solved by adding an explicit request to the
embedded protocol, but this would pose its own problems given that JS is
strict about separating asynchronous calls (like those across process
boundaries) and synchronous calls (like this API).

Given that, we chose instead to handle simplification only at the custom
function boundary rather than when a calculation is constructed.

#### `assertCalculation`

Returns `this` if it's a [`SassCalculation`] and throws an error otherwise.

[`SassCalculation`]: #sasscalculation

> The `name` parameter may be used for error reporting.

#### `functions`

Replace this option's specification with:

Before beginning compilation:

* For each key/value pair `signature`/`function` in this record:

  * If `signature` isn't an [<ident-token>] followed immediately by an
    `ArgumentDeclaration`, throw an error.

  * Let `name` be `signature`'s <ident-token>.

  * If there's already a global function whose name is
    underscore-insensitively equal to `name`, continue to the next
    key/value pair.

  * Otherwise, add a global function whose signature is `signature`. When
    this function is called:

    * Let `result` be the result of calling the associated
      `CustomFunction` with the given arguments. If this call throws an
      error, treat it as a Sass error thrown by the Sass function.

      > As in the rest of Sass, `_`s and `-`s are considered equivalent
      > when determining which function signatures match.

    * Throw an error if `result` is or transitively contains:

      * An object that's not an instance of the `Value` class.

      * A [`SassFunction`] whose `signature` field isn't a valid Sass
        function signature that could appear after the `@function`
        directive in a Sass stylesheet.

    * Return a copy of `result.internal` with all calculations it
      transitively contains (including the return value itself if it's a
      calculation) replaced with the result of [simplifying] those
      calculations.

### `CalculationValue`

### `SassCalculation`

The JS API representation of a Sass [calculation].

> Note: in the JS API calculations are not simplified eagerly. This also
> means that unsimplified calculations are not equal to the numbers they
> would be simplified to.

#### `internal`

The [private `internal` field] refers to a Sass [calculation].

[private `internal` field]: ../spec/js-api/value/index.d.ts.md#internal
[calculation]: ../spec/types/calculation.md

#### `calc`

Creates a value that represents `calc(argument)`.

* If `argument` is a quoted `SassString`, throw an error.

* Return a calculation with name `"calc"` and `argument` as its single argument.
    
# Calculation API

The type of values that can be arguments to a [`SassCalculation`].

### `SassCalculation`

The JS API representation of a Sass [calculation].

> Note: in the JS API calculations are not simplified eagerly. This also
> means that unsimplified calculations are not equal to the numbers they
> would be simplified to.

#### `internal`

The [private `internal` field] refers to a Sass [calculation].

[private `internal` field]: index.d.ts.md#internal
[calculation]: ../../types/calculation.md

#### `calc`

Creates a value that represents `calc(argument)`.

* If `argument` is a quoted `SassString`, throw an error.

* Return a calculation with name `"calc"` and `argument` as its single argument.

#### `min`

Creates a value that represents `min(...arguments)`.

* If `argument` contains a quoted `SassString`, throw an error.

* Return a calculation with name `"min"` and `arguments` as its arguments.

#### `max`

Creates a value that represents `max(...arguments)`.

* If `arguments` contains a quoted `SassString`, throw an error.

* Return a calculation with name `"max"` and `arguments` as its arguments.

#### `clamp`

Creates a value that represents `calc(min, value, max)` expression.

* If `min`, `max`, or `clamp` is a quoted `SassString`, throw an error.

* If `value` is undefined and `max` is not undefined, throw an error.

* If either `value` or `max` is undefined and neither `min` nor `value` is a
  `SassString` or `CalculationInterpolation`, throw an error.

* Return a calculation with name `"clamp"` and `min`, `value`, and `max` as its
  arguments, excluding any arguments that are undefined.

#### `name`

### `CalculationOperation`

The JS API representation of a Sass [`CalculationOperation`].

#### `internal`

A private property like [`Value.internal`] that refers to a Sass
[`CalculationOperation`].

[`Value.internal`]: index.d.ts.md

#### Constructor

Creates a Sass `CalculationOperation`:

* Throw an error if `left` or `right` is a quoted `SassString`.
* Set the fields to the arguments of the corresponding names.
* Return the resulting `CalculationOperation`.

#### `operator`

Returns [`internal`][co-internal]'s `operator` field.

[co-internal]: #internal-1

#### `left`

Returns [`internal`][co-internal]'s `left` field.


#### `right`

Returns [`internal`][co-internal]'s `right` field.

#### `equals`

Whether [`internal`][co-internal] is equal to `other.internal` in Sass

#### `hashCode`

Returns the same number for any two `CalculationOperation`s that are equal
according to [`equals`](#equals).

### `CalculationInterpolation`

A deprecated alternative JS API representation of an unquoted Sass string that's
always surrounded by parentheses. It's never returned by the Sass compiler, but
for backwards-compatibility users may still construct it and pass it to the Sass
compiler.

> `CalculationInterpolation`s are no longer generated by the Sass compiler,
> because it can now tell at evaluation time whether an interpolation was
> originally surrounded by parentheses. However, until we make a breaking
> revision of the JS API, users may continue to pass `CalculationInterpolation`s

#### `internal`

A private property like [`Value.internal`] that refers to a Sass string.

#### Constructor

Creates a `CalculationInterpolation` with `internal` set to an unquoted Sass
string with text `"(" + value + ")"` and returns it.

#### `value`

Returns [`internal`][ci-internal]'s `value` field's text, without the leading
and trailing parentheses.

[ci-internal]: #internal-1


#### `equals`

Whether `other` is a `CalculationInterpolation` and [`internal`][ci-internal] is
equal to `other.internal` in Sass.

#### `hashCode`

Returns the same number for any two `CalculationInterpolation`s that are equal
according to [`equals`](#equals-1).

# Calculations

## Definitions

### Calculation-Safe Expression

An expression is "calculation-safe" if it is one of:

* A [`FunctionExpression`].
* A `ParenthesizedExpression` whose contents is calculation-safe.
* A `SumExpression` whose operands are calculation-safe.
* A `ProductExpression` whose operator is `*` or `/` and whose operands are
  calculation-safe.
* A `Number`.
* A `Variable`.
* An `InterpolatedIdentifier`.
* An unbracketed `SpaceListExpression` with more than one element, whose
  elements are all calculation-safe.

[`FunctionExpression`]: ../functions.md#syntax

> Because calculations have special syntax in CSS, only a subset of SassScript
> expressions are valid (and these are interpreted differently than elsewhere).

### Operations

A calculation follows the default behavior of all SassScript operations, except
that it throws an error if used as an operand of a:

* unary or binary `-` operation,
* unary `+` operation,
* binary `+` operation where the other operand is not a string,

and equality is defined as below.

> This helps ensure that if a user expects a number and receives a calculation
> instead, it will throw an error quickly rather than propagating as an unquoted
> string. Binary `+` with a string is allowed specifically for
> backwards-compatibility with the `$variable + ""` pattern for converting a
> value to a string to dynamically inspect it.

#### Equality

Two calculations are considered equal if their names are equal, they have the
same number of arguments, and each argument in one calculation is equal to the
corresponding argument in the other.

`CalculationOperation` values are equal if each field in one value is equal to
the corresponding field in the other.

### Serialization

#### Calculation

To serialize a calculation, emit its name followed by "(", then each of its arguments
separated by ",", then ")".

#### `CalculationOperation`

To serialize a `CalculationOperation`:

* Let `left` and `right` be the result of serializing the left and right values,
  respectively.

* If the operator is `"*"` or `"/"` and the left value is a
  `CalculationOperation` with operator `"+"` or `"-"`, emit `"("` followed by
  `left` followed by `")"`. Otherwise, emit `left`.

* Emit `" "`, then the operator, then `" "`.

* If either:

  * the operator is `"*"` or `"-"` and the right value is a
    `CalculationOperation` with operator `"+"` or `"-"`, or
  * the operator is `"/"` and the right value is a `CalculationOperation`,
  * the operator is `"/"` and the right value is a degenerate number with one or
    more units.

  emit `"("` followed by `right` followed by `")"`. Otherwise, emit `right`.

#### `Number`

To serialize a `Number` within a `CalculationExpression`:

* If the number is [degenerate]:

  * If the number has more than one numerator unit, or more than zero denominator
    units, throw an error.

  * Otherwise, [convert the number to a calculation], then serialize the
    resulting calculation's sole argument.

  [degenerate]: number.md#degenerate-number
  [convert the number to a calculation]: number.md#converting-a-number-to-a-calculation

* Otherwise, serialize the number as normal.

## Procedures

### Evaluating a `FunctionCall` as a Calculation

This algorithm takes a [`FunctionCall`] `call` whose name is a plain identifier
and returns a number or a calculation.

* If `call`'s `ArgumentInvocation` contains one or more `KeywordArgument`s or
  one or more `RestArgument`s, throw an error.

* Let `calc` be a calculation whose name is the lower-case value of `call`'s
  name and whose arguments are the result of evaluating each `Expression` in
  `call`'s `ArgumentInvocation` [as a calculation value].

  [as a calculation value]: #evaluating-an-expression-as-a-calculation-value

* Return the result of [simplifying](#simplifying-a-calculation) `calc`.

### Evaluating an Expression as a Calculation Value

This algorithm takes an expression `expression` and returns a
`CalculationValue`.

* If `expression` isn't [calculation-safe], throw an error.

* Otherwise, evaluate `expression` using the semantics defined in the
  [Semantics] section if available, or the standard semantics otherwise.

  [Semantics]: #semantics

### Simplifying a Calculation

This algorithm takes a calculation `calc` and returns a number or a calculation.

> This algorithm is intended to return a value that's CSS-semantically identical
> to the input.

* If `calc` was parsed from an expression within a `SupportsDeclaration`'s
  `Expression`, but outside any interpolation, return a `calc` as-is.

* Let `arguments` be the result of [simplifying] each of `calc`'s arguments.

  [simplifying]: #simplifying-a-calculationvalue

* If `calc`'s name is `"calc"` and `arguments` contains exactly a single number
  or calculation, return it.

* If `calc`'s name is `"mod"`, `"rem"`, `"atan2"`, or `"pow"`; `arguments` has
  fewer than two elements; and none of those are unquoted strings, throw an
  error.

* If `calc`'s name is `"sin"`, `"cos"`, `"tan"`, `"asin"`, `"acos"`, `"atan"`,
  `"sqrt"`, `"log"`, or `"round"` and `arguments` contains exactly a single
  number, return the result of passing that number to the function in
  [`sass:math`] whose name matches `calc`'s.

  [`sass:math`]: ../built-in-modules/math.md

  > The `sass:math` functions will check units here for the functions that
  > require specific or no units.

* If `calc`'s name is `"abs"` and `arguments` contains exactly a single number
  with [known units], return the result of passing that number to the function
  in [`sass:math`] whose name matches `calc`'s.

  [known units]: number.md#known-units

* If `calc`'s name is `"exp"` and `arguments` contains exactly a single number
  `number`, return the result of calling `math.pow(math.$e, number)`.

  > This will throw an error if the argument has units.

* If `calc`'s name is `"sign"` and `arguments` contains exactly a single number
  `number` with [known units]:

  * If `number`'s value is positive, return `1`.
  * If `number`'s value is negative, return `-1`.
  * Otherwise, return a unitless number with the same value as `number`.

    > In this case, `number` is either `+0`, `-0`, or NaN.

  > To match CSS's behavior, these computations *don't* use fuzzy comparisons.

* If `calc`'s name is `"log"`:

  * If any argument is a number with units, throw an error.

  * Otherwise, if `arguments` contains exactly two numbers, return the result of
    passing its arguments to the [`log()` function] in [`sass:math`].

  [`log()` function]: ../built-in-modules/math.md#log

* If `calc`'s name is `"pow"`:

  * If any argument is a number with units, throw an error.

  * Otherwise, if `arguments` contains exactly two numbers, return the result of
    passing those numbers to the [`pow()` function] in [`sass:math`].

  [`pow()` function]: ../built-in-modules/math.md#pow

* If `calc`'s name is `"atan2"` and `arguments` contains two numbers which both
  have [known units], return the result of passing those numbers to the
  [`atan2()` function] in [`sass:math`].

  > This will throw an error if either argument has units.
  >
  > `atan2()` passes percentages along to the browser because they may resolve
  > to negative values, and `atan2(-x, -y) != atan2(x, y)`.

  [`atan2()` function]: ../built-in-modules/math.md#atan2

* If `calc`'s name is `"mod"` or `"rem"`:

  * If `arguments` has only one element and it's not an unquoted string, throw
    an error.

  * Otherwise, if `arguments` contains exactly two numbers `dividend` and
    `modulus`:

    * If `dividend` and `modulus` are [definitely-incompatible], throw an error.

    * If `dividend` and `modulus` are mutually [compatible]:

      * Let `result` be the result of `dividend % modulus`.

      * If `calc`'s name is `"rem"`, and if `dividend` is positive and `modulus`
        is negative or vice versa:

        * If `modulus` is infinite, return `dividend`.
        * If `result` [exactly equals] 0, return `-result`.
        * Otherwise, return `result - modulus`.

      * Otherwise, return `result`.

  [compatible]: number.md#compatible-units
  [definitely-incompatible]: number.md#possibly-compatible-numbers
  [exactly equals]: number.md#exact-equality

* If `calc`'s name is `"round"`:

  * If `arguments` has exactly three elements, set `strategy`, `number`, and
    `step` to those arguments respectively.

  * Otherwise, if `arguments` has exactly two elements:

    * If the first element is an unquoted string or interpolation with value
      `"nearest"`, `"up"`, `"down"`, or `"to-zero"`, and the second argument
      isn't an unquoted string, throw an error.

      > Normally we allow unquoted strings anywhere in a calculation, but this
      > helps catch the likely error of a user accidentally writing `round(up,
      > 10px)` without realizing that it needs a third argument.

    * Otherwise, set `number` and `step` to the two arguments respectively and
      `strategy` to an unquoted string with value `"nearest"`.

  * Otherwise, if the single argument isn't an unquoted string, throw an error.

  * If `strategy`, `number`, and `step` are set:

    * If `strategy` isn't a [special variable string], nor is it an unquoted
      string or interpolation with value `"nearest"`, `"up"`, `"down"`, or
      `"to-zero"`, throw an error.

    * If `strategy` is an unquoted string or interpolation and both `number` and
      `step` are numbers:

      * If `number` and `step` are [definitely-incompatible], throw an error.

      * If `number` and `step` are mutually [compatible]:

        * If `number`'s and `step`'s values are both infinite, if `step` is
          [exactly equal] to 0, or if either `number`'s or `step`'s values are
          NaN, return NaN with the same units as `number`.

        * If `number`'s value is infinite, return `number`.

        * If `step`'s value is infinite:

          * If `strategy`'s value is `"nearest"` or `"to-zero"`, return `+0` if
            `number`'s value is positive or `+0`, and `-0` otherwise.

          * If `strategy`'s value is `"up"`, return positive infinity if
            `number`'s value is positive, `+0` if `number`'s value is `+0`, and
            `-0` otherwise.

          * If `strategy`'s value is `"down"`, return negative infinity if
            `number`'s value is negative, `-0` if `number`'s value is `-0`, and
            `+0` otherwise.

        * Set `number` and `step` to the result of [matching units] for `number`
          and `step`.

        * If `number`'s value is [exactly equal] to `step`'s, return `number`.

        * Let `upper` and `lower` be the two integer multiples of `step` which
          are closest to `number` such that `upper` is greater than `lower`. If
          `upper` would be 0, it's specifically `-0`; if `lower` would be zero,
          it's specifically `-0`.

        * If `strategy`'s value is `"nearest"`, return whichever of `upper` and
          `lower` has the smallest absolute distance from `number`. If both have
          an equal difference, return `upper`.

        * If `strategy`'s value is `"up"`, return `upper`.

        * If `strategy`'s value is `"down"`, return `lower`.

        * If `strategy`'s value is `"to-zero"`, return whichever of `upper` and
          `lower` has the smallest absolute difference from 0.

  [special variable string]: ../functions.md#special-variable-string

* If `calc`'s name is `"clamp"`:

  * If `arguments` has fewer than three elements, and none of those are unquoted
    strings, throw an error.

  * Otherwise, if any two elements of `arguments` are [definitely-incompatible]
    numbers, throw an error.

  * Otherwise, if `arguments` are all mutually [compatible] numbers, return the
    result of calling `math.clamp()` with those arguments.

* If `calc`'s name is `"hypot"`:

  * If any two elements of `arguments` are [definitely-incompatible] numbers,
    throw an error.

  * Otherwise, if all `arguments` are all numbers with [known units] that are
    mutually [compatible], return the result of calling `math.hypot()` with
    those arguments.

    > `hypot()` has an exemption for percentages because it squares its inputs,
    > so `hypot(-x, -y) != -hypot(x, y)`.

* If `calc`'s name is `"min"` or `"max"` and `arguments` are all numbers:

  * If the arguments with units are all mutually [compatible], call
    [`math.min()`] or [`math.max()`] (respectively) with those arguments. If
    this doesn't throw an error, return its result.

    > `min()` and `max()` allow unitless numbers to be mixed with units because
    > they need to be backwards-compatible with Sass's old global `min()` and
    > `max()` functions.

  * Otherwise, if any two of those arguments are [definitely-incompatible],
    throw an error.

  [`math.min()`]: ../built-in-modules/math.md#min
  [`math.max()`]: ../built-in-modules/math.md#max

* Otherwise, return a calculation with the same name as `calc` and `arguments`
  as its arguments.

### Simplifying a `CalculationValue`

This algorithm takes a `CalculationValue` `value` and returns a
`CalculationValue`.

> This algorithm is intended to return a value that's CSS-semantically identical
> to the input.

* If `value` is a number or unquoted string, return it as-is.

* If `value` is a calculation:

  * Let `result` be the result of [simplifying] `value`.

  * If `result` isn't a calculation whose name is `"calc"`, return `result`.

  * If `result`'s argument isn't an unquoted string, return `result`'s argument.

  * If `result`'s argument begins case-insensitively with `"var("`; or if it
    contains whitespace, `"/"`, or `"*"`; return `"(" +` result's argument `+
    ")"` as an unquoted string.

    > This is ensures that values that could resolve to operations end up
    > parenthesized if used in other operations. It's potentially a little
    > overzealous, but that's unlikely to be a major problem given that the
    > output is still smaller than including the full `calc()` and we don't want
    > to encourage users to inject calculations with interpolation anyway.

* Otherwise, `value` must be a `CalculationOperation`. Let `left` and `right` be
  the result of simplifying `value.left` and `value.right`, respectively.

* Let `operator` be `value.operator`.

* If `operator` is `"+"` or `"-"`:

  * If `left` and `right` are both numbers with [compatible] units, return
    `left + right` or `left - right`, respectively.

  * Otherwise, if `left` and `right` are both numbers, the `name` of the
    innermost `Calculation` that contains `value` is `"min"` or `"max"`, and
    either `left` or `right` is unitless, return `left + right` or `left -
    right`, respectively.

    > This preserves backwards-compatibility with Sass's old global `min()` and
    > `max()` functions, most of which are now parsed as `CssMinMax`es.

  * Otherwise, if either `left` or `right` is a number with more than one
    numerator unit or more than zero denominator units, throw an error.

  * Otherwise, if `left` and `right` are [definitely-incompatible] numbers,
    throw an error.

  * If `right` is a number whose value is fuzzy-less-than zero, set `right` to
    `right * -1` and set `operator` to `"-"` or `"+"`, respectively.

  * Return a `CalculationOperation` with `operator`, `left`, and `right`.

* If `operator` is `"*"` or `"/"`:

  * If `left` and `right` are both numbers, return `left * right` or
    `math.div(left, right)`, respectively.

  * Otherwise, return a `CalculationOperation` with `operator`, `left`, and
    `right`.

## Semantics

The following semantics only apply when evaluating expressions [as calculation
values].

[as calculation values]: #evaluating-an-expression-as-a-calculation-value

### `FunctionExpression` and `Variable`

To evaluate a `FunctionExpression` or a `Variable` as a calculation value,
evaluate it using the standard semantics. If the result is a number, an unquoted
string, or a calculation, return it. Otherwise, throw an error.

> Allowing variables to return unquoted strings here supports referential
> transparency, so that `$var: fn(); calc($var)` works the same as `calc(fn())`.

### `SumExpression` and `ProductExpression`

To evaluate a `SumExpresssion` or a `ProductExpression` as a calculation value:

* Let `left` be the result of evaluating the first operand as a calculation
  value.

* For each remaining `"+"`, `"-"`, `"*"`, or `"/"` token `operator` and operand
  `operand`:

  * Let `right` be the result of evaluating `operand` as a calculation value.

  * Set `left` to a `CalcOperation` with `operator`, `left`, and `right`.

* Return `left`.

### `SpaceListExpression`

To evaluate a `SpaceListExpresssion` as a calculation value:

* Let `elements` be the results of evaluating each element as a calculation
  value.

* If `elements` has two adjacent elements that aren't unquoted strings, throw an
  error.
  
* Let `serialized` be an empty list.

* For each `element` of `elements`:

  * Let `css` be the result of [serializing] `element`.

    [serializing]: #serialization

  * If `element` is a `CalcOperation` that was produced by evaluating a
    `ParenthesizedExpression`, set `css` to `"(" + css + ")"`.

  * Append `css` to `serialized`.

* Return an unquoted strings whose contents are the elements of `serialized`
  separated by `" "`.

### `ParenthesizedExpression`

> If a `var()` or an interpolation is written directly within parentheses, it's
> necessary to preserve those parentheses. CSS resolves `var()` by literally
> replacing the function with the value of the variable and *then* parsing the
> surrounding context.
>
> For example, if `--ratio: 2/3`, `calc(1 / (var(--ratio)))` is parsed as
> `calc(1 / (2/3)) = calc(3/2)` but `calc(1 / var(--ratio))` is parsed as
> `calc(1 / 2/3) = calc(1/6)`.

To evaluate a `ParenthesizedExpression` with contents `expression` as a
calculation value:

* Let `result` be the result of evaluating `expression` as a calculation value.

* If `result` is an unquoted string, return `"(" + result + ")"` as an unquoted
  string.

* Otherwise, return `result`.

### `InterpolatedIdentifier`

To evaluate an `InterpolatedIdentifier` `ident` as a calculation value:

* If `ident` is case-insensitively equal to `pi`, return 3.141592653589793.

  > This is the closest double approximation of the mathematical constant π.

* If `ident` is case-insensitively equal to `e`, return 2.718281828459045.

  > This is the closest double approximation of the mathematical constant e.

* If `ident` is case-insensitively equal to `infinity`, return the double
  `Infinity`.

* If `ident` is case-insensitively equal to `-infinity`, return the double
  `-Infinity`.

* If `ident` is case-insensitively equal to `nan`, return the double `NaN`.

* Otherwise, return the result of evaluating `ident` using standard semantics.

  > This will be an `UnquotedString`.

# `clamp()`: Draft 1

This proposal adds support for `clamp()` as a CSS function with special parsing
support akin to `min()`, `max()`, and `calc()`.

> This section is non-normative.

CSS Values and Units 4 has introduced the `clamp()` function as a way of
representing mathematical expressions that are evaluated by the browser at
render-time. Syntactically, it's closely-related to the existing `calc()`
function, which Sass has long supported as a special syntactic form that allows
almost any text within its parentheses. This proposal extends that syntax to
cover `clamp()` as well.

According to [caniuse], browser support for `clamp()` first landed in Chrome in
December 2019, and at time of writing is supported in Edge, Firefox, Safari, and
Opera, covering 86.8% of users. Despite its wide availability, its use in Sass
doesn't seem too widespread yet judging by the lack of support requests and only
two 👍s on the issue in the issue tracker.

## Summary

This proposal makes `clamp()` essentially a synonym of `calc()`, so that its
contents are parsed in the same liberal manner with interpolation as the only
valid use of Sass within them.

### Design Decisions

This proposal implies that invocations like `clamp($foo)` will not evaluate Sass
variables. This does represent a potential backwards-incompatibility for users
who have started using `clamp()` with Sass's default function syntax, which
interprets all arguments as SassScript expressions. However, outside of obvious
cases like a single variable being used as an argument, it's difficult to
disambiguate Sass expressions and plain-CSS math expressions, so we'd like to
avoid needing to do so if at all possible.

It's worth noting that there is prior art for this disambiguation. When adding
support for [plain-CSS `min()` and `max()`] functions, we decided to
disambiguate the plain CSS versions from the Sass-syntax versions by first
parsing as the former and falling back to the latter if that parse failed. This
proposal intentionally avoids that approach for several reasons:

* The disambiguation was necessary for `min()` and `max()` because those
  functions had existed as global Sass functions for many years. `clamp()`, on
  the other hand, has only been usefully usable in CSS for less than a year, and
  it's not a built-in Sass functions so there's much less reason to pass Sass
  variables to it directly. In other words, the potential impact of a breaking
  change is low.

* Even with `min()` and `max()`, we're concerned that the double-parsing will be
  confusing to users who expect the same outer syntax to imply the same inner
  parsing. We'd like to avoid extending that confusion any more broadly than
  necessary.

* Attempting to parse a production one way and falling back on a different parse
  method is expensive in the parser. That said, Dart Sass's parser is generally
  not a bottleneck so this is a relatively smaller concern.

[plain-CSS `min()` and `max()`]: ../accepted/min-max.md

## Definitions

### Special Number String

`clamp(` is added to the list of possible prefixes for a [special number
string].

[special number string]: ../spec/functions.md#special-number

## Syntax

### `SpecialFunctionName`

The [`SpecialFunctionName`] production will be changed to the following:

[`SpecialFunctionName`]: ../spec/syntax.md#specialfunctionexpression

<x><pre>
**SpecialFunctionName**¹ ::= VendorPrefix? ('calc(' | 'element(' | 'expression(')
                           | 'clamp('
</pre></x>

1: `SpecialFunctionName` is matched case-insensitively and may not contain
   whitespace.

> Note that vendor prefixes are *not* supported for `clamp()` because no browser
> has ever shipped support for it guarded by a prefix.

### `CalcValue`

The `CalcValue` production will be changed to the following:

<x><pre>
**CalcValue**         ::= CalcValue (('+' | '-' | '*' | '/') CalcValue)+
&#32;                   | '(' CalcValue ')'
&#32;                   | CalcFunctionName InterpolatedDeclarationValue ')'
&#32;                   | CssMinMax
&#32;                   | Interpolation
&#32;                   | Number
**CalcFunctionName**¹ ::= 'calc(' | 'env(' | 'var(' | 'clamp('
</pre></x>

1: `CalcFunctionName` is matched case-insensitively.

## Deprecation Process

This proposal changes the way `clamp()` function calls that are passed
SassScript expressions are parsed, which is backwards-incompatible. Despite
this, it does not call for a deprecation process. Because `clamp()` is so young
and the use-cases for SassScript arguments so narrow, the impact of the
backwards-incompatibility is likely to be relatively minor. In addition,
delaying the release of full syntactic support for the duration of a deprecation
period is likely to cause substantial user pain as more users attempt to use
`clamp()` going forward.

As such, I propose we treat this change as though it were a potentially-breaking
bug fix rather than a full-fledged breaking change.

# HWB Color Functions: Draft 1

This proposal adds a new `hwb()` color format to the `sass:color` module, along
with inspection and adjustment options for *whiteness* and *blackness*.

> This section is non-normative.

The [CSS Color Module level 4][color-4] provides several new CSS formats for
describing color, but `hwb()` stands out as part of the same `sRGB` color
system that Sass already uses internally.

## Summary

> This section is non-normative.

This proposal defines a Sassified version of the `hwb()` color function
added to [CSS Color Level 4][color-4] – along with relevant inspection and
adjustment options. This function will only be available inside the `sass:color`
module to avoid conflicts with the CSS syntax, and will be converted to more
common color-name, hex, or `rgba()` syntax for output -- following the same
logic as our current color functions.

* New `color.hwb()` function describes colors in the sRGB colorspace using
  `$hue` (defined identically to the `hsl()` "hue" value), along with
  `$whiteness`, `$blackness`, and optional `$alpha` transparency.
* New `color.whiteness()` and `color.blackness()` functions return the respective
  values of `w` or `b` for a given color.
* Existing `color.adjust()`, `color.scale()`, and `color.change()` functions will
  accept additional `$whiteness` and `$blackness` parameters before the final
  `$alpha` parameter.

### Design Decisions

Both `rgb/a()` and `hsl/a()` are available in the global namespace because both
of these formats are part of a stable CSS spec, and we want to make any standard
CSS representation of a color parse as a Sass color. However, although `hwb()`
is defined in Color Level 4, it's not yet implemented by any browser. Sass
policy is to avoid supporting any new CSS syntax until it's shipped in a real
browser, so `hwb()` **will not** be available in the global namespace initially.
Instead, it will appear in the `sass:color` namespace which is guaranteed to be
forwards-compatible with future CSS changes.

Because the `color.hwb()` function isn't currently intended to directly
implement CSS's native `hwb()` function, it **will not** accept *special number
string* or *special variable string* values that can only be resolved in CSS.
However, for consistency with Sass's `rgb()` and `hsl()` functions it will
support both space-delimited and comma-delimited arguments.

### Future Designs

It's likely that as CSS Color Level 4 matures, `hwb()` will be stabilized and
supported in browsers in one form or another. At this point, Sass will likely
add support for a global `hwb()` function that's compatible with its CSS usage,
including supporting special number and variable strings. The details of this
are left to a future proposal.

## Procedures

### Scaling a Number

This algorithm takes a number `number`, a value `factor`, and a number `max`.
It's written "scale `<number>` by `<factor>` with a `max` of `<max>`". It
returns a number with a value between 0 and `max` and the same units as
`number`.

> Note: in practice, this is only ever called with `number <= max`.

* If `factor` isn't a number with unit `%` between `-100%` and `100%`
  (inclusive), throw an error.

* If `factor > 0%`, return `number + (max - number) * factor / 100%`.

* Otherwise, return `number + number * factor / 100%`.

## Functions

All new functions are part of the `sass:color` built-in module.

### `hwb()`

* ```
  hwb($hue, $whiteness, $blackness, $alpha: 1)
  ```

  * If any of `$hue`, `$whiteness`, `$blackness`, or `$alpha` aren't numbers,
    throw an error.

  * If `$hue` has any units other than `deg`, throw an error.

  * If either of `$whiteness` or `$blackness` don't have unit `%` or aren't
    between `0%` and `100%` (inclusive), throw an error.

  * Let `hue` be `$hue` without units.

  * Let `whiteness` be `$whiteness / 100%`.

  * Let `blackness` be `$blackness / 100%`.

  * If `whiteness + blackness > 1`:

    * Set `whiteness` to `whiteness / (whiteness + blackness)`.

    * Set `blackness` to `blackness / (whiteness + blackness)`.

  * Let `red`, `green`, and `blue` be the result of converting `hue`,
    `whiteness`, and `blackness` [to RGB][].

  * Set `red`, `green`, and `blue` to their existing values multiplied by 255
    and rounded to the nearest integers.

  * Let `alpha` be the result of [percent-converting][] `$alpha` with a `max` of 1.

  * Return a color with the given `red`, `green`, `blue`, and `alpha` channels.

  [percent-converting]: ../spec/built-in-modules/color.md#percent-converting-a-number
  

* ```
  hwb($channels)
  ```

  * If `$channels` is not an unbracketed space-separated list, throw an error.

  * If `$channels` does not includes exactly three elements, throw an error.

  * Let `hue` and `whiteness` be the first two elements of `$channels`

  * If the third element of `$channels` has preserved its status as
    two slash-separated numbers:

    * Let `blackness` be the number before the slash and `alpha` the number
      after the slash.

  * Otherwise:

    * Let `blackness` be the third element of `$channels`.

  * Call `hwb()` with `hue`, `whiteness`, `blackness`, and `alpha` (if it's
    defined) as arguments and return the result.

### `whiteness()`

```
whiteness($color)
```

* If `$color` is not a color, throw an error.

* Return a number with unit `%` between `0%` and `100%` (inclusive) such that:

  * `hwb(hue($color), whiteness($color), blackness($color))` returns a color with
    the same red, green, and blue channels as `$color`.

  * `whiteness($color) + blackness($color) <= 100%`.

  > The specific number returned here is left purposefully open-ended to allow
  > implementations to pursue different strategies for representing color
  > values. For example, one implementation may eagerly convert all colors to
  > RGB channels and convert back when `whiteness()` or `blackness()` is called,
  > where another may keep around their original HWB values and return those
  > as-is.

### `blackness()`

```
blackness($color)
```

* If `$color` is not a color, throw an error.

* Return a number with unit `%` between `0%` and `100%` (inclusive) such that:

  * `hwb(hue($color), whiteness($color), blackness($color))` returns a color with
    the same red, green, and blue channels as `$color`.

  * `whiteness($color) + blackness($color) <= 100%`.

  > The specific number returned here is left purposefully open-ended to allow
  > implementations to pursue different strategies for representing color
  > values. For example, one implementation may eagerly convert all colors to
  > RGB channels and convert back when `whiteness()` or `blackness()` is called,
  > where another may keep around their original HWB values and return those
  > as-is.

### `adjust()`

This proposal adds new `$whiteness` and `$blackness` parameters to the `adjust()`
function, and its global `adjust-color()` alias.

```
adjust($color,
  $red: null, $green: null, $blue: null,
  $hue: null, $saturation: null, $lightness: null,
  $whiteness: null, $blackness: null,
  $alpha: null)
```

This function's new definition is as follows:

* If `$color` isn't a color, throw an error.

* Let `alpha` be `$color`'s alpha channel.

* If `$alpha` isn't null:

  * If `$alpha` isn't a number between -1 and 1 (inclusive), throw an error.

  * Set `alpha` to `alpha + $alpha` clamped between 0 and 1.

* If `$hue` isn't a number or null, throw an error.

* If any of `$red`, `$green`, or `$blue` aren't null:

  * If any of `$hue`, `$saturation`, `$lightness`, `$whiteness`, or `$blackness`
    aren't null, throw an error.

  * If any of `$red`, `$green`, or `$blue` aren't either null or numbers between
    -255 and 255 (inclusive), throw an error.

  * Let `red`, `green`, and `blue` be `$color`'s red, green, and blue channels.

  * If `$red` isn't null, set `red` to `red + $red` clamped between 0 and 255.

  * If `$green` isn't null, set `green` to `green + $green` clamped between 0 and 255.

  * If `$blue` isn't null, set `blue` to `blue + $blue` clamped between 0 and 255.

  * Return a color with `red`, `green`, `blue`, and `alpha` as the red, green,
    blue, and alpha channels, respectively.

* Otherwise, if either `$saturation` or `$lightness` aren't null:

  * If either `$whiteness` or `$blackness` aren't null, throw an error.

  * If either `$saturation` or `$lightness` aren't either null or numbers
    between -100 and 100 (inclusive), throw an error.

  * Let `hue`, `saturation`, and `lightness` be the result of calling
    `hue($color)`, `saturation($color)`, and `lightness($color)` respectively.

  * If `$hue` isn't null, set `hue` to `hue + $hue`.

  * If `$saturation` isn't null, set `saturation` to `saturation + $saturation`
    clamped between 0 and 100.

  * If `$lightness` isn't null, set `lightness` to `lightness + $lightness`
    clamped between 0 and 100.

  * Return the result of calling [`hsl()`][] with `hue`, `saturation`,
    `lightness`, and `alpha`.

* Otherwise, if either `$hue`, `$whiteness`, or `$blackness` aren't null:

  * If either `$whiteness` or `$blackness` aren't either null or numbers with
    unit `%` between `-100%` and `100%` (inclusive), throw an error.

  * Let `hue`, `whiteness`, and `blackness` be the result of calling
    `hue($color)`, `whiteness($color)`, and `blackness($color)` respectively.

  * If `$hue` isn't null, set `hue` to `hue + $hue`.

  * If `$whiteness` isn't null, set `whiteness` to `whiteness + $whiteness`
    clamped between `0%` and `100%`.

  * If `$blackness` isn't null, set `blackness` to `blackness + $blackness`
    clamped between `0%` and `100%`.

  * Return the result of calling `hwb()` with `hue`, `whiteness`, `blackness`,
    and `alpha`.

* Otherwise, return a color with the same red, green, and blue channels as
  `$color` and `alpha` as its alpha channel.

[`hsl()`]: ../spec/functions.md#hsl-and-hsla

### `change()`

This proposal adds new `$whiteness` and `$blackness` parameters to the `change()`
function, and its global `change-color()` alias.

```
change($color,
  $red: null, $green: null, $blue: null,
  $hue: null, $saturation: null, $lightness: null,
  $whiteness: null, $blackness: null,
  $alpha: null)
```

This function's new definition is as follows:

* If `$color` isn't a color, throw an error.

* If `$alpha` isn't either null or a number between 0 and 1 (inclusive), throw
  an error.

* Let `alpha` be `$color`'s alpha channel if `$alpha` is null or `$alpha`
  without units otherwise.

* If `$hue` isn't a number or null, throw an error.

* If any of `$red`, `$green`, or `$blue` aren't null:

  * If any of `$hue`, `$saturation`, `$lightness`, `$whiteness`, or `$blackness`
    aren't null, throw an error.

  * If any of `$red`, `$green`, or `$blue` aren't either null or numbers
    between 0 and 255 (inclusive), throw an error.

  * Let `red` be `$color`'s red channel if `$red` is null or `$red` without
    units otherwise.

  * Let `green` be `$color`'s green channel if `$green` is null or `$green`
    without units otherwise.

  * Let `blue` be `$color`'s blue channel if `$blue` is null or `$blue` without
    units otherwise.

  * Return a color with `red`, `green`, `blue`, and `alpha` as the red, green,
    blue, and alpha channels, respectively.

* Otherwise, if either `$saturation` or `$lightness` aren't null:

  * If either `$whiteness` or `$blackness` aren't null, throw an error.

  * If either `$saturation` or `$lightness` aren't either null or numbers
    between 0 and 100 (inclusive), throw an error.

  * Let `hue` be the result of calling `hue($color)` if `$hue` is null, or
    `$hue` otherwise.

  * Let `saturation` be the result of calling `saturation($color)` if
    `$saturation` is null, or `$saturation` otherwise.

  * Let `lightness` be the result of calling `lightness($color)` if
    `$lightness` is null, or `$lightness` otherwise.

  * Return the result of calling [`hsl()`][] with `hue`, `saturation`,
    `lightness`, and `alpha`.

* Otherwise, if either `$hue`, `$whiteness`, or `$blackness` aren't null:

  * If either `$whiteness` or `$blackness` aren't either null or numbers with
    unit `%` between `0%` and `100%` (inclusive), throw an error.

  * Let `hue` be the result of calling `hue($color)` if `$hue` is null, or
    `$hue` otherwise.

  * Let `whiteness` be the result of calling `whiteness($color)` if `$whiteness`
    is null, or `$whiteness` otherwise.

  * Let `blackness` be the result of calling `blackness($color)` if `$blackness`
    is null, or `$blackness` otherwise.

  * Return the result of calling `hwb()` with `hue`, `whiteness`, `blackness`,
    and `alpha`.

* Otherwise, return a color with the same red, green, and blue channels as
  `$color` and `alpha` as its alpha channel.

### `scale()`

This proposal adds new `$whiteness` and `$blackness` parameters to the `scale()`
function, and its global `scale-color()` alias.

```
scale($color,
  $red: null, $green: null, $blue: null,
  $saturation: null, $lightness: null,
  $whiteness: null, $blackness: null,
  $alpha: null)
```

This function's new definition is as follows:

* If `$color` isn't a color, throw an error.

* Let `alpha` be `$color`'s alpha channel.

* If `$alpha` isn't null, set `alpha` to the result of [scaling][] `alpha` by
  `$alpha` with `max` 1.

  [scaling]: #scaling-a-number

* If any of `$red`, `$green`, or `$blue` aren't null:

  * If any of `$saturation`, `$lightness`, `$whiteness`, or `$blackness` aren't
    null, throw an error.

  * Let `red`, `green`, and `blue` be `$color`'s red, green, and blue channels.

  * If `$red` isn't null, set `red` to the result of [scaling][] `red` by `$red`
    with `max` 255.

  * If `$green` isn't null, set `green` to the result of [scaling][] `green` by
    `$green` with `max` 255.

  * If `$blue` isn't null, set `blue` to the result of [scaling][] `blue` by `$blue`
    with `max` 255.

  * Return a color with `red`, `green`, `blue`, and `alpha` as the red, green,
    blue, and alpha channels, respectively.

* Otherwise, if either `$saturation` or `$lightness` aren't null:

  * If either `$whiteness` or `$blackness` aren't null, throw an error.

  * Let `hue`, `saturation`, and `lightness` be the result of calling
    `hue($color)`, `saturation($color)`, and `lightness($color)` respectively.

  * If `$saturation` isn't null, set `saturation` to the result of [scaling][]
    `saturation` by `$saturation` with `max` `100%`.

  * If `$lightness` isn't null, set `lightness` to the result of [scaling][]
    `lightness` by `$lightness` with `max` `100%`.

  * Return the result of calling [`hsl()`][] with `hue`, `saturation`,
    `lightness`, and `alpha`.

* Otherwise, if either `$hue`, `$whiteness`, or `$blackness` aren't null:

  * Let `hue`, `whiteness`, and `blackness` be the result of calling
    `hue($color)`, `whiteness($color)`, and `blackness($color)` respectively.

  * If `$whiteness` isn't null, set `whiteness` to the result of [scaling][]
    `whiteness` by `$whiteness` with `max` `100%`.

  * If `$blackness` isn't null, set `blackness` to the result of [scaling][]
    `blackness` by `$blackness` with `max` `100%`.

  * Return the result of calling `hwb()` with `hue`, `whiteness`, `blackness`,
    and `alpha`.

* Otherwise, return a color with the same red, green, and blue channels as
  `$color` and `alpha` as its alpha channel.

## Draft 1.5

* Clarify that deprecated SassColor getters (e.g. `red`, `blue`, etc.) convert
  color to a legacy space before returning channel value.

## Draft 1.4

* In `change`, adjust algorithm for differentiating `hwb` from `hsl` when only
  `hue` and no `space` is specified.

* In `change` for legacy colors, emit a `color-4-api` warning if a non-alpha
  channel is explicitly null and no space is set.

* In procedure for Changing a Component Value, specify that `undefined` values
  should return the `initialValue`.

* `toSpace` uses `Converting a Color` algorithm instead of `color.to-space()` to
  avoid removing missing channels when converting to a legacy space.

* In `change` and constructors, throw an error for alpha and lightness values
  that are out of range.

## Draft 1.3

* Rename new Embedded Protocol message from `SassColor` to `Color`.

* Make `color2` a positional parameter of `interpolate`, not an option.

* Add `rec2020` color space.

## Draft 1.2

* Add "alpha" to all channel name types.

* Remove `isAlphaMissing` in favor of `isChannelMissing("alpha")`.

* Rename types using title-case for acronyms longer than two letters in
  camel-case identifiers (e.g. `ColorSpaceHsl` instead of `ColorSpaceHSL`).

* Remove generic `change` overload, and make `space` optional on others.

* Return `immutable` types for `channels` and `channelsOrNull`, and remove
  assumption of 3 channels.

## Draft 1.1

* Clarify values in `channels` and `channelsOrNull`.

* Throw an error if construction space can not be determined.

* Remove `alpha` from list of deprecated getters.

* Rename types: `ColorSpaceLAB` to `ColorSpaceLab`, `ChannelNameLAB` to
  `ChannelNameLab`.

* Use `Exclude<>` instead of `Omit<>` for union types.

* Make procedure for determining space backwards compatible when using `change`
  for legacy colors.

* Fix channel names for `change` with `oklch` and `lch`.

## Draft 1

* Initial draft

# CSS Color Level 4, New Color Spaces JavaScript API: Draft 1.5
#### `toSpace`

* If `this.space` is equal to `space`, return `this`.

* Otherwise, return the result of [Converting a Color] with `this` as
  `origin-color` and `space` as `target-space`.

[Converting a Color]: ./color-4-new-spaces.md#converting-a-color

#### `isLegacy`

Returns whether [`internal`] is in a [legacy color space] (`rgb`, `hsl`, or
`hwb`).

[legacy color space]: ./color-4-new-spaces.md#legacy-color

#### `isInGamut`

Returns the result of [`color.is-in-gamut(internal, space)`] as a JavaScript
boolean.

[`color.is-in-gamut(internal, space)`]: ./color-4-new-spaces.md#coloris-in-gamut

#### `toGamut`

Returns the result of [`color.to-gamut(internal, space)`].

[`color.to-gamut(internal, space)`]: ./color-4-new-spaces.md#colorto-gamut-1

#### `channelsOrNull`

Returns a list of channel values (excluding alpha) for [`internal`], with
[missing channels][missing components] converted to `null`.

* Let `space` be the value of [`this.space`].

* Let `components` be the list of channels in `space`.

* Let `channels` be an empty list.

* For each `component` in `components`:

  * Let `value` be the channel value in [`internal`] with name of `component`.

  * If `value` is `none`, let `value` be `null`.

  * Append `value` to `channels`.

* Return `channels`.

[missing components]: ./color-4-new-spaces.md#missing-components
[`this.space`]: #space

#### `channels`

This algorithm returns a list of channel values (excluding alpha) for
[`internal`], with [missing channels][missing components] converted to `0`.

* Let `channelsOrNull` be the value of [`this.channelsOrNull`].

* Let `channels` be an empty list.

* For each `channel` in `channelsOrNull`:

  * If `channel` equals `null`, let `value` be 0.

  * Append `value` to `channels`.

* Return `channels`.

[`this.channelsOrNull`]: #channelsornull

#### `channel`

* Let `initialSpace` be the value of [`this.space`].

* Let `space` be `options.space` if it is defined, and the value of
  `initialSpace` otherwise.

* If `channel` is not "alpha" or a channel in `space`, throw an error.

* Let `color` be the result of [`this.toSpace(space)`].

* Let `value` be the channel value in `color` with name of `component`.

* If `value` is `null`, return 0.

* Otherwise, return `value`.

#### `alpha`

Returns the result of calling [`this.channel('alpha')`].

[`this.channel('alpha')`]: #channel

#### `isChannelMissing`

Returns the result of [`color.is-missing(internal,
channel)`][color.is-missing()] as a JavaScript boolean.

[color.is-missing()]: ./color-4-new-spaces.md#coloris-missing-1

#### `isChannelPowerless`

Returns the result of [`color.is-powerless(internal, channel, space)`] as a
JavaScript boolean.

[`color.is-powerless(internal, channel, space)`]: ./color-4-new-spaces.md#coloris-powerless-1


#### `interpolate`

* Let `space` be the value of [`this.space`].

* If `options.method` is set, let `interpolationMethod` be a space separated
  list containing the value of `space`, a space, and the value of
  `options.method`.

* Otherwise, if `space` is a rectangular color space, let `interpolationMethod`
  be `space`.

* Otherwise, let `interpolationMethod` be a space separated list containing the
  value of `space`, a space, and the string "shorter".

* Return the result of [`color.mix(internal, color2, options.weight, interpolationMethod)`][`color.mix()`].

[`color.mix()`]: ./color-4-new-spaces.md#colormix-1

### Updated Color Functions

#### `change`

Replace the definition of [color.change] with the following:

[color.change]: ../spec/js-api/value/color.d.ts.md#change

This algorithm takes a JavaScript object `options` and returns a new SassColor
as the result of changing some of [`internal`]'s components.

> The `space` value defaults to the `space` of [`internal`], and the caller may
> specify any combination of channels and alpha in that space to be changed.
>
> If `space` is not a [legacy color space], a channel value of `null` will
> result in a [missing component][missing components] value for that channel.

* Let `initialSpace` be the value of [`this.space`].

* Let `spaceSetExplicitly` be `true` if `options.space` is defined, and `false`
  otherwise.

* Let `space` be `options.space` if `spaceSetExplicitly` is true, and the value
  of `initialSpace` otherwise.

* If `initialSpace` is a [legacy color space] and `spaceSetExplicitly` is false:

  * If `options.whiteness` or `options.blackness` is set, let `space` be `hwb`.

  * Otherwise, if `options.hue` is set and `initialSpace` is `hwb`, let space be
    `hwb`.

  * Otherwise, if `options.hue`, `options.saturation`, or `options.lightness` is
    set, let `space` be `hsl`.

  * Otherwise, if `options.red`, `options.green`, or `options.blue` is set, let
    `space` be `rgb`.

  * If `initialSpace` is not equal to `space`, emit a deprecation warning named
    `color-4-api`.

* Let `changes` be the object `options` without `space` and its value.

* Let `keys` be a list of the keys in `changes`.

* Let `components` be `"alpha"` and the names of the channels in `space`.

* If any key in `keys` is not the name of a channel in `components`, throw an
  error.

* If `options.alpha` is set, and isn't either null or a number between 0 and 1
  (inclusive and fuzzy), throw an error.

* If `options.lightness` is set, and isn't either null or a number between 0 and
  the maximum channel value for the space (inclusive and fuzzy), throw an error.

* Let `color` be the result of [`this.toSpace(space)`].

* Let `changedValue` be a function that takes a string argument for `channel`
  and calls the procedure [`Changing a Component Value`] with `changes` and
  `this` as `initial`.

* If `space` equals `hsl` and `spaceSetExplicitly` is `false`:

  * If any of `options.hue`, `options.saturation` or `options.lightness` equals
    `null`, emit a deprecation warning named `color-4-api`.

  * If `options.alpha` equals `null`, emit a deprecation warning named
    `null-alpha`.

* If `space` equals `hwb` and `spaceSetExplicitly` is `false`:

  * If any of `options.hue`, `options.whiteness` or `options.blackness` equals
    `null`, emit a deprecation warning named `color-4-api`.

  * If `options.alpha` equals `null`, emit a deprecation warning named
    `null-alpha`.

  * Let `changedColor` be the result of:

* If `space` equals `hwb` and `spaceSetExplicitly` is `true`, let `changedColor`
  be the result of:

* If `space` equals `rgb` and `spaceSetExplicitly` is `false`:

  * If any of `options.red`, `options.green` or `options.blue` equals
    `null`, emit a deprecation warning named `color-4-api`.

  * If `options.alpha` equals `null`, emit a deprecation warning named
    `null-alpha`.

  * Let `changedColor` be the result of:

* If `space` equals `rgb` and `spaceSetExplicitly` is `true`, let `changedColor`
  be the result of:

### New Constructors

* Let `constructionSpace` be the result of [Determining Construction Space] with
  the `options` object passed to the constructor.

* Use the constructor that matches `constructionSpace`.

[Determining Construction Space]: #determining-construction-space

#### Lab Channel Constructor

Create a new SassColor in a color space with Lab channels—`lab` and `oklab`.

* If `options.space` equals `lab`, let `maximum` be `100`. Otherwise, let
  `maximum` be `1`.

* Let `lightness` be the result of [parsing a clamped channel value] with
  `value` of `options.lightness`, `minimum` of `0`, and `maximum` of `maximum`.

* Let `a` be the result of [parsing a channel value] with value `options.a`.

* Let `b` be the result of [parsing a channel value] with value `options.b`.

* If `options.alpha` is not set, let `alpha` be `1`. Otherwise, let `alpha` be
  the result of [parsing a clamped channel value] with value `options.alpha`,
  `minimum` of 0, and `maximum` of 1.

* If `options.space` equals `lab`, set [`internal`] to the result of
  [`lab(lightness a b / alpha)`].

* Otherwise, if `options.space` equals `oklab`, set [`internal`] to the result
  of [`oklab(lightness a b / alpha)`].

[`lab(lightness a b / alpha)`]: ./color-4-new-spaces.md#lab
[`oklab(lightness a b / alpha)`]: ./color-4-new-spaces.md#oklab
[parsing a channel value]: #parsing-a-channel-value
[parsing a clamped channel value]: #parsing-a-clamped-channel-value

#### LCH Channel Constructor

Create a new SassColor in a color space with LCH channels—`lch` and `oklch`.

* If `options.space` equals `lch`, let `maximum` be `100`. Otherwise, let
  `maximum` be `1`.

* Let `lightness` be the result of [parsing a clamped channel value] with
  `value` of `options.lightness`, `minimum` of `0`, and `maximum` of `maximum`.

* Let `c` be the result of [parsing a channel value] with value `options.c`.

* Let `h` be the result of [parsing a channel value] with value `options.h`.

* If `options.alpha` is not set, let `alpha` be `1`. Otherwise, let `alpha` be
  the result of [parsing a clamped channel value] with value `options.alpha`,
  `minimum` of 0, and `maximum` of 1.

* If `options.space` equals `lch`, set [`internal`] to the result of
  [`lch(lightness a b / alpha)`].

* Otherwise, if `options.space` equals `oklch`, set [`internal`] to the result
  of [`oklch(lightness a b / alpha)`].

[`lch(lightness a b / alpha)`]: ./color-4-new-spaces.md#lch
[`oklch(lightness a b / alpha)`]: ./color-4-new-spaces.md#oklch

#### Predefined RGB Channel Constructor

Create a new SassColor in a color space with RGB channels—`srgb`, `srgb-linear`,
`display-p3`, `a98-rgb`, `prophoto-rgb`, and `rec2020`. `rgb` is supported
through the modified [RGB Constructor].

* Let `red` be the result of [parsing a channel value] with value `options.red`.

* Let `green` be the result of [parsing a channel value] with value
  `options.green`.

* Let `blue` be the result of [parsing a channel value] with value
  `options.blue`.

* If `options.alpha` is not set, let `alpha` be `1`. Otherwise, let `alpha` be
  the result of [parsing a clamped channel value] with value `options.alpha`,
  `minimum` of 0, and `maximum` of 1.

* Let `space` be the unquoted string value of `options.space`.

* Set [`internal`] to the result of [`color(space red green blue / alpha)`].

[`color(space red green blue / alpha)`]: ./color-4-new-spaces.md#color-1
[RGB Constructor]: #rgb-constructor

#### XYZ Channel Constructor

Create a new SassColor in a color space with XYZ channels—`xyz`, `xyz-d50`, and
`xyz-d65`.

* Let `x` be the result of [parsing a channel value] with value `options.x`.

* Let `y` be the result of [parsing a channel value] with value `options.y`.

* Let `z` be the result of [parsing a channel value] with value `options.z`.

* If `options.alpha` is not set, let `alpha` be `1`. Otherwise, let `alpha` be
  the result of [parsing a clamped channel value] with value `options.alpha`,
  `minimum` of 0, and `maximum` of 1.

* Let `space` be the unquoted string value of `options.space`.

* Set [`internal`] to the result of [`color(space x y z / alpha)`].

[`color(space x y z / alpha)`]: ./color-4-new-spaces.md#color-1

### Modified Legacy Color Constructors

These will replace the [existing constructors] for legacy colors.

[existing constructors]: ../spec/js-api/value/color.d.ts.md#constructor

#### HSL Constructor

Create a new SassColor in the `hsl` color space.

* If `options.alpha` is `null` and `options.space` is not set, emit a
  deprecation warning named `null-alpha`.

* Let `hue` be the result of [parsing a channel value] with value `options.hue`.

* Let `saturation` be the result of [parsing a channel value] with value
  `options.saturation`.

* Let `lightness` be the result of [parsing a clamped channel value] with
  `value` of `options.lightness`, `minimum` of `0`, and `maximum` of `100`.

* If `options.alpha` is not set, let `alpha` be `1`. Otherwise, let `alpha` be
  the result of [parsing a clamped channel value] with `value` of
  `options.alpha`, `minimum` of `0`, and `maximum` of `1`.

* Set [`internal`] to the result of [`hsl(hue saturation lightness / alpha)`].

[`hsl(hue saturation lightness / alpha)`]: ../spec/functions.md#hsl-and-hsla

#### HWB Constructor

Create a new SassColor in the `hwb` color space.

* If `options.alpha` is `null` and `options.space` is not set, emit a
  deprecation warning named `null-alpha`.

* Let `hue` be the result of [parsing a channel value] with value `options.hue`.

* Let `whiteness` be the result of [parsing a channel value] with value
  `options.whiteness`.

* Let `blackness` be the result of [parsing a channel value] with value
  `options.blackness`.

* If `options.alpha` is not set, let `alpha` be `1`. Otherwise, let `alpha` be
  the result of [parsing a clamped channel value] with `value` of
  `options.alpha`, `minimum` of `0`, and `maximum` of `1`.

* Set [`internal`] to the result of [`hwb(hue whiteness blackness / alpha)`].

[`hwb(hue whiteness blackness / alpha)`]: ./color-4-new-spaces.md#hwb-1

#### RGB Constructor

Create a new SassColor in the `rgb` color space.

* If `options.alpha` is `null` and `options.space` is not set, emit a
  deprecation warning named `null-alpha`.

* Let `red` be the result of [parsing a channel value] with value `options.red`.

* Let `green` be the result of [parsing a channel value] with value
  `options.green`.

* Let `blue` be the result of [parsing a channel value] with value
  `options.blue`.

* If `options.alpha` is not set, let `alpha` be `1`. Otherwise, let `alpha` be
  the result of [parsing a clamped channel value] with `value` of
  `options.alpha`, `minimum` of `0`, and `maximum` of `1`.

* Set [`internal`] to the result of [`rgb(red green blue / alpha)`].

[`rgb(red green blue / alpha)`]: ./color-4-new-spaces.md#rgb-and-rgba

## Procedures

### Parsing a Channel Value

This procedure takes a channel value `value`, and returns the special value
`none` if the value is `null`.

* If `value` is a number, return a Sass number with a value of `value`.

* If `value` is the Javascript value `null`, return the unquoted Sass string
  `none`.

### Parsing a Clamped Channel Value

This procedure takes a channel value `value` and an inclusive range of `minimum`
and `maximum`. It asserts the value is in the range, and returns the special
value `none` if the value is `null`.

* If `value` is fuzzy less-than `minimum`, throw an error.

* If `value` is fuzzy greater-than `maximum`, throw an error.

* Otherwise, return the result of [Parsing a Channel Value].

### Changing a Component Value

This procedure takes a `channel` name, an object `changes` and a SassColor
`initial` and returns the result of applying the change for `channel` to
`initial`.

* Let `initialValue` be the channel value in `initial` with name of `channel`.

* If `channel` is not a key in `changes`, return `initialValue`.

* Let `changedValue` be the value for `channel` in `changes`.

* If `changedValue` is `undefined` and not `null`, return `initialValue`.

* Otherwise, return `changedValue`.

### Determining Construction Space

This procedure takes an object `options` with unknown keys and returns a color
space for construction.

* If `options.space` is set, return `options.space`.

* If `options.red` is set, return "rgb".

* If `options.saturation` is set, return "hsl".

* If `options.whiteness` is set, return "hwb".

* Otherwise, throw an error.

## Embedded Protocol

This introduces a breaking change in the Embedded Protocol, as it removes the
legacy SassScript values.

### Color

### Removed SassScript values

The `RgbColor`, `HslColor` and `HwbColor` SassScript values will be removed from
the Embedded Protocol.

## Draft 1.11

* Add support for the relative color syntax in the algorithm parsing color
  arguments, for CSS compatibility.

## Draft 1.10

* Properly scale `%` return values for `color.channel()`.

* Clean up some language related to percent-conversion.

## Draft 1.9

* Explicitly define associated units for color space channels.

## Draft 1.8

* Require a quoted string for `color.is-missing()` for consistency with other
  color functions and ease of use with channels whose names overlap with colors.

## Draft 1.7

* Resolve missing `alpha` channels *after* premultiplying colors.

## Draft 1.6

* Clarify in the known color space definitions that lightness channels are
  clamped.

## Draft 1.5

* Remove clamping and scaling of `hsl` and `hwb` color channels.

* Document `color.to-gamut()` in summary and design decisions.

## Draft 1.4

* All `lightness` channels are now clamped in the `[0,100]` range.

* Missing channels are not allowed in legacy comma-separated `rgb`/`rgba` or
  `hsl`/`hsla` syntaxes.

* Colors conversion is only performed when necessary. Previously, colors could
  be converted into their current space.

* Color conversion procedure explicitly handles 'carrying forward' missing
  channels when converting to a space with an analogous component. This was
  previously only applied to interpolation.

* Allow all color spaces to be used for hue interpolation.

* Remove `specified` hue interpolation method, and normalize hues to be in the
  `[0,360]` range.

## Draft 1.3

* Deprecate the `color.alpha()` function along with the other legacy channel
  access functions.

* Require quoted strings for channel names in `color.is-powerless()` and
  `color.channel()`, to avoid syntax conflicts between `rgb` channel names and
  their respective named colors (e.g. `'red'` the channel vs `red` the color).

* Define how deprecated functions behave as alias functions during the
  deprecation process.

## Draft 1.2

* Clamp `hsl` saturation & lightness when generating `hsl` colors, and gamut-map
  when converting colors into either `hsl` or `hwb`, since those spaces cannot
  properly maintain out-of-gamut color values.

* Ensure that color space names are unquoted strings, and compared insensitive
  to case.

* Remove support for custom or unknown color spaces. There are too many open
  questions in the CSS spec, as browsers have not started to implement this
  feature yet.

* Remove channel indexing, and syntax to access channels by index, since all
  known color channels have names.

* Allow channel adjustment values to be out-of-gamut, and then normalize the
  resulting channel values. This allows more flexibility, while ensuring that
  `hsl` or `hwb` clamp out-of-gamut results.

* Channel clamping and scaling for `hsl` and `hwb` colors is handled in the
  normalization process, rather than the individual functions. This also allows
  it to happen when normalizing the results of color manipulation.

* Throw an error in the color component parsing procedure if a known color space
  is one of the components, and has a function of it's own (e.g. `rgb` or
  `oklch`). Only custom color spaces and predefined spaces can be defined using
  the `color(<space> <channels>)` syntax.

* Add missing `$weight` to the `color.invert()` signature, and return early
  when the specified weight is `0%` or `100%`.

* Update the color interpolation procedure handling of `weight` values to error
  when `weight` is outside the `[0,1]` range, and return early when `weight` is
  equal to 0 or 1.

* For backwards compatibility, the `color.change()`, `color.scale()`, and
  `color.adjust()` functions allow manipulating legacy colors in any legacy
  space, if the `$space` argument is not explicitly set.

* Remove `in` prefix from the color interpolation method syntax, since the Sass
  function syntax is already explicit about which parameter is where.

* `color.invert()` throws an error when `$weight` would require mixing in an
  invalid `color.mix()` *interpolation color space*.

* Allow scaling channels with a non-0 minimum value, such as the `a` and `b`
  channels in `lab()`/`oklab()`.

* Ensure that percentage and percentage-mapped number values are normalized
  before they are added together in `color.adjust()`.

* Clarify that channel values are stored as raw doubles, and add/remove units
  as necessary for normalization/serialization.

* Legacy colors with missing channels are serialized using the non-legacy
  serialization logic. When converting colors into legacy spaces with
  `color.to-space()`, all missing components are replaced with `0` for better
  legacy output.

* `color.channel()` returns `0` when the channel value is missing, rather than
  throwing an error.

* Added `color.is-missing($color, $channel)` to inspect if a channel is set to
  'none' (e.g. missing).

* Legacy colors using a space-separated syntax with special number values that
  are not adjacent to a `/` symbol are emitted using the legacy
  (comma-separated) CSS syntax. For example:

  * `hsl(20deg 5% var(--foo))` emits `hsl(20deg, 5%, var(--foo))`.

  * `hsl(20deg var(--foo) 5% / 0.5)` emits `hsl(20deg, var(--foo), 5%, 0.5)`.

  * `hsl(20deg 5% var(--foo) / 0.5)` emits `hsl(20deg 5% var(--foo)/0.5)`
    since the special value is adjacent to the slash.

## Draft 1.1

* Expand the summary section to describe more of the proposal.

## Draft 1

* Initial draft

# CSS Color Level 4, New Color Spaces: Draft 1.11

This proposal adds Sass support for several new CSS color spaces defined in
[CSS Color Level 4][color-4], including access to non-RGB color models and
colors outside the sRGB gamut.

## Background

> This section is non-normative.

Historically, CSS has only provided authors with color formats using the RGB
model, limited to the sRGB gamut. As CSS is used for more applications (such as
print) and displays continue to improve, those limitations become more clear.
The [CSS Color Level 4][color-4] specification defines a number of new color
spaces, each with its own syntax, representing both new color models and
wider RGB gamuts.

* A *color model* is a mathematical approach to representing colors and their
  relationships. Historically, RGB has been the dominant color model for both
  computer monitors and web browsers. Lately, CIELab and Oklab models have
  shown significant benefits by providing a more *perceptually uniform*
  distribution of colors, so that similar mathematical adjustments achieve
  visually similar results.

* A *color space* is the result of projecting a color model into a coordinate
  system. In CSS, each color syntax describes a specific (and often unique)
  color space. For example, `rgb()`, `color(srgb)`, and `color(display-p3)` all
  project the RGB color model into cubic coordinate systems, while `hsl()`
  projects the same color model into a cylindrical (polar-angle) space.
  Similarly, `oklab()` and `oklch()` provide different coordinate projections
  of the Oklab model.

* A *color gamut* is the full range of colors that can be described in a color
  space. Historically, all CSS syntaxes have been limited to the sRGB gamut.
  However, modern computer monitors often support wider gamuts. Color spaces
  like `srgb` and `display-p3` describe different gamuts of color, using the
  same underlying RGB color model, and differently-mapped cubic coordinates.

These terms can get a bit confusing, since there is so much overlap. The term
'RGB' can refer to a color model, a color space, a coordinate system, and also
a color function. The 'RGB' color space is identical to the 'sRGB' space, and
both describe the 'sRGB' gamut. But we have both `rgb()` and `color(srgb)`
syntax, in order to distinguish legacy from non-legacy variations. They also
have different coordinate systems, `rgb()` accepts a range from 0-255, while
`color(srgb)` accept values from 0-1.

The result is that authors can generally think of each color syntax as a unique
space, and each space implies an associated gamut and coordinate system. Color
spaces become a simple way to refer to all parts combined. We've used that same
approach in Sass, such that the name of a color space can be used to reference
the associated gamut. For example, `color.to-gamut($color, hsl)` and
`color.to-gamut($color, srgb)` have the same meaning, both mapping a color into
the sRGB gamut.

Since all CSS colors up until this point have been restricted to RGB math in
the sRGB gamut, Sass has historically treated all color formats and spaces as
interchangeable. That has allowed authors to inspect and manipulate colors in
any space, without careful management or gamut mapping. It has also allowed
Sass to output the most browser-compatible CSS format for any given color.

In order to support the color spaces in CSS, Sass will need to start tracking
the space/gamut associated with any given color, and provide author tools for
managing those color spaces/gamuts. In addition to supporting the new color
space functions, we plan to update all functions in the color module, and
provide some additional space and gamut management and inspection functions.

## Summary

> This section is non-normative.

This proposal defines a Sass representation of colors with color spaces,
Sassified versions of all the color functions in [CSS Color Level 4][color-4],
updated definitions of existing Sass functions to accommodate color spaces, and
several new Sass-specific color functions as well.

### Rules of Thumb

There are several rules of thumb for working with color spaces in Sass:

* The `rgb`, `hsl`, and `hwb` spaces are considered "legacy spaces", and will
  often get special handling for the sake of backwards compatibility. Colors
  defined using hex notation or CSS color names are considered part of the `rgb`
  color space. Legacy colors are emitted in the most compatible format. This
  matches CSS's own backwards-compatibility behavior.

* Otherwise, any color defined in a given space will remain in that space, and
  be emitted in that space.

* Authors can explicitly convert a color's space by using `color.to-space()`.
  This can be useful to enforce non-legacy behavior, by converting into a
  non-legacy space, or to ensure the color output is compatible with older
  browsers by converting colors into a legacy space before emitting.

* The `srgb` color space is equivalent to `rgb`, except that one is a legacy
  space, and the other is not. They also use different coordinate systems, with
  `rgb()` accepting a range from 0-255, and `srgb` using a range of 0-1.

* Color functions that allow specifying a color space for manipulation will
  always use the source color space by default. When an explicit space is
  provided for manipulation, the resulting color will still be returned in the
  same space as the origin color. For `color.mix()`, the first color parameter
  is considered the origin color.

* All legacy and RGB-style spaces represent bounded gamuts of color. Since
  mapping colors into gamut is a lossy process, it should generally be left to
  browsers, which can map colors as-needed, based on the capabilities of a
  display. For that reason, out-of-gamut channel values are maintained by Sass
  whenever possible, even when converting into gamut-bounded color spaces. The
  only exception is that `hsl` and `hwb` color spaces are not able to express
  out-of-gamut color, so converting colors into those spaces will gamut-map the
  colors as well. Authors can also perform explicit gamut mapping with the
  `color.to-gamut()` function.

* Legacy browsers require colors in the `srgb` gamut. However, most modern
  displays support the wider `display-p3` gamut.

### Standard CSS Color Functions

#### `oklab()` and `oklch()`

The `oklab()` (cubic) and `oklch()` (cylindrical) functions provide access to an
unbounded gamut of colors in a perceptually uniform space. Authors can use these
functions to define reliably uniform colors. For example, the following colors
are perceptually similar in lightness and saturation:

```scss
$pink: oklch(64% 0.196 353); // hsl(329.8 70.29% 58.75%)
$blue: oklch(64% 0.196 253); // hsl(207.4 99.22% 50.69%)
```

The `oklch()` format uses consistent "lightness" and "chroma" values, while the
`hsl()` format shows dramatic changes in both "lightness" and "saturation". As
such, `oklch` is often the best space for consistent transforms.

#### `lab()` and `lch()`

The `lab()` and `lch()` functions provide access to an unbounded gamut of colors
in a space that's less perpetually-uniform but more widely-adopted than Oklab
and Oklch.

#### `hwb()`

Sass now supports a top-level `hwb()` function that uses the same syntax as
CSS's built-in `hwb()` syntax.

#### `color()`

The new `color()` function provides access to a number of specialty spaces. Most
notably, `display-p3` is a common space for wide-gamut monitors, making it
likely one of the more popular options for authors who simply want access to a
wider range of colors. For example, P3 greens are significantly 'brighter' and
more saturated than the greens available in sRGB:

```scss
$fallback-green: rgb(0% 100% 0%);
$brighter-green: color(display-p3 0 1 0);
```

Sass will natively support all predefined color spaces declared in the Colors
Level 4 specification.

### New Sass Color Functions

#### `color.channel()`

This function returns the value of a single channel in a color. By default, it
only supports channels that are available in the color's own space, but you can
pass the `$space` parameter to return the value of the channel after converting
to the given space.

```scss
$brand: hsl(0 100% 25.1%);

// result: 25.1%
$hsl-lightness: color.channel($brand, "lightness");

// result: 37.67%
$oklch-lightness: color.channel($brand, "lightness", $space: oklch);
```

#### `color.is-missing()`

This function returns if a given channel value is 'missing' (set to `none`).
This is necessary, since `color.channel` returns `0` for missing channels.
Since color-space conversion can change what channels are missing, this
function only supports inspecting channels that are part of the color's own
space.

```scss
$brand: hsl(none 100% 25.1%);

// result: false
$missing-lightness: color.is-missing($brand, "lightness");

// result: true
$missing-hue: color.is-missing($brand, "hue");
```

#### `color.space()`

This function returns the name of the color's space.

```scss
// result: hsl
$hsl-space: color.space(hsl(0 100% 25.1%));

// result: oklch
$oklch-space: color.space(oklch(37.7% 38.75% 29.23deg));
```

#### `color.is-in-gamut()`, `color.is-legacy()`

These functions return various facts about the color. `color.is-in-gamut()`
returns whether the color is in-gamut for its color space (as opposed to having
one or more of its channels out of bounds, like `rgb(300 0 0)`).
`color.is-legacy()` returns whether the color is a legacy color in the `rgb`,
`hsl`, or `hwb` color space.

#### `color.to-gamut()`

This function returns a color that is in the given gamut, using the recommended
[CSS Gamut Mapping Algorithm][css-mapping] to 'map' out-of-gamut colors into
the desired gamut with as little perceptual change as possible. In many cases
this can be more reliable for generating fallback values, rather than the
'channel clipping' approach used by current browsers.

```scss
$green: oklch(0.8 2 150);

// oklch(0.91 0.14 164)
$rgb: color.to-gamut($green, "srgb");

// oklch(0.91 0.16 163)
$p3: color.to-gamut($green, "display-p3");
```

#### `color.is-powerless()`

This function returns whether a given channel is "powerless" in the given color.
This is a special state that's defined for individual color spaces, which
indicates that a channel's value won't affect how a color is displayed.

```scss
$grey: hsl(0 0% 60%);

// result: true, because saturation is 0
$hue-powerless: color.is-powerless($grey, "hue");

// result: false
$hue-powerless: color.is-powerless($grey, "lightness");
```

#### `color.same()`

This function returns whether two colors will be displayed the same way, even if
this requires converting between spaces. This is unlike the `==` operator, which
always considers colors in different non-legacy spaces to be inequal.

```scss
$orange-rgb: #ff5f00;
$orange-oklch: oklch(68.72% 20.966858279% 41.4189852913deg);

// result: false
$equal: $orange-rgb == $orange-oklch;

// result: true
$same: color.same($orange-rgb, $orange-oklch);
```

### Existing Sass Color Functions

#### `color.scale()`, `color.adjust()`, and `color.change()`

By default, all Sass color transformations are handled and returned in the color
space of the original color parameter. However, all relevant functions now allow
specifying an explicit color space for transformations. For example, lightness &
darkness adjustments are most reliable in `oklch`:

```scss
$brand: hsl(0 100% 25.1%);

// result: hsl(0 100% 43.8%)
$hsl-lightness: color.scale($brand, $lightness: 25%);

// result: hsl(5.76 56% 45.4%)
$oklch-lightness: color.scale($brand, $lightness: 25%, $space: oklch);
```

Note that the returned color is still emitted in the original color space, even
when the adjustment is performed in a different space.

#### `color.mix()`

The `color.mix()` function will retain its existing behavior for legacy color
spaces, but for new color spaces it will match CSS's "color interpolation"
specification. This is how CSS computes which color to use in between two colors
in a gradient or an animation.

#### Deprecations

A number of existing functions only make sense for legacy colors, and so are
being deprecated in favor of color-space-friendly functions like
`color.channel()` and `color.adjust()`:

* `color.red()`
* `color.green()`
* `color.blue()`
* `color.hue()`
* `color.saturation()`
* `color.lightness()`
* `color.whiteness()`
* `color.blackness()`
* `color.alpha()`
* `adjust-hue()`
* `saturate()`
* `desaturate()`
* `transparentize()`/`fade-out()`
* `opacify()`/`fade-in()`
* `lighten()`/`darken()`

### Design Decisions

Most of the design decisions involved in the proposal are based on the
[CSS Color Level 4][color-4] specification, which we have tried to emulate as
closely as possible, while maintaining support for legacy projects. In some
cases, that required major changes to the way Sass handles colors:

1. RGB-style channel values are no longer clamped to the gamut of a color space,
   except for the `hsl` and `hwb` spaces, which are unable to represent
   out-of-gamut colors. By default Sass will output CSS with out-of-gamut
   colors, because browsers can provide better gamut mapping based on the user
   device capabilities. However, authors can use the provided `color.to-gamut()`
   function to enforce mapping a color into a specific gamut.
2. RGB-style channel values are no longer rounded to the nearest integer, since
   the spec now requires maintaining precision wherever possible. This is
   especially important in RGB spaces, where color distribution is inconsistent.

Different color spaces often represent different color-gamuts, which can present
a new set of problems for authors. Some color manipulations are best handled
in a wide-gamut space like `oklch`, but (for now) authors will likely prefer
emitting legacy colors that work in existing and legacy browsers. While that
is likely to change in the long term, we think it's a worthwhile tradeoff to
prioritize author control and legacy color use-cases. Authors who do choose to
emit non-legacy colors are less likely to be working in legacy color spaces to
begin with. So we've established the following guidelines for color conversion
and mapping in Sass color functions:

* Every color function returns a color in the same space as the original color,
  no matter what space was used for transformations. The only exception is
  `color.to-space()`, which can be used for manual space conversion. Functions
  that accept two colors (e.g. `color.mix()`) return a color in the same space
  as the first color argument.

* No color function performs gamut-mapping on out-of-gamut channels, except
  `color.to-gamut()`, which can be used for manual gamut-mapping.

Browsers currently use channel-clipping rather than the proposed
[css gamut mapping algorithm][css-mapping] to handle colors that cannot be
shown correctly on a given display. We've decided to provide `color.to-gamut()`
as a way for authors to opt-into the proposed behavior, aware that browsers
may eventually choose to provide a different algorithm. If that happens, we
will consider adding an additional algorithm-selection argument. However, the
primary goal of this function is not to match CSS behavior, but to provide a
better mapping than the default channel-clipping.

We are not attempting to support all of [CSS Color Level 5][color-5] at this
point, since it is not yet implemented in browsers. However, we have used it as
a reference while updating color manipulation functions such as `color.mix()`.

There is also an [open issue in CSS] to determine how the [relative color syntax]
from Level 5 should handle [missing] color components. Since the relative color
syntax provides similar functionality to the Sass `color.adjust()` and
`color.scale()` functions, we have decided to wait and match the CSS behavior
once it is specified. In the meantime, Sass will throw errors when trying to
adjust or scale a missing component. This is not the ideal behavior, but it
provides us with the most flexibility to change our behavior in the future.

Thanks to the editors of the CSS Color Level 4 specification (Tab Atkins Jr.,
Chris Lilley, and Lea Verou) for answering our many questions along the way. We
also used Chris and Lea's library as a
reference as we developed this proposal.

## Definitions

### Color

> Note that channel values are stored as specified, maintaining precision where
> possible, even when the values are out-of-gamut for the [known color space].

A *color* is an object with several parts:

* A *color space* that is either a [known color space] or an unquoted string.

* An ordered list of *channel*s, each one containing a [double] or the special
  value `none`.

* An *alpha* that is either the special value `none` or a [double] between
  `0-1` (inclusive).

  > While it's valid to specify numbers outside this range, they are
  > meaningless, and can be clamped by input functions when generating a color.

[known color space]: #known-color-space
[double]: ../spec/types/number.md#double

### Legacy Color

[legacy color]: #legacy-color

> Both Sass and CSS have similar legacy behavior that relies on all colors
> being interchangeable as part of a shared `srgb` color space. While the new
> color spaces will opt users into new default behavior, some legacy color
> spaces behave differently for the sake of backwards-compatibility.

Colors in the `rgb`, `hsl`, or `hwb` [color spaces](#known-color-space) are
considered *legacy colors*. The output of a legacy color is not required to
match the input color space, and several color functions maintain legacy
behavior when manipulating legacy colors.

Legacy colors that have [missing] components are
[serialized as non-legacy colors](#serialization-of-non-legacy-colors).

> This includes colors defined using the CSS color names, hex syntax, `rgb()`,
> `rgba()`, `hsl()`, `hsla()`, or `hwb()` -- along with colors that are
> manually converted into legacy color spaces.

### Color Equality

For determining *equality* between two colors:

* If both colors are [legacy colors](#legacy-color):

  * Set each color to the result of [converting] the color into `rgb` space.

  * Colors are only equal if their channel and alpha values are fuzzy-equal.

    > Since this definition no longer involves rounding channels, it is
    > potentially a breaking change. Moving forward,
    > `rgb(0 0 0.6) != rgb(0 0 1)`.

* Otherwise, colors are only equal when they're in the same color space and
  their channel and alpha values are fuzzy-equal.

### Known Color Space

Each known color space has a name and an ordered list of associated channels.
Each channel has a name, and an associated unit where allowed. Space and
channel names match unquoted strings, ignoring case. They are always emitted as
unquoted lowercase strings by inspection functions.

Values outside a *bounded gamut* range (including infinity or negative infinity)
are valid but are considered *out of gamut* for the given color space. They
remain un-clamped unless the gamut is specifically marked as "clamped". If the
channel is bounded, or has a percentage mapping, then the channel is considered
*scalable*.

Some color spaces use a *polar angle* value for the `hue` channel. Polar-angle
hues represent an angle position around a given hue wheel, using a CSS `<angle>`
dimension or number (interpreted as a `deg` value), and are serialized with
`deg` units.

Colors specified using a CSS color keyword or the hex notation are converted
to `rgb` and serialized as part of the `rgb` color space.

The known color spaces and their channels are:

* `rgb` (RGB, legacy):
  * `red`, `green`, `blue`:
    * gamut: bounded
    * number: `[0,255]`

      > Percentages `[0%,100%]` map to the `[0,255]` range.

* `hwb` (RGB, legacy):
  * `hue`:
    * associated unit: `deg`
    * degrees: polar angle
  * `whiteness`, `blackness`:
    * associated unit: `%`
    * gamut: bounded
    * percentage: `[0%,100%]`

* `hsl` (RGB, legacy):
  * `hue`:
    * associated unit: `deg`
    * degrees: polar angle
  * `saturation`:
    * gamut: bounded
    * associated unit: `%`
    * percentage: `[0%,100%]`
  * `lightness`:
    * gamut: bounded, clamped
    * associated unit: `%`
    * percentage: `[0%,100%]`

* `srgb`, `srgb-linear`, `display-p3`, `a98-rgb`, `prophoto-rgb`,
  `rec2020` (RGB):
  * `red`, `green`, `blue`:
    * gamut: bounded
    * number: `[0,1]`

      > Percentages `[0%,100%]` map to the `[0,1]` range.

* `xyz`, `xyz-d50`, `xyz-d65`:
  * `x`, `y`, `z`:
    * gamut: un-bounded
    * number: `[0,1]`

      > Percentages `[0%,100%]` map to the `[0,1]` range.

* `lab`:
  * `lightness`:
    * gamut: un-bounded, clamped
    * associated unit: `%`
    * number: `[0,100]`

      > Percentages `[0%,100%]` map to the `[0,100]` range.

  * `a`, `b`:
    * gamut: un-bounded
    * number: `[-125,125]`

      > Percentages `[-100%,100%]` map to the `[-125,125]` range.

* `lch`:
  * `lightness`:
    * gamut: un-bounded, clamped
    * associated unit: `%`
    * number: `[0,100]`

      > Percentages `[0%,100%]` map to the `[0,100]` range.

  * `chroma`:
    * gamut: un-bounded
    * number: `[0,150]`

      > Percentages `[0%,100%]` map to the `[0,150]` range.

  * `hue`:
    * associated unit: `deg`
    * degrees: polar angle

* `oklab`:
  * `lightness`:
    * gamut: un-bounded, clamped
    * associated unit: `%`
    * number: `[0,1]`

      > Percentages `[0%,100%]` map to the `[0,1]` range.

  * `a`, `b`:
    * gamut: un-bounded
    * number: `[-0.4,0.4]`

      > Percentages `[-100%,100%]` map to the `[-0.4,0.4]` range.

* `oklch`:
  * `lightness`:
    * gamut: un-bounded, clamped
    * associated unit: `%`
    * number: `[0,1]`

      > Percentages `[0%,100%]` map to the `[0,1]` range.

  * `chroma`:
    * gamut: un-bounded
    * number: `[0,0.4]`

      > Percentages `[0%,100%]` map to the `[0,0.4]` range.

  * `hue`:
    * associated unit: `deg`
    * degrees: polar angle

### Predefined Color Spaces

> 'Predefined color spaces' can be described using the `color()` function.

The *predefined RGB spaces* are:

* `srgb`
* `srgb-linear`
* `display-p3`
* `a98-rgb`
* `prophoto-rgb`
* `rec2020`

The *predefined XYZ spaces* are:

* `xyz`
* `xyz-d50`
* `xyz-d65` (an alias for `xyz`)

### Missing Components

In some cases, a color can have one or more missing components (channel or
alpha values). Missing components are represented by the special value `none`.
When interpolating between colors, the missing component is replaced by the
value of that same component in the other color. In all other cases, the
missing value is treated as `0`.

For the sake of [interpolating] between colors with missing components, the
following *analogous components* are defined by [CSS Color Level 4][color-4]:

| Category      | Components          |
| ------------- | ------------------- |
| Reds          | red, x              |
| Greens        | green, y            |
| Blues         | blue, z             |
| Lightness     | lightness           |
| Colorfulness  | chroma, saturation  |
| Hue           | hue                 |

[interpolating]: #interpolating-colors

### Powerless Components

In some color spaces, it is possible for a channel value to become 'powerless'
in certain circumstances.

* `hsl`:

  * If the `saturation` value is `0%`, then the `hue` channel is powerless.

  * If the `lightness` value is either `0%` or `100%`, then both the `hue` and
    `saturation` values are powerless.

* `hwb`:

  * If the combined `whiteness` and `blackness` values (after normalization)
    are equal to `100%`, then the `hue` channel is powerless.

* `lab`/`oklab`:

  * If the `lightness` value is either `0%` or `100%`, then both the `a` and
  `b` channels are powerless.

* `lch`/`oklch`:

  * If the `chroma` value is 0%, then the `hue` channel is powerless.

  * If the `lightness` value is either `0%` or `100%`, then both the `hue` and
    `chroma` channels are powerless.

### Color Interpolation Method

A *color interpolation method* is a space-separated list of unquoted strings,
parsed according to the following syntax definition:

<x><pre>
**ColorInterpolationMethod** ::= RectangularColorSpace
&#32;                          | (PolarColorSpace HueInterpolationMethod?)
**HueInterpolationMethod**   ::= (
&#32;                                'shorter'
&#32;                              | 'longer'
&#32;                              | 'increasing'
&#32;                              | 'decreasing'
&#32;                            ) 'hue'
</pre></x>

A valid *PolarColorSpace* is the name of a [known color space] with a polar
angle hue channel. A *RectangularColorSpace* is the name of any other
[known color space], without a polar-angle hue. The *interpolation color space*
is the result of [looking up a known color space] named by either the
`PolarColorSpace` or `RectangularColorSpace` productions.

> Different color interpolation methods provide different advantages. For that
> reason, individual color procedures and functions can establish their own
> color interpolation defaults, or provide a syntax for authors to explicitly
> choose the method that best fits their need. The [CSS Color Level 4][color-4]
> specification provides [additional guidance][default-space] for determining
> appropriate defaults.

## Serialization

### Serialization of Non-Legacy Colors

To serialize a non-legacy color `color`:

* Let `space-name` be an unquoted lowercase string of `color`'s space name.

* Let `known-space` be the result of [looking up a known color space] with a
  `name` of `space-name`.

* Let `components` be an empty space-separated list.

* For each `channel` in `color`'s channels:

  * If `channel` is missing a value, set `channel` to the unquoted string "none".

  * Otherwise:

    * Let `unit` be the unit associated with `channel` in `known-space`, if
      defined, and `null` otherwise.

    * If `unit` is not null, append `unit` units to the `channel` value.

  * Append `channel` as the last element of `components`.

* Let `alpha` be the alpha value of `color`.

* If `alpha != 1`:

  * Set `components` to the result of appending " / " and then the values of
    `alpha` to the end of `components`.

* If `color` has a [known color space] that is not a [predefined color space]:

  > Since a [predefined color space] is defined as a [known color space] that
  > uses the `color()` syntax, this is a reliable way to get the remaining
  > known color spaces that provide their own function syntax.

  * Emit `space-name` followed by "(", `components`, and then ")".

* Otherwise, emit "color(", followed by `space-name`, " ", `components`, and
  then ")".

[predefined color space]: #predefined-color-spaces

## Procedures

### Looking Up a Known Color Space

This procedure accepts a `name`, and attempts to look up a [known color space]
with a matching name. It throws an error if `name` is not a valid color space
name, and either returns the known color space, or `null` if no color space is
matched.

* If `name` is not an unquoted string, throw an error.

* Let `lower-name` be the result of calling `string.to-lower-case(name)`.

* If `lower-name` is the name of a [known color space], return the matching
  [known color space].

* Otherwise, throw an error.

  > In the future, we can add support for custom/unknown spaces by returning
  > `null` when no space is found.

[looking up a known color space]: #looking-up-a-known-color-space

### Converting a Color

Colors can be converted from one [known color space] to another. This procedure
accepts a color `origin-color`, and a [known color space] `target-space`, and
returns a color `color`.

> Since the individual CSS color conversion algorithms don't explicitly handle
> the process of 'carrying over' missing values on analogous channels, we have
> to handle that here.

* Let `origin-space` be `origin-color`'s color space.

* If `origin-space == target-space` return `origin-color`.

  > CSS doesn't perform conversions unless they are required.

* Let `missing` be a list of channel names in `origin-color` that are [missing].

* Let `color` be the result of [css-converting] `origin-color` into
  `target-space`.

* For each `channel` in `missing`:

  * If `target-space` has an [analogous component][missing] to `channel`, set
    the analogous component in `color` to `none`.

* If any `channel` of `color` is [powerless] and not already [missing], set
  `channel` to the special value `none`.

* Return `color`.

[missing]: #missing-components
[powerless]: #powerless-components

## CSS-Converting a Color Space

[css-converting]: #css-converting-a-color-space

Algorithms for individual color space conversion are defined in the
[CSS Color Level 4][color-4] specification. [CSS color conversion] takes a
color `origin-color`, and a [known color space] `target-space`, and returns a
color `output-color`.

### Gamut Mapping

> Some [known color space]s describe limited color gamuts. If a color is 'out of
> gamut' for a particular space (most often because of conversion from a
> larger-gamut color-space), it can be useful to 'map' that color to the nearest
> available 'in-gamut' color. Gamut mapping is the process of finding an
> in-gamut color with the least objectionable change in visual appearance.

Gamut mapping in Sass follows the [CSS gamut mapping algorithm][css-mapping].
This procedure accepts a color `origin`, and a [known color space]
`destination`. It returns the result of a [CSS gamut map][css-map] procedure,
converted back into the original color space.

* Let `origin-space` be `origin`'s color space.

* If either `origin-space` or `destination` is not a [known color space], throw
  an error.

* Let `mapped` be the result of [CSS gamut mapping][css-mapping] `origin`
  color, with an origin color space of `origin-space`, and destination of
  `destination`.

* Return the result of [converting] `mapped` into `origin-space`.

> This algorithm implements a relative colorimetric intent, and colors inside
> the destination gamut are unchanged. Since the process is lossy, authors
> should be encouraged to let the browser handle gamut mapping when possible.

### Parsing Color Components

This procedure accepts an `input` parameter to parse, along with an optional
[known color space] `space`. It throws common parse errors when necessary, and
returns either a single string of components to emit in a CSS function, or
three values: a color space, a list of channel values, and an alpha value.

> This supports both the space-specific color formats like `hsl()` and `rgb()`,
> where the space is determined by the function, as well as the syntax of
> `color()`, where the space is included as one of the input arguments (and may
> be a user-defined space).

The procedure is:

* If `input` is a [special variable string], return an unquoted string with
  the value of `input`.

* If `input` is a bracketed list, or a list with a separator other than
  'slash' or 'space', throw an error.

* If `input` is a slash-separated list:

  * If `input` doesn't have exactly two elements, throw an error.

  * Otherwise, let `components` be the first element and `alpha` the second
    element of `input`.

* Otherwise:

  * Let `components` be an unbracketed space separated list of all except the
    last element of `input`.

  * If the last element of `input` is an unquoted string that contains `/`:

    * Let `split-last` be the result calling `string.split()` with the last
      element of `input` as the string to split, and `/` as the separator.

    * If `split-last` has two items, and one or both items are an unquoted
      string that's case-insensitively equal to 'none':

      > Special handling for `none/none`, `none/<number>`, and `<number>/none`.

      * If either item in `split-last` can be coerced to a number, replace
        the current value of the item with the resulting number value.

      * If any item in `split-last` is not a number or an unquoted string
        that's case-insensitively equal to 'none', return an unquoted string
        with the value of `input`.

      * Otherwise, let `alpha` be the second element in `split-last`, and
        append the first element of `split-last` to `components`.

    * Otherwise, return an unquoted string with the value of `input`.

      > This solves for a legacy handling of `/` in Sass that would produce an
      > unquoted string when the alpha value is a CSS function such as `var()`
      > or when either value is `none`.

  * Otherwise, if the last element of `input` has preserved its status as two
    slash-separated numbers:

    * Let `alpha` be the number after the slash, and append the number before
      the slash to `components`.

  * Otherwise, append the last element of `input` to `components`.

* If `components` is an empty list, throw an error.

* If `components` is a [special variable string]:

  * Let `channels` be the value of `components`.

* Otherwise:

  * If `components` is not an unbracketed space-separated list, throw an error.

  * If the first element of `components` is an unquoted string which is
    case-insensitively equal to `from`, return an unquoted string with the
    value of `input`.

  * If `space` is null:

    * Let `input-space` be the first element in `components`.

    * If `input-space` is a [special variable string], return an unquoted
      string with the value of `input`.

    * Set `space` be the result of [looking up a known color space] with the
      name `input-space`.

    * If `space` is not a [predefined color space], throw an error.

      > Only predefined spaces can be passed in as color syntax components.
      > All other known color spaces use explicit functions.

    * Let `channels` be an unbracketed space-separated list with the
      remaining elements from `components`.

  * Otherwise, let `channels` be the value of `components`.

  * Let `expected` be the number of channels in `space`.

  * If any element of `channels` is not either a number, a special variable
    string, a [special number], or an unquoted string that's
    case-insensitively equal to 'none', throw an error.

* If `alpha` is null, let `alpha` be `1`.

* Otherwise, If `alpha` is not a [special number]:

  * If `alpha` is a number, set `alpha` to the result of
    [percent-converting] `alpha` with a max of 1, and then clamping the value
    between 0 and 1, inclusive.

  * Otherwise, throw an error.

* If `channels` is a [special variable string], or if `alpha` is a [special
  number], return an unquoted string with the value of `input`.

* If any element of `channels` is a [special number]:

  * If `space` is a [legacy color] space:

    * Let `comma-list` be the result of calling
      `list.append(channels, alpha, 'comma')`.

    * Return an unquoted string with the value of `comma-list`.

  * Otherwise, return an unquoted string with the value of `input`.

    > Doing this late in the process allows us to throw any obvious syntax
    > errors, even for colors that can't be fully resolved during compilation.

* If the length of `channels` is not equal to `expected`, throw an error.

    > Once special values have been handled, any colors remaining should have
    > exactly the expected number of channels.

* Set `channels` to the result of [normalizing] `channels` in `space`.

* Let `space-name` be a lowercase unquoted string of the `space` name.

* Return `space-name`, `channels` channels, and `alpha` alpha value.

[special variable string]: ../spec/functions.md#special-variable-string
[special number]: ../spec/functions.md#special-number
[percent-converting]: #percent-converting-a-number

### Percent-Converting a Number

This algorithm takes a SassScript number `number` and a number `max`. It returns
a number relative to the range `[0,max]` without clamping.

> In order to support both out-of-gamut channels and unbounded ranges, this
> value is no longer clamped between 0 and `max`

* If `number` has units other than `%`, throw an error.

* If `number` has the unit `%`, set `number` to `number * max / 100%`.

* Return `number`.

### Validating a Color Channel

[validating]: #validating-a-color-channel

This process accepts a SassScript value `channel` to validate, a [known color
space] `space` to validate against, and the `key` name of the channel. It
throws an error if the channel is invalid for the color space, or returns a
normalized channel value otherwise.

* If `channel` is not a number or an unquoted string that's case-insensitively
  equal to 'none', throw an error.

* If `channel == NaN`, throw an error.

* If `channel` is an unquoted string that's case-insensitively equal to 'none',
  return `channel`.

* Otherwise:

  * Let `valid` be the corresponding channel defined by the [known color space]
    `space` with a name of `key`.

  * If `valid` is a polar-angle `hue`:

    * Let `angle` be the result of [converting][number-to-unit] `channel` to
      `deg` allowing unitless.

    * Return the result of `angle % 360deg`.

  * Otherwise, if `valid` requires a percentage:

    * If `channel` is a number with units other than `%`, throw an error.

    * Return `channel`.

  * Otherwise, set `channel` to the result of [percent-converting] `channel`
    with a `min` and `max` defined by the `valid` channel range.

  * If `valid` is a `lightness` channel, and `space` is not a [legacy color]
    space, set `channel` to the result of clamping the `channel` value between
    0 and 100, inclusive.

  * Return `channel`.

### Normalizing Color Channels

[normalizing]: #normalizing-color-channels

This process accepts a list of `channels` to validate, and a [known color space]
`space` to normalize against. It throws an error if any channel is invalid for
the color space, or returns a normalized list of valid channels otherwise.

* If `channels` is not a list, throw an error.

* If `space` is not a [known color space], throw an error.

* Let `normal` be an empty list.

* For each `channel` in `channels`:

  * Let `key` be the name of `channel` in `space`.

  * Let `valid` be the result of [validating] `channel` as `key` channel in
    `space`.

  * Append `valid` as the next item in `normal`.

* Let `unitless` be an empty list.

* For each `channel` in `normal`.

  * If the value of `channel` is the special value `none`, append `none` as the
    next item in `unitless`.

  * Otherwise, append the value of `channel` as a [double] without units as the
    next item in `unitless`.

* Return `unitless`.

### Interpolating Legacy Colors

> This procedure is based on the legacy behavior of the `color.mix()` function,
> but returns a color in the original `color1` color space.

This procedure accepts two legacy colors (`color1` and `color2`), and an
optional percentage `weight` for `color1` in the mix. It returns a new color
`mix` that represents the appropriate mix of input colors.

* Let `origin-space` be `color1`'s color space.

* Let `rgb1` and `rgb2` be the result of [converting] `color1` and `color2`
  respectively into `rgb`.

* If `weight` is null, set `weight-scale` to `0.5`.

* Otherwise, set `weight-scale` to the result of [percent-converting] `weight`
  with a max of 1, and then clamping the value between 0 and 1 (inclusive).

* Let `normal-weight` be `weight-scale * 2 - 1`.

* Let `alpha1` and `alpha2` be the alpha values of `rgb1` and `rgb2`
  respectively.

* Let `alpha-distance` be `alpha1 - alpha2`.

* Let `weight-by-distance` be `normal-weight * alpha-distance`.

* If `weight-by-distance == -1`, let `combined-weight1` be `normal-weight`.

* Otherwise:

  * Let `weight-distance-sum` be `normal-weight + alpha-distance`.

  * Let `combined-weight1` be `weight-distance-sum / (1 + weight-by-distance)`.

* Let `weight1` be `(combined-weight1 + 1) / 2`.

* Let `weight2` be `1 - weight1`.

* Let `red1` and `red2` be the red channels of `rgb1` and `rgb2` respectively.

* Let `red` be `red1 * weight1 + red2 * weight2`.

* Let `green1` and `green2` be the green channels of `rgb1` and `rgb2`
  respectively.

* Let `green` be `green1 * weight1 + green2 * weight2`.

* Let `blue1` and `blue2` be the blue channels of `rgb1` and `rgb2`
  respectively.

* Let `blue` be `blue1 * weight1 + blue2 * weight2`.

* Let `alpha` be `alpha1 * weight-scale + alpha2 * (1 - weight-scale)`.

* Let `mix` be a [legacy color] in the `rgb` space, with the given `red`,
  `green`, and `blue` channels, and `alpha` value.

* Return the result of [converting] `mix` into `origin-space`.

[legacy interpolation]: #interpolating-legacy-colors

This procedure accepts two color arguments (`color1` and `color2`), a
[color interpolation method] `method`, and a percentage `weight` for `color1`
in the mix. It returns a new color `mix` that represents the appropriate mix of
input colors.

* If either `color1` or `color2` is not a color in a [known color space], throw
  an error.

* Let `origin-space` be `color1`'s color space.

* If `weight` is null, set `weight` to `0.5`.

* Otherwise, set `weight` to the result of [percent-converting] `weight` with a
  max of 1.

* If `weight > 1` or `weight < 0`, throw an error.

* If `weight == 0`, return `color2`.

* If `weight == 1`, return `color1`.

* Let `space` be the *interpolation color space* specified by the `method`
  [color interpolation method].

  > Only known color spaces are allowed as part of a color interpolation method.

* If `space` is a [PolarColorSpace][color-method]:

  * Let `hue-arc` be the `HueInterpolationMethod` specified in `method`, or
    `shorter` if no hue interpolation is specified.

* Set `color1` and `color2` respectively to the results of [converting] `color1`
  and `color2` into `space`.

* For each `color` in `color1` and `color2`:

  * If any non-`alpha` `component` of `color` is `none`, set that `component` to
    the value of the corresponding component in the other color.

    > If both values are `none`, the interpolation result for that component
    > will also be `none`.

  * Set `color` to the result of [premultiplying] `color`.

  * If `color`'s `alpha` component is `none`, set it to the value of the `alpha`
    component in the other color.

    > This is resolved after premultiplying, because premultiplying has special
    > handling for a missing `alpha` component.

* Let `mix` be a new color in the color space `space`, with `none` for all
  channel and alpha values.

* For each `channel` of `mix`:

  * Let `channel1` and `channel2` be the corresponding channel values in
    `color1` and `color2` respectively.

  * If `channel` has a polar angle value, set `channel1` and `channel2`
    respectively to the results of [hue interpolation][hue-method] with
    `channel1` as `hue1`, `channel2` as `hue2`, using the `hue-arc` method.

  * Set `channel` to the result of calculating
    `(channel1 * weight) + (channel2 * (1 - weight))`.

    > Channel rounding has been removed, since it is a lossy transform.

* Set `mix` the result of [un-premultiplying] `mix`.

* Return the result of [converting] `mix` into `origin-space`.

[premultiplying]: #premultiply-transparent-colors
[un-premultiplying]: #premultiply-transparent-colors
[color-method]: #color-interpolation-method
[hue-method]: #hue-interpolation
[converting]: #converting-a-color

#### Premultiply Transparent Colors

When the colors being interpolated are not fully opaque, they are transformed
into premultiplied color values. This process accepts a single `color` and
updates the channel values if necessary, returning a new color with
premultiplied channels.

* If the `color` has an `alpha` value of 1 or `none`, return `color` unchanged.

  > It's not possible to premultiply channels relative to a missing alpha,
  > and no multiplication is necessary with full opacity.

* Otherwise, for each `channel` in `color`:

  * If the `channel` value is `none`, or if `channel` is a polar-angle `hue`,
    keep the original value of `channel`.

  * Otherwise, set `channel` to the result of multiplying the `channel` value
    by the `alpha` value.

* Return the resulting `color` with premultiplied channels.

The same process can be run in reverse, to **un-premultiply** the channels of a
given `color`:

* If `color` has an `alpha` value of 1, 0, or `none`, return `color` unchanged.

* Otherwise, for each `channel` in `color`:

  * If the `channel` value is `none`, or if `channel` is a polar-angle `hue`,
    keep the original value of `channel`.

  * Otherwise, set `channel` to the result of dividing the premultiplied
    `channel` value by the `alpha` value.

* Return the resulting `color` with un-premultiplied channels.

#### Hue Interpolation

> When interpolating between polar-angle hue channels, there are multiple
> 'directions' the interpolation could move, following different logical rules.

This process accepts two hue angles (`hue1` and `hue2`), and returns both hues
adjusted according to the given `method`. When no hue interpolation `method` is
specified, the default is `shorter`.

### Scaling a Number

This algorithm takes a number `number`, a value `factor`, a number `max`, and
an optional number `min`. It's written "scale `<number>` by `<factor>` with a
`max` of `<max>` and a `min` of `<min>`". It returns a number with a value
between `min` (or 0) and `max` and the same units as `number`.

> Note that this no longer assumes the original `number` is in a range of
> 0 to `max`. We now allow scaling up negative numbers, and scaling down
> numbers above the `max` value. The inverse operations return the `number`
> unchanged, since that's the asymptotic scale behavior approaching boundaries.

* If `factor` isn't a number with unit `%` between `-100%` and `100%`
  (inclusive), throw an error.

* If `min` is not specified, set `min` to 0.

* If `factor > 0%`:

  * If `number > max`, return `number`.

  * Otherwise, return `number + (max - number) * factor / 100%`.

* Otherwise:

  * If `number < 0`, return `number`.

  * Otherwise, return `number + (number - min) * factor / 100%`.

## New Color Module Functions

These new functions are part of the built-in `sass:color` module.

### `color.space()`

```
space($color)
```

* If `$color` is not a color, throw an error.

* Return an unquoted string with the name of `$color`s color space.

### `color.to-space()`

```
to-space($color, $space)
```

* If `$color` is not a color, throw an error.

* Let `known-space` be the result of [looking up a known color space] named
  `$space`.

* Let `known-origin` be `$color`'s space.

* If `known-origin == known-space`, return `$color`.

* Let `converted` be the result of [converting] the `origin-color` `$color` to
  the `target-space` `known-space`.

* If `converted` is a [legacy color]:

  * For each `component` in the channels and alpha value of `converted`, if
    `component` is [missing], set `component` to `0`.

* Return `converted`.

### `color.is-legacy()`

```
is-legacy($color)
```

* If `$color` is not a color, throw an error.

* Return `true` if `$color` is a [legacy color], or `false` otherwise.

### `color.is-powerless()`

```
is-powerless($color, $channel, $space: null)
```

* If `$color` is not a color, throw an error.

* If `$channel` is not a quoted string, throw an error.

* If `$space` is null:

  * Let `color` be `$color`

  * Let `origin-space` be the result of calling `color.space($color)`.

  * Let `space` be the result of [looking up a known color space] named
    `origin-space`.

* Otherwise:

  * Let `color` be the result of calling `color.to-space($color, $space)`.

  * Let `space` be the result of [looking up a known color space] named
    `$space`.

* Let `channels` be a list of the `color`'s channels.

* If `$channel` is not the name of a channel in `channels`, throw an error.

* Return `true` if the channel `$channel` is [powerless] in `color`,
  otherwise return `false`.

### `color.is-in-gamut()`

```
is-in-gamut($color, $space: null)
```

* If `$color` is not a color, throw an error.

* Let `space-name` be the result of calling `color.space($color)` if `$space`
  is null, and the value of `$space` otherwise.

* Let `space` be the result of [looking up a known color space] named
  `space-name`.

* Let `color` be the result of calling `color.to-space($color, space)`.

* For all bounded channels in `space`, if the associated channel value in
  `$color` is fuzzy greater-than the bounded maximum, or fuzzy less-than the
  bounded minimum, return `false`.

* Otherwise, return `true`.

### `color.to-gamut()`

```
to-gamut($color, $space: null)
```

* If `$color` is not a color, throw an error.

* If `$space` is null:

  * Let `origin-space` be the result of calling `color.space($color)`.

  * Let `target-space` be the result of [looking up a known color space] named
    `origin-space`.

* Otherwise, let `target-space` be the result of [looking up a known color
  space] named `$space`.

* Return the result of [gamut mapping] `$color` with a `target-space`
  destination.

[gamut mapping]: #gamut-mapping

### `color.channel()`

> Note that channel values are stored as specified, even if those values are
> out-of-gamut for the [known color space] used. Similarly, this color-channel
> inspection function may return out-of-gamut channel values.

```
channel($color, $channel, $space: null)
```

* If `$color` is not a color, throw an error.

* If `$channel` is not a quoted string, throw an error.

* If `$channel == 'alpha'` (ignoring case), let `value` be the alpha value of
  `$color`.

* Otherwise:

  * Let `color` be `$color` if `$space` is null, and the result of calling
    `color.to-space($color, $space)` otherwise.

  * Let `channel` be the channel in `color`'s space named `$channel`. Throw an
    error if no such channel exists.

  * Let `value` be `channel`'s value in `color`, or `0` if the channel's value
    is missing.

  * Let `unit` be the unit associated with `channel` in `color`'s space, if
    defined, and `null` otherwise.

* If `unit` is `%`, return `value * 100` divided by the maximum of
  `channel`'s gamut range with unit `%`.

* Otherwise, if `unit` is not null, return `value` with unit `unit`.

* Otherwise, return `value` as a unitless number.

### `color.is-missing()`

```
is-missing($color, $channel)
```

* If `$color` is not a color, throw an error.

* If `$channel` is not a quoted string, throw an error.

* If `$channel == alpha` (ignoring case), let `value` be the alpha value of
  `$color`.

* Otherwise:

  * If `channel` is not the name of a channel in `$color`, throw an error.

  * Let `value` be the channel value in `color` with name of `channel`.

* Return `true` if `value == null`, and `false` otherwise.

### `color.same()`

> While it's already possible to compare the [equality](#color-equality) of
> two colors, the result is always false when the two colors are in different
> color spaces. This function compares colors across color spaces, to determine
> if they are equal after being converted into the same space.

```
same($color1, $color2)
```

* If either `$color1` or `$color2` is not a color in a [known color space]:

  * Let `color1` be `$color1`, and let `color2` be `$color2`.

  > We can compare, but we can't do conversion. The color space remains
  > relevant to equality. While this is technically the same as using `==`,
  > it makes the function more robust to allow comparison of all colors.

* Otherwise:

  * Let `color1` and `color2` be the result of [converting] `$color1` and
    `$color2` into `xyz` color space, respectively.

* Return `color1 == color2`.

## Modified Color Module Functions

### `color.hwb()`

These functions are now deprecated. Authors should use global `hwb()` instead.

* ```
  hwb($channels)
  ```

  * Return the result of calling the global function `hwb($channels)`.

* ```
  hwb($hue, $whiteness, $blackness, $alpha: 1)
  ```

  * Return the result of calling the global function
    `hwb(list.slash($hue $whiteness $blackness, $alpha))`.

### `color.mix()`

```
mix($color1, $color2,
  $weight: 50%,
  $method: null)
```

* If either `$color1` or `$color2` is not a color, throw an error.

* If `$method` is null:

  * If either `$color1` or `$color2` is not a [legacy color], throw an error.

    > Method is required for non-legacy colors. This matches the `color-mix()`
    > function defined in [Colors Level 5][color-5], and allows us to add
    > additional default behavior in the future.

  * Return the result of [legacy interpolation] between `$color1` and `$color2`
    with the specified `$weight`.

* Otherwise, if `$method` is not a [color interpolation method], throw an error.

* Return the result of [interpolating] between `$color1` and
  `$color2` with the specified `$weight` and `$method`.

### `color.change()`

```
change($color, $args...)
```

This function is also available as a global function named `change-color()`.

* If `$color` is not a color, throw an error.

* If any item in `$args` is not a keyword argument, throw an error.

* Let `color` be the value of `$color`.

* Let `origin-space` be `color`'s space.

* If the keyword argument `$space` is specified in `$args`:

  * Let `known-space` be the result [looking up a known color space] named
    `$space`.

  * If `space != origin-space`, set `color` to the result of calling
    `color.to-space(color, space)`.

* Otherwise, let `known-space` be `origin-space`.

* Let `alpha` be `color`'s alpha property.

* If the keyword argument `$alpha` is specified in `$args`:

  * Set `alpha` to the result of [percent-converting] `$alpha` with a `max` of
    1, and clamping it between 0 and 1 (inclusive).

* Let `channel-args` be the remaining keyword arguments in `$args`, not
  including `$space` or `$alpha` arguments.

* Let `channels` be a list of the `color`'s channels.

* For each keyword `key` and value `new` in `channel-args`:

  * If `new` is not a number or an unquoted string that's case-insensitively
    equal to 'none', throw an error.

    > This basic restriction can be applied to all spaces. Further channel
    > restrictions are enforced by the normalization step for known spaces.

  * If `key` is not the name of a channel in `channels`:

    * If `$space` is specified, throw an error.

    * If `color` is not a [legacy color], throw an error.

    * If `key` is one of `red`, `green`, or `blue`:

      * Let `legacy-color` be the result of [converting] `color` to `rgb`.

    * Otherwise, if `key` is one of `hue`, `saturation`, or `lightness`:

      * Let `legacy-color` be the result of [converting] `color` to `hsl`.

    * Otherwise, if `key` is one of `whiteness`, or `blackness`:

      * Let `legacy-color` be the result of [converting] `color` to `hwb`.

    * Otherwise, throw an error.

    * Set `channels` to be a list of `legacy-color`'s channels.

  * Set the corresponding `key` value in `channels` to `new`.

* Set `channels` to the result of [normalizing] `channels` in `known-space`.

* Let `new` be a color in color space `known-space`, with `channels` channels,
  and an alpha of `alpha`.

* Return the result of [converting] `new` into `origin-space`.

### `color.adjust()`

```
adjust($color, $args...)
```

This function is also available as a global function named `adjust-color()`.

* If `$color` is not a color, throw an error.

* If any item in `$args` is not a keyword argument, throw an error.

* Let `color` be the value of `$color`.

* Let `origin-space` be `color`'s space.

* If the keyword argument `$space` is specified in `$args`:

  * Let `known-space` be the result [looking up a known color space] named
    `$space`.

  * If `space != origin-space`, set `color` to the result of calling
    `color.to-space(color, space)`.

* Otherwise, let `known-space` be `origin-space`.

* Let `alpha` be `color`'s alpha property.

* If the keyword argument `$alpha` is specified in `$args`:

  * If `alpha == none`, throw an error.

    > This is not the ideal solution for handling `none`, but we want to
    > match CSS relative color syntax if possible. Throwing an error for now
    > means we can adjust to match the CSS behavior once it is defined.

  * Let `new-alpha` be the result of [percent-converting] `$alpha` with a `max`
    of 1.

  * Set `alpha` to the value of `new-alpha + alpha` clamped between 0 and 1.

* Let `channel-args` be the remaining keyword arguments in `$args`, not
  including `$space` or `$alpha` arguments.

* Let `channels` be a list of the `color`'s channels.

* For each keyword `key` and value `adjust` in `channel-args`:

  * If `key` is not the name of a channel in `channels`:

    * If `$space` is specified, throw an error.

    * If `color` is not a [legacy color], throw an error.

    * If `key` is one of `red`, `green`, or `blue`:

      * Let `legacy-color` be the result of [converting] `color` to `rgb`.

    * Otherwise, if `key` is one of `hue`, `saturation`, or `lightness`:

      * Let `legacy-color` be the result of [converting] `color` to `hsl`.

    * Otherwise, if `key` is one of `whiteness`, or `blackness`:

      * Let `legacy-color` be the result of [converting] `color` to `hwb`.

    * Otherwise, throw an error.

    * Set `channels` to be a list of `legacy-color`'s channels.

  * Let `channel` be the value of the channel in `channels` with name of `key`.

  * Let `valid` be the channel in by `known-space` with a name of `key`.

  * If `channel == none`, throw an error.

    > This is not the ideal solution for handling `none`, but we want to
    > match CSS relative color syntax if possible. Throwing an error for now
    > means we can adjust to match the CSS behavior once it is defined.

  * If `adjust` has the unit `%`:

    * If `valid` requires a percentage, set `channel` to the result of appending
      `%` units to `channel`.

    * Otherwise, if `valid` allows percentage mapping, set `adjust` to the
      result of [percent-converting] `adjust` with a `max` given by the maximum
      of `valid`'s gamut range.

    * Otherwise, throw an error.

  * Set `channel` to `channel + adjust`.

    > Once percentage/number conversions have been normalized, this will throw
    > an error if `adjust` and `channel` are not compatible.

* Set `channels` to the result of [normalizing] `channels` in `known-space`.

* Let `new` be a color in color space `known-space`, with `channels` channels,
  and an alpha of `alpha`.

* Return the result of [converting] `new` into `origin-space`.

### `color.scale()`

```
scale($color, $args...)
```

This function is also available as a global function named `scale-color()`.

* If `$color` is not a color, throw an error.

* If any item in `$args` is not a keyword argument, throw an error.

* Let `origin-space` be `$color`'s color space.

* If the keyword argument `$space` is specified in `$args`:

  * Let `space` be the result of [looking up a known color space] named
    `$space`.

  * Let `color` be the result of [converting] `$color` to `space`.

* Otherwise:

  * Let `space` be `origin-space`.

  * Let `color` be the value of `$color`.

* Let `alpha` be `color`'s alpha property.

* If the keyword argument `$alpha` is specified in `$args`:

  * If `alpha == none`, throw an error.

    > This is not the ideal solution for handling `none`, but we want to
    > match CSS relative color syntax if possible. Throwing an error for now
    > means we can adjust to match the CSS behavior once it is defined.

  * Set `alpha` to the result of [scaling] `alpha` by `$alpha` with `max` 1.

* Let `channel-args` be the remaining keyword arguments in `$args`, not
  including `$space` or `$alpha` arguments.

* Let `channels` be a list of the `color`'s channels.

* For each keyword `scale`, `factor` in `channel-args`:

  * If `scale` is not the name of a [scalable] channel in `channels`:

    * If `$space` is specified, throw an error.

    * If `color` is not a [legacy color], throw an error.

    * If `scale` is one of `red`, `green`, or `blue`:

      * Let `legacy-color` be the result of [converting] `color` to `rgb`.

    * Otherwise, if `scale` is one of `saturation`, or `lightness`:

      * Let `legacy-color` be the result of [converting] `color` to `hsl`.

    * Otherwise, if `scale` is one of `whiteness`, or `blackness`:

      * Let `legacy-color` be the result of [converting] `color` to `hwb`.

    * Otherwise, throw an error.

    * Set `channels` to be a list of `legacy-color`'s channels.

  * Let `channel` be the corresponding `channel` in `channels` with a name
    matching `scale`.

  * If `channel == none`, throw an error.

    > This is not the ideal solution for handling `none`, but we want to
    > match CSS relative color syntax if possible. Throwing an error for now
    > means we can adjust to match the CSS behavior once it is defined.

  * Let `channel-max` be the upper boundary of `channel` in `space`.

  * Let `channel-min` be the lower boundary of `channel` in `space`.

  * Set the corresponding `channel` in `channels` to the result of [scaling]
    `channel` by `factor` with a `max` of `channel-max` and a `min` of
    `channel-min`.

* Set `channels` be the result of [normalizing] `channels` in `space`.

* Let `new` be a color in color space `space`, with `channels` channels, and an
  alpha of `alpha`.

* Return the result of [converting] `new` into `origin-space`.

[scalable]: #known-color-space
[scaling]: #scaling-a-number

### `color.complement()`

```
complement($color, $space: null)
```

This function is also available as a global function named `complement()`.

* If `$color` is not a color, throw an error.

* If `$space` is null:

  * If `$color` is a legacy color, let `space` be the [known color space]
    named `hsl`.

  * Otherwise, throw an error.

* Otherwise:

  * Let `space` be the result of [looking up a known color space] named
    `$space`.

  * If `space` is not a [known color space] with a polar-angle hue channel,
    throw an error.

    > This currently allows `hsl`, `hwb`, `lch`, and `oklch`. We may decide to
    > provide additional options in the future.

* Return the result of calling
  `color.adjust($color, $hue: 180deg, $space: space)`.

### `color.invert()`

```
invert($color,
  $weight: 100%,
  $space: null)
```

This function is also available as a global function named `invert()`.

* If `$color` is not a color, throw an error.

* If `$space` is null:

  * If `$color` is a legacy color, let `space` be `rgb`, and let `mix-space`
    be null.

    > This allows us to also enforce legacy behavior in the final weighted mix.

  * Otherwise, throw an error.

* Otherwise:

  * Let `space` be the result of [looking up a known color space] named
    `$space`.

  * If `space` is not a [known color space], throw an error.

  * Let `mix-space` be `space`.

* If `$weight == 0%`, return the value of `$color`.

* If `space` is not a valid [color interpolation method] *interpolation color
  space*, and `$weight != 100%`, throw an error.

* Let `color` be the result of [converting] `$color` into `space`.

* If `space` is the [known color space] named `hwb`:

  * Let `hue`, `white`, and `black` be the three elements of `color`'s channels.

  * Let `hue-out` be the result of `(hue + 180deg) % 360deg`.

  * Let `invert` be the result of calling
    `color.change(color, $hue: hue-out, $white: black, $black: white)`.

* Otherwise:

  * Let `invert` be the value of `color`.

  * For each `channel` element in `color`'s channels:

    * If `channel` is a polar-angle `hue`:

      * Let `new` be `(channel + 180deg) % 360deg`.

    * Otherwise, if `channel`'s name is either `chroma` or `saturation`:

      * Let `new` be `channel`.

    * Otherwise:

      * Let `min` and `max` be the minimum and maximum values defined for
        `channel` in `space`.

      * Let `new` be `max - channel` if `min == 0`, and `channel * -1` otherwise.

    * Set the corresponding channel of `invert` to be `new`.

* If `$weight == 100%`, return the value of `invert`.

* Return the result of calling `color.mix(invert, color, $weight, mix-space)`.

### `color.grayscale()`

```
grayscale($color)
```

> No space argument is provided, since the results should always be in gamut.

This function is also available as a global function named `grayscale()`.

* If `$color` is not a color, throw an error.

* If `$color` is a legacy color:

  * Return the result of [converting] `$color` to `hsl`, and changing the
    'saturation' channel to 0.

* Otherwise:

  * Let `origin` be `$color`'s color space.

  * Let `color` be the result of [converting] `$color` to `oklch`, and
    setting the `chroma` channel to 0.

  * Return the result of [converting] `color` to `origin`.

### `color.ie-hex-str()`

This function is also available as a global function named `ie-hex-str()`. Both
functions are deprecated.

```
ie-hex-str($color)
```

* If `$color` is not a color, throw an error.

* Let `rgb` be the result of [converting] and [gamut mapping] `$color` to `rgb`.

* Let `hex-list` be an empty list.

* For each `channel` in `rgba`'s channels, as numbers:

  * Let `hex-channel` be the hexadecimal representation of `channel`'s value.

  * Append `hex-channel` as the next item in `hex-list`.

* Let `alpha` be `rgb`'s alpha value.

* Let `hex-alpha` be the hexadecimal representation of `alpha * 255`.

* Append `hex-alpha` as the next item in `hex-list`.

* Return the result of concatenating `hex-list` into a string.

## New Global Functions

These new CSS functions are provided globally.

### `hwb()`

* ```
  hwb($channels)
  ```

  * Let `parsed` be the result of [parsing] `$channels` in `hwb` space.

    > Normalization and clamping is handled as part of the [parsing] process.

  * If `parsed` is a string, return a plain CSS function string with the name
    `"hwb"` and the argument `parsed`.

  * Let `channels` be the channel list, and `alpha` the alpha value of `parsed`.

  * Let `hue`, `whiteness`, and `blackness` be the three elements of `channels`.

  * Return a [legacy color] in the `hwb` space, with the given `hue`,
    `whiteness`, and `blackness` channels, and `alpha` value.

[parsing]: #parsing-color-components

### `lab()`

* ```
  lab($channels)
  ```

  * Let `parsed` be the result of [parsing] `$channels` in `lab` space.

  * If `parsed` is a string, return a plain CSS function string with the name
    `"lab"` and the argument `parsed`.

  * Let `channels` be the channel list, and `alpha` the alpha value of `parsed`.

  * Let `lightness`, `a`, and `b` be the three elements of `channels`.

  * Return a color in the `lab` [known color space], with the given `lightness`,
    `a`, and `b` channels, and `alpha` value.

### `lch()`

* ```
  lch($channels)
  ```

  * Let `parsed` be the result of [parsing] `$channels` in `lch` space.

  * If `parsed` is a string, return a plain CSS function string with the name
    `"lch"` and the argument `parsed`.

  * Let `channels` be the channel list, and `alpha` the alpha value of `parsed`.

  * Let `lightness`, `chroma`, and `hue` be the three elements of `channels`.

  * Return a color in the `lch` [known color space], with the given `lightness`,
    `chroma`, and `hue` channels, and `alpha` value.

### `oklab()`

* ```
  oklab($channels)
  ```

  * Let `parsed` be the result of [parsing] `$channels` in `oklab` space.

  * If `parsed` is a string, return a plain CSS function string with the name
    `"oklab"` and the argument `parsed`.

  * Let `channels` be the channel list, and `alpha` the alpha value of `parsed`.

  * Let `lightness`, `a`, and `b` be the three elements of `channels`.

  * Return a color in the `oklab` [known color space], with the given `lightness`,
    `a`, and `b` channels, and `alpha` value.

### `oklch()`

* ```
  oklch($channels)
  ```

  * Let `parsed` be the result of [parsing] `$channels` in `oklch` space.

  * If `parsed` is a string, return a plain CSS function string with the name
    `"oklch"` and the argument `parsed`.

  * Let `channels` be the channel list, and `alpha` the alpha value of `parsed`.

  * Let `lightness`, `chroma`, and `hue` be the three elements of `channels`.

  * Return a color in the `oklch` [known color space], with the given `lightness`,
    `chroma`, and `hue` channels, and `alpha` value.

### `color()`

* ```
  color($description)
  ```

  * Let `parsed` be the result of [parsing] `$description` without a space.

  * If `parsed` is a string, return a plain CSS function string with the name
    `"color"` and the argument `parsed`.

  * Let `space` be the color space, `channels` the channel list, and `alpha`
    the alpha value of `parsed`.

  * Return a color in `space`, with the given `channels` and `alpha` value.

## Modified Global Functions

Any legacy global functions that are not explicitly updated here should continue
to behave as alias functions for their appropriately updated counterparts.

> Note that the new logic preserves decimal values in color channels, as well
> as preserving the initial color-space used in defining a color.

### `rgb()` and `rgba()`

The `rgba()` function is identical to `rgb()`, except that if it would return a
plain CSS function named `"rgb"` that function is named `"rgba"` instead.

* ```
  rgb($red, $green, $blue, $alpha: 1)
  ```

  * If any argument is an unquoted string that's case-insensitively equal to
    'none', throw an error.

    > Missing channels are not allowed in legacy syntax.

  * If any argument is a [special number], return a plain CSS function
    string with the name `"rgb"` and the arguments `$red`, `$green`, `$blue`,
    and `$alpha`.

  * If `$alpha` is not a number, throw an error.

  * Let `alpha` be the result of [percent-converting] `alpha` with a max of 1,
    and then clamping the value between 0 and 1, inclusive.

  * Let `red`, `green`, and `blue` be the three elements returned by
    [normalizing] `($red, $green, $blue)` in the [known color space] named `rgb`.

  * Return a [legacy color] in the `rgb` space, with the given `red`,
    `green`, and `blue` channels, and `alpha` value.

* ```
  rgb($red, $green, $blue)
  ```

  * If any argument is a [special number], return a plain CSS function string
    with the name `"rgb"` and the arguments `$red`, `$green`, and `$blue`.

  * Otherwise, return the result of calling `rgb($red, $green, $blue, 1)`.

* ```
  rgb($channels)
  ```

  * Let `parsed` be the result of [parsing] `$channels` in `rgb` space.

  * If `parsed` is a string, return a plain CSS function string with the name
    `"rgb"` and the argument `parsed`.

  * Let `channels` be the channel list, and `alpha` the alpha value of `parsed`.

  * Let `red`, `green`, and `blue` be the three elements of `channels`.

  * Return the result of calling `rgb(red, green, blue, alpha)`.

* ```
  rgb($color, $alpha)
  ```

  * If either argument is a [special variable string], return a plain CSS
    function string with the name `"rgb"` and the same arguments.

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `rgb()` with `$color`'s red, green, and blue
    channels as unitless number arguments, and `$alpha` as the final argument.

### `hsl()` and `hsla()`

The `hsla()` function is identical to `hsl()`, except that if it would return a
plain CSS function named `"hsl"` that function is named `"hsla"` instead.

* ```
  hsl($hue, $saturation, $lightness, $alpha: 1)
  ```

  * If any argument is an unquoted string that's case-insensitively equal to
    'none', throw an error.

    > Missing channels are not allowed in legacy syntax.

  * If any argument is a [special number], return a plain CSS function
    string with the name `"hsl"` and the arguments `$hue`, `$saturation`,
    `$lightness`, and `$alpha`.

  * If `$alpha` is not a number, throw an error.

  * Let `alpha` be the result of [percent-converting] `alpha` with a max of 1,
    and then clamping the value between 0 and 1, inclusive.

  * Let `hue`, `saturation`, and `lightness` be the three elements returned
    by [normalizing] `($hue, $saturation, $lightness)` in the
    [known color space] named `hsl`.

  > Conversion to rgb has been removed.

  * Return a [legacy color] in the `hsl` space, with the given `hue`,
    `saturation`, and `lightness` channels, and `alpha` value.

* ```
  hsl($hue, $saturation, $lightness)
  ```

  * If any argument is a [special number], return a plain CSS function string
    with the name `"hsl"` and the arguments `$hue`, `$saturation`, and
    `$lightness`.

  * Otherwise, return the result of calling
    `hsl($hue, $saturation, $lightness, 1)`.

* ```
  hsl($hue, $saturation)
  ```

  * If either argument is a [special variable string], return a plain CSS
    function string with the name `"hsl"` and the same arguments.

  * Otherwise, throw an error.

* ```
  hsl($channels)
  ```

  * Let `parsed` be the result of [parsing] `$channels` in `hsl` space.

    > Normalization and clamping is handled as part of the [parsing] process.

  * If `parsed` is a string, return a plain CSS function string with the name
    `"hsl"` and the argument `parsed`.

  * Let `channels` be the channel list, and `alpha` the alpha value of `parsed`.

  * Let `hue`, `saturation`, and `lightness` be the three elements of `channels`.

  * Return a [legacy color] in the `hsl` space, with the given `hue`,
    `saturation`, and `lightness` channels, and `alpha` value.

## Deprecated Functions

Individual color-channel functions defined globally or in the color module are
deprecated in favor of the new `color.channel()` function. Legacy global color
functions are also deprecated. These functions always throw errors. During
the deprecation process, they act as alias functions described below.

### `color.red()`, `red()`

* ```
  color.red($color)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.channel($color, 'red', rgb)`.

This function is also available as a global function named `red()`.

### `color.green()`, `green()`

* ```
  color.green($color)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.channel($color, 'green', rgb)`.

This function is also available as a global function named `green()`.

### `color.blue()`, `blue()`

* ```
  color.blue($color)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.channel($color, 'blue', rgb)`.

This function is also available as a global function named `blue()`.

### `color.hue()`, `hue()`

* ```
  color.hue($color)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.channel($color, 'hue', hsl)`.

This function is also available as a global function named `hue()`.

### `color.saturation()`, `saturation()`

* ```
  color.saturation($color)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.channel($color, 'saturation', hsl)`.

This function is also available as a global function named `saturation()`.

### `color.lightness()`, `lightness()`

* ```
  color.lightness($color)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.channel($color, 'lightness', hsl)`.

This function is also available as a global function named `lightness()`.

### `color.whiteness()`

* ```
  color.whiteness($color)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.channel($color, 'whiteness', hwb)`.

### `color.blackness()`

* ```
  color.blackness($color)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.channel($color, 'blackness', hwb)`.

### `color.alpha()`

* ```
  color.alpha($color)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.channel($color, 'alpha')`.

### `adjust-hue()`

* ```
  adjust-hue($color, $amount)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling
    `color.adjust($color, $hue: $amount, $space: hsl)`.

### `saturate()`

* ```
  saturate($color, $amount)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling
    `color.adjust($color, $saturation: $amount, $space: hsl)`.

### `desaturate()`

* ```
  desaturate($color, $amount)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling
    `color.adjust($color, $saturation: -$amount, $space: hsl)`.

### `transparentize()`, `fade-out()`

* ```
  transparentize($color, $amount)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.adjust($color, $alpha: -$amount)`.

This function is also available as a global function named `fade-out()`.

### `opacify()`, `fade-in()`

* ```
  opacify($color, $amount)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling `color.adjust($color, $alpha: $amount)`.

This function is also available as a global function named `fade-in()`.

### `lighten()`

* ```
  lighten($color, $amount)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling
    `color.adjust($color, $lightness: $amount, $space: hsl)`.

### `darken()`

* ```
  darken($color, $amount)
  ```

  * If `$color` is not a [legacy color], throw an error.

  * Return the result of calling
    `color.adjust($color, $lightness: -$amount, $space: hsl)`.

## Draft 1.3

* Refactor `rgb()` and `hsl()` to reduce repetition and ensure that they always
  return plain CSS function calls with the correct names.

* Fix a redirect that didn't get the extra text about renaming its plain CSS.

## Draft 1.2

* Support `rgb(var(--foo) / 0.5)` and `hsl(var(--foo) / 0.5)`, since the
  variable could expand to a list of arguments.

* Remove the `hsl($color, $alpha)` overload, since it redirects to an `hsla()`
  overload that doesn't exist.

* Ensure that function redirects always return plain CSS functions with the same
  name as that written by the user.

## Draft 1.1

* Specify behavior for special variable functions, which may expand into
  multiple arguments.

* Specify behavior for special number functions which are converted into strings
  due to `/`.

## Draft 1

* Initial draft.

# Color Level 4 `rgb()` and `hsl()` Functions: Draft 1.3

This proposal expands Sass's built-in `rgb()`, `rgba()`, `hsl()`, and `hsla()`
functions to support the new terse syntax defined in [CSS Color Level 4][].

> This section is non-normative.

Sass's `rgb()` and `hsl()` functions will add support for the Color Level 4
syntax, so `rgb(179 115 153)`, `rgb(70% 45% 60%)`, and `hsl(324deg 29% 57%)`
will all return the same color. They'll also support the slash-separated alpha
syntax using [the normal rules][] for distinguishing between division and `/`,
so `rgb(179 115 153 / 50%)` will return a 50%-opacity color but
`rgb(179 115 $blue / 50%)` will not.

Color Level 4 redefines `rgba()` and `hsla()` as pure aliases for `rgb()` and
`hsl()`, which also means that `rgb()` and `hsl()` support the old syntax for
defining colors with alpha channels. In keeping with this, Sass will redefine
`rgba()` and `hsla()` as aliases for `rgb()` and `hsl()` as well, and add
support to the latter for the former's syntax. This includes the Sass-specific
`rgba($color, $alpha)` syntax, which will now work with `rgb()` and `hsl()` as
well.

Sass will continue generating colors with alpha channels as `rgba()` calls, for
backwards-compatibility with older browsers that don't yet support Color Level
4.

## Definitions

### Special Number String

A *special number string* is an unquoted string that CSS will recognize as a
function that may return a number. For the purposes of Sass, this is any
unquoted string that begins with `calc(` or `var(`. This matching is
case-insensitive.

> Sass functions that shadow CSS functions must work with any invocation that
> CSS allows, which includes allowing special number strings anywhere a number
> would be allowed.
>
> This is intended to match the existing behavior for determining special number
> strings for `rgb()`, `hsl()`, `rgba()`, and `hsla()`.

### Special Variable String

A *special variable string* is [special number string][] that begins with
`var(`. This matching is case-insensitive.

[special number string]: #special-number-string

> Unlike other special number strings, variables can expand into multiple
> arguments to a single function.
>
> This is intended to match the existing behavior for determining special
> variable strings for `rgb()`, `hsl()`, `rgba()`, and `hsla()`.

## Semantics

This proposal adds new overloads to the `rgb()`, `hsl()`, `rgba()`, and `hsla()`
functions:

* ```
  rgb($channels)
  ```
  
  * If `$channels` is a [special variable string][], return a plain CSS function
    string with the name `"rgb"` and the argument `$channels`.

  * If `$channels` is not an unbracketed space-separated list, throw an error.

  * If `$channels` has more than three elements, throw an error.

  * If `$channels` has fewer than three elements:

    * If any element of `$channels` is a [special variable string][], return a
      plain CSS function string with the name `"rgb"` and the argument
      `$channels`.

    * If the last element of `$channels` is an unquoted string that begins with
      `var(` and contains `/`, return a plain CSS function string with the name
      `"rgb"` and the argument `$channels`.

    * Otherwise, throw an error.

  * Let `red` and `green` be the first two elements of `$channels`.

  * If the third element of `$channels` is an unquoted string that contains `/`:

    * Return a plain CSS function string with the name `"rgb"` and the argument
      `$channels`.

  * Otherwise, if the third element of `$channels` has preserved its status as
    two slash-separated numbers:

    * Let `blue` be the number before the slash and `alpha` the number after the
      slash.

  * Otherwise:

    * Let `blue` be the third element of `$channels`.

  * Call `rgb()` with `red`, `green`, `blue`, and `alpha` (if it's defined) as
    arguments and return the result.

  [special variable string]: #special-variable-string

* ```
  rgb($red, $green, $blue, $alpha)
  ```

  * Call `rgba()` with the same argument and return the result, except that if
    it would return a plain CSS function named `"rgb"` that function is named
    `"rgba"` instead.

* ```
  rgb($color, $alpha)
  ```

  * If either argument is a [special variable string][], return a plain CSS
    function string with the name `"rgb"` and the same arguments.

  * Call `rgba()` with the same arguments and return the result.

* ```
  hsl($channels)
  ```

  * If `$channels` is a [special variable string][], return a plain CSS function
    string with the name `"hsl"` and the argument `$channels`.

  * If `$channels` is not an unbracketed space-separated list, throw an error.

  * If `$channels` has more than three elements, throw an error.

  * If `$channels` has fewer than three elements:

    * If any element of `$channels` is a [special variable string][], return a
      plain CSS function string with the name `"hsl"` and the argument
      `$channels`.

    * If the last element of `$channels` is an unquoted string that begins with
      `var(` and contains `/`, return a plain CSS function string with the name
      `"hsl"` and the argument `$channels`.

    * Otherwise, throw an error.

  * Let `hue` and `saturation` be the first two elements of `$channels`.

  * If the third element of `$channels` is an unquoted string that contains `/`:

    * Return a plain CSS function string with the name `"rgb"` and the argument
      `$channels`.

  * Otherwise, if the third element of `$channels` has preserved its status as
    two slash-separated numbers:

    * Let `lightness` be the number before the slash and `alpha` the number
      after the slash.

  * Otherwise:

    * Let `lightness` be the third element of `$channels`.

  * Call `hsl()` with `hue`, `saturation`, `lightness`, and `alpha` (if it's
    defined) as arguments and return the result.

* ```
  hsl($hue, $saturation, $lightness, $alpha)
  ```

  * Call `hsla()` with the same arguments and return the result, except that if
    it would return a plain CSS function named `"hsla"` that function is named
    `"hsl"` instead.

* ```
  rgba($channels)
  ```

  * Call `rgb()` with the same argument and return the result, except that if
    it would return a plain CSS function named `"rgb"` that function is named
    `"rgba"` instead.

* ```
  rgba($red, $green, $blue)
  ```

  * Call `rgb()` with the same argument and return the result, except that if
    it would return a plain CSS function named `"rgb"` that function is named
    `"rgba"` instead.

* ```
  hsla($channels)
  ```

  * Call `hsl()` with the same arguments and return the result, except that if
    it would return a plain CSS function named `"hsl"` that function is named
    `"hsla"` instead.

* ```
  hsla($hue, $saturation, $lightness)
  ```

  * Call `hsl()` with the same arguments and return the result, except that if
    it would return a plain CSS function named `"hsl"` that function is named
    `"hsla"` instead.

## Types

### `SassColor`

The JS API representation of a Sass color.

#### `internal`

The [private `internal` field] refers to a Sass color.

[private `internal` field]: index.d.ts.md#internal

#### Constructor

* If `options.red` is set:

  * Let `red` be a Sass number with a value of `options.red` `fuzzyRound`ed
    to the nearest integer.

  * Let `green` be a Sass number with a value of `options.green`
    `fuzzyRound`ed to the nearest integer.

  * Let `blue` be a Sass number with a value of `options.blue`
    `fuzzyRound`ed to the nearest integer.

  * If `options.alpha` is set, let `alpha` be a Sass number with a value of
    `options.alpha`. Otherwise, let `alpha` be `null`.

  * Set [`internal`] to the result of [`rgb(red, green, blue, alpha)`].

  [`internal`]: #internal
  [`rgb(red, green, blue, alpha)`]: ../../functions.md#rgb-and-rgba

* Otherwise, if `options.saturation` is set:

  * Let `hue` be a Sass number with a value of `options.hue`.

  * Let `saturation` be a Sass number with a value of `options.saturation`.

  * Let `lightness` be a Sass number with a value of `options.lightness`.

  * If `options.alpha` is set, let `alpha` be a Sass number with a value of
    `options.alpha`. Otherwise, let `alpha` be `null`.

  * Set [`internal`] to the result of [`hsl(hue, saturation, lightness,
    alpha)`].

  [`hsl(hue, saturation, lightness, alpha)`]: ../../functions.md#hsl-and-hsla

* Otherwise, if `options.whiteness` is set:

  * Let `hue` be a Sass number with a value of `options.hue`.

  * Let `whiteness` be a Sass number with a value of `options.whiteness`.

  * Let `blackness` be a Sass number with a value of `options.blackness`.

  * If `options.alpha` is set, let `alpha` be a Sass number with a value of
    `options.alpha`. Otherwise, let `alpha` be `null`.

  * Set [`internal`] to the result of [`hwb(hue, whiteness, blackness, alpha)`].

  [`hwb(hue, whiteness, blackness, alpha)`]: ../../built-in-modules/color.md#hwb

# Color Module

This built-in module is available from the URL `sass:color`.

## Procedures

### Percent-Converting a Number

This algorithm takes a SassScript number `number` and a number `max`. It returns
a number between 0 and `max`.

* If `number` has units other than `%`, throw an error.

* If `number` has the unit `%`, set `number` to `number * max / 100`, without
  units.

* Return `number`, clamped between 0 and `max`.

### Scaling a Number

This algorithm takes a number `number`, a value `factor`, and a number `max`.
It's written "scale `<number>` by `<factor>` with a `max` of `<max>`". It
returns a number with a value between 0 and `max` and the same units as
`number`.

> Note: in practice, this is only ever called with `number <= max`.

* If `factor` isn't a number with unit `%` between `-100%` and `100%`
  (inclusive), throw an error.

* If `factor > 0%`, return `number + (max - number) * factor / 100%`.

* Otherwise, return `number + number * factor / 100%`.

## Functions

### `adjust()`

```
adjust($color,
  $red: null, $green: null, $blue: null,
  $hue: null, $saturation: null, $lightness: null,
  $whiteness: null, $blackness: null,
  $alpha: null)
```

This function is also available as a global function named `adjust-color()`.

* If `$color` isn't a color, throw an error.

* Let `alpha` be `$color`'s alpha channel.

* If `$alpha` isn't null:

  * If `$alpha` isn't a number, throw an error.

  * If `$alpha` has units other than `%`, throw an error.

  * If `$alpha` has unit `%`, set it to `math.div($alpha, 100%)`.

  * If `$alpha < -1` or `$alpha > 1`, throw an error.

  * Set `alpha` to `alpha + $alpha` clamped between 0 and 1.

* If `$hue` isn't a number or null, throw an error.

* If `$hue` is a number and it has units that aren't [compatible] with `deg`,
  throw an error.

  > Unitless numbers are allowed.

  [compatible]: ../types/number.md#compatible-units

* If any of `$red`, `$green`, or `$blue` aren't null:

  * If any of `$hue`, `$saturation`, `$lightness`, `$whiteness`, or `$blackness`
    aren't null, throw an error.

  * If any of `$red`, `$green`, or `$blue` aren't either null or numbers between
    -255 and 255 (inclusive), throw an error.

  * Let `red`, `green`, and `blue` be `$color`'s red, green, and blue channels.

  * If `$red` isn't null, set `red` to `red + $red` clamped between 0 and 255.

  * If `$green` isn't null, set `green` to `green + $green` clamped between 0 and 255.

  * If `$blue` isn't null, set `blue` to `blue + $blue` clamped between 0 and 255.

  * Return a color with `red`, `green`, `blue`, and `alpha` as the red, green,
    blue, and alpha channels, respectively.

* Otherwise, if either `$saturation` or `$lightness` aren't null:

  * If either `$whiteness` or `$blackness` aren't null, throw an error.

  * If either `$saturation` or `$lightness` aren't either null or numbers with
    unit `%` between -100% and 100% (inclusive), throw an error.

  * Let `hue`, `saturation`, and `lightness` be the result of calling
    `hue($color)`, `saturation($color)`, and `lightness($color)` respectively.

  * If `$hue` isn't null, set `hue` to `hue + $hue`.

  * If `$saturation` isn't null, set `saturation` to `saturation + $saturation`
    clamped between 0% and 100%.

  * If `$lightness` isn't null, set `lightness` to `lightness + $lightness`
    clamped between 0% and 100%.

  * Return the result of calling [`hsl()`][] with `hue`, `saturation`,
    `lightness`, and `alpha`.

* Otherwise, if either `$hue`, `$whiteness`, or `$blackness` aren't null:

  * If either `$whiteness` or `$blackness` aren't either null or numbers with
    unit `%` between `-100%` and `100%` (inclusive), throw an error.

  * Let `hue`, `whiteness`, and `blackness` be the result of calling
    `hue($color)`, `whiteness($color)`, and `blackness($color)` respectively.

  * If `$hue` isn't null, set `hue` to `hue + $hue`.

  * If `$whiteness` isn't null, set `whiteness` to `whiteness + $whiteness`
    clamped between `0%` and `100%`.

  * If `$blackness` isn't null, set `blackness` to `blackness + $blackness`
    clamped between `0%` and `100%`.

  * Return the result of calling `hwb()` with `hue`, `whiteness`, `blackness`,
    and `alpha`.

* Otherwise, return a color with the same red, green, and blue channels as
  `$color` and `alpha` as its alpha channel.

[`hsl()`]: ../functions.md#hsl-and-hsla

### `adjust-hue()`

```
adjust-hue($color, $degrees)
```

* Throw an error.

  > This error should indicate that the user should use the [`adjust()`
  > function](#adjust) instead.

### `alpha()`

```
alpha($color)
```

This function is also available as a global function named `opacity()`.

> There is also a global function named `alpha()`, but it supports an additional
> overload with different behavior that's defined with the [global functions][].
>
> [global functions]: ../functions.md#alpha

* If `$color` is a number or a [special number], and this function is called as
  the global `opacity()` function, return a plain CSS function string with the
  name `"opacity"` and the argument `$color`.

* Otherwise, if `$color` is not a color, throw an error.

* Return the alpha channel of `$color` as a unitless number.

[special number]: ../functions.md#special-number

### `blackness()`

```
blackness($color)
```

* If `$color` is not a color, throw an error.

* Return a number with unit `%` between `0%` and `100%` (inclusive) such that:

  * `hwb(hue($color), whiteness($color), blackness($color))` returns a color with
    the same red, green, and blue channels as `$color`.

  * `whiteness($color) + blackness($color) <= 100%`.

  > The specific number returned here is left purposefully open-ended to allow
  > implementations to pursue different strategies for representing color
  > values. For example, one implementation may eagerly convert all colors to
  > RGB channels and convert back when `whiteness()` or `blackness()` is called,
  > where another may keep around their original HWB values and return those
  > as-is.

### `blue()`

```
blue($color)
```

This function is also available as a global function named `blue()`.

### `change()`

```
change($color,
  $red: null, $green: null, $blue: null,
  $hue: null, $saturation: null, $lightness: null,
  $whiteness: null, $blackness: null,
  $alpha: null)
```

This function is also available as a global function named `change-color()`.

* If `$color` isn't a color, throw an error.

* If `$alpha` is null, let `alpha` be `$color`'s alpha channel. Otherwise:

  * If `$alpha` isn't a number, throw an error.

  * If `$alpha` has units other than `%`, throw an error.

  * If `$alpha` has unit `%`, set it to `math.div($alpha, 100%)`.

  * If `$alpha < 0` or `$alpha > 1`, throw an error.

  * Let `alpha` be `$alpha` clamped between 0 and 1.

* If `$hue` isn't a number or null, throw an error.

* If any of `$red`, `$green`, or `$blue` aren't null:

  * If any of `$hue`, `$saturation`, `$lightness`, `$whiteness`, or `$blackness`
    aren't null, throw an error.

  * If any of `$red`, `$green`, or `$blue` aren't either null or numbers
    between 0 and 255 (inclusive), throw an error.

  * Let `red` be `$color`'s red channel if `$red` is null or `$red` without
    units otherwise.

  * Let `green` be `$color`'s green channel if `$green` is null or `$green`
    without units otherwise.

  * Let `blue` be `$color`'s blue channel if `$blue` is null or `$blue` without
    units otherwise.

  * Return a color with `red`, `green`, `blue`, and `alpha` as the red, green,
    blue, and alpha channels, respectively.

* Otherwise, if either `$saturation` or `$lightness` aren't null:

  * If either `$whiteness` or `$blackness` aren't null, throw an error.

  * If either `$saturation` or `$lightness` aren't either null or numbers
    between 0 and 100 (inclusive), throw an error.

  * Let `hue` be the result of calling `hue($color)` if `$hue` is null, or
    `$hue` otherwise.

  * Let `saturation` be the result of calling `saturation($color)` if
    `$saturation` is null, or `$saturation` otherwise.

  * Let `lightness` be the result of calling `lightness($color)` if
    `$lightness` is null, or `$lightness` otherwise.

  * Return the result of calling [`hsl()`][] with `hue`, `saturation`,
    `lightness`, and `alpha`.

* Otherwise, if either `$hue`, `$whiteness`, or `$blackness` aren't null:

  * If either `$whiteness` or `$blackness` aren't either null or numbers with
    unit `%` between `0%` and `100%` (inclusive), throw an error.

  * Let `hue` be the result of calling `hue($color)` if `$hue` is null, or
    `$hue` otherwise.

  * Let `whiteness` be the result of calling `whiteness($color)` if `$whiteness`
    is null, or `$whiteness` otherwise.

  * Let `blackness` be the result of calling `blackness($color)` if `$blackness`
    is null, or `$blackness` otherwise.

  * Return the result of calling `hwb()` with `hue`, `whiteness`, `blackness`,
    and `alpha`.

* Otherwise, return a color with the same red, green, and blue channels as
  `$color` and `alpha` as its alpha channel.

### `complement()`

```
complement($color)
```

This function is also available as a global function named `complement()`.

### `darken()`

```
darken($color, $amount)
```

* Throw an error.

  > This error should indicate that the user should use the [`adjust()`
  > function](#adjust) instead.

### `desaturate()`

```
desaturate($color, $amount)
```

* Throw an error.

  > This error should indicate that the user should use the [`adjust()`
  > function](#adjust) instead.

### `fade-in()`

```
fade-in($color, $amount)
```

* Throw an error.

  > This error should indicate that the user should use the [`adjust()`
  > function](#adjust) instead.

### `fade-out()`

```
fade-out($color, $amount)
```

* Throw an error.

  > This error should indicate that the user should use the [`adjust()`
  > function](#adjust) instead.

### `grayscale()`

```
grayscale($color)
```

This function is also available as a global function named `grayscale()`.

* If `$color` is a number or a [special number], and this function is called as
  a global function, return a plain CSS function string with the name
  `"grayscale"` and the argument `$color`.

* Otherwise, if `$color` is not a color, throw an error.

* Return a color with the same hue and lightness as `$color` but with saturation
  0.

### `green()`

```
green($color)
```

This function is also available as a global function named `green()`.

### `hue()`

```
hue($color)
```

This function is also available as a global function named `hue()`.

### `hwb()`

* ```
  hwb($hue, $whiteness, $blackness, $alpha: 1)
  ```

  * If any of `$hue`, `$whiteness`, `$blackness`, or `$alpha` aren't numbers,
    throw an error.

  * Let `hue` be the result of [converting] `$hue` to `deg` allowing unitless.

  * If either of `$whiteness` or `$blackness` don't have unit `%` or aren't
    between `0%` and `100%` (inclusive), throw an error.

  * Let `whiteness` be `$whiteness / 100%`.

  * Let `blackness` be `$blackness / 100%`.

  * If `whiteness + blackness > 1`:

    * Set `whiteness` to `whiteness / (whiteness + blackness)`.

    * Set `blackness` to `blackness / (whiteness + blackness)`.

  * Let `red`, `green`, and `blue` be the result of converting `hue`,
    `whiteness`, and `blackness` [to RGB][].

  * Set `red`, `green`, and `blue` to their existing values multiplied by 255
    and rounded to the nearest integers.

  * Let `alpha` be the result of [percent-converting][] `$alpha` with a `max` of 1.

  * Return a color with the given `red`, `green`, `blue`, and `alpha` channels.

  [converting]: ../types/number.md#converting-a-number-to-a-unit
  [percent-converting]: #percent-converting-a-number

* ```
  hwb($channels)
  ```

  * If `$channels` is not an unbracketed space-separated list, throw an error.

  * If `$channels` does not includes exactly three elements, throw an error.

  * Let `hue` and `whiteness` be the first two elements of `$channels`

  * If the third element of `$channels` has preserved its status as
    two slash-separated numbers:

    * Let `blackness` be the number before the slash and `alpha` the number
      after the slash.

  * Otherwise:

    * Let `blackness` be the third element of `$channels`.

  * Call `hwb()` with `hue`, `whiteness`, `blackness`, and `alpha` (if it's
    defined) as arguments and return the result.

### `ie-hex-str()`

```
ie-hex-str($color)
```

This function is also available as a global function named `ie-hex-str()`.

### `invert()`

```
invert($color, $weight: 100%)
```

This function is also available as a global function named `invert()`.

* If `$color` is a number or a [special number], and this function is called as
  a global function:

  * If `$weight` is not `100%`, throw an error.

  * Return a plain CSS function string with the name `"invert"` and the argument
    `$color`.

* If `$color` is not a color, throw an error.

* Let `inverse` be a color with each RGB channel equal to 255 minus `$color`'s
  corresponding channel.

* Call [`mix()`](#mix) with `$color`, `inverse`, and `$weight` and return the
  result.

### `lighten()`

```
lighten($color, $amount)
```

* Throw an error.

  > This error should indicate that the user should use the [`adjust()`
  > function](#adjust) instead.

### `lightness()`

```
lightness($color)
```

This function is also available as a global function named `lightness()`.

### `mix()`

```
mix($color1, $color2, $weight: 50%)
```

* If either `$color1` or `$color2` is not a color, throw an error.

* If `$weight` isn't a number with unit `%`, throw an error.

* Let `normal-weight` be `$weight / 50% - 1`.

* Let `alpha1` and `alpha2` be the alpha values of `$color1` and `$color2`
  respectively.

* Let `alpha-distance` be `alpha1 - alpha2`.

* Let `weight-by-distance` be `normal-weight * alpha-distance`.

* If `weight-by-distance == -1`, let `combined-weight1` be `normal-weight`.

* Otherwise:

  * Let `weight-distance-sum` be `normal-weight + alpha-distance`.

  * Let `combined-weight1` be `weight-distance-sum / (1 + weight-by-distance)`.

* Let `weight1` be `(combined-weight1 + 1) / 2`.

* Let `weight2` be `1 - weight1`.

* Let `red1` and `red2` be the red channels of `$color1` and `$color2`
  respectively.

* Let `red` be `red1 * weight1 + red2 * weight2`.

* Let `green1` and `green2` be the green channels of `$color1` and `$color2`
  respectively.

* Let `green` be `green1 * weight1 + green2 * weight2`.

* Let `blue1` and `blue2` be the blue channels of `$color1` and `$color2`
  respectively.

* Let `blue` be `blue1 * weight1 + blue2 * weight2`.

* Let `alpha` be `alpha1 * weight-scale + alpha2 * (1 - weight-scale)`.

* Return a color with the given `red`, `green`, and `blue` channels, and `alpha`
  value.

### `opacify()`

```
opacify($color, $amount)
```

* Throw an error.

  > This error should indicate that the user should use the [`adjust()`
  > function](#adjust) instead.

### `red()`

This function is also available as a global function named `red()`.

```
red($color)
```

This function is also available as a global function named `mix()`.

### `saturate()`

This function is also available as a global function named `saturate()`.

* ```
  saturate($amount)
  ```

  * If this function is not called as a global function, throw an error.

    > This error should indicate that the user should use the [`adjust()`
    > function](#adjust) instead.

  * If `$amount` is not a number or a [special number], throw an error.

  * Return a plain CSS function string with the name `"saturate"` and the
    argument `$amount`.

* ```
  saturate($color, $amount)
  ```

  * Throw an error.

    > This error should indicate that the user should use the [`adjust()`
    > function](#adjust) instead.

### `saturation()`

```
saturation($color)
```

This function is also available as a global function named `saturation()`.

### `scale()`

```
scale($color,
  $red: null, $green: null, $blue: null,
  $saturation: null, $lightness: null,
  $whiteness: null, $blackness: null,
  $alpha: null)
```

This function is also available as a global function named `scale-color()`.

* If `$color` isn't a color, throw an error.

* Let `alpha` be `$color`'s alpha channel.

* If `$alpha` isn't null, set `alpha` to the result of [scaling][] `alpha` by
  `$alpha` with `max` 1.

  [scaling]: #scaling-a-number

* If any of `$red`, `$green`, or `$blue` aren't null:

  * If any of `$saturation`, `$lightness`, `$whiteness`, or `$blackness` aren't
    null, throw an error.

  * Let `red`, `green`, and `blue` be `$color`'s red, green, and blue channels.

  * If `$red` isn't null, set `red` to the result of [scaling][] `red` by `$red`
    with `max` 255.

  * If `$green` isn't null, set `green` to the result of [scaling][] `green` by
    `$green` with `max` 255.

  * If `$blue` isn't null, set `blue` to the result of [scaling][] `blue` by `$blue`
    with `max` 255.

  * Return a color with `red`, `green`, `blue`, and `alpha` as the red, green,
    blue, and alpha channels, respectively.

* Otherwise, if either `$saturation` or `$lightness` aren't null:

  * If either `$whiteness` or `$blackness` aren't null, throw an error.

  * Let `hue`, `saturation`, and `lightness` be the result of calling
    `hue($color)`, `saturation($color)`, and `lightness($color)` respectively.

  * If `$saturation` isn't null, set `saturation` to the result of [scaling][]
    `saturation` by `$saturation` with `max` `100%`.

  * If `$lightness` isn't null, set `lightness` to the result of [scaling][]
    `lightness` by `$lightness` with `max` `100%`.

  * Return the result of calling [`hsl()`][] with `hue`, `saturation`,
    `lightness`, and `alpha`.

* Otherwise, if either `$hue`, `$whiteness`, or `$blackness` aren't null:

  * Let `hue`, `whiteness`, and `blackness` be the result of calling
    `hue($color)`, `whiteness($color)`, and `blackness($color)` respectively.

  * If `$whiteness` isn't null, set `whiteness` to the result of [scaling][]
    `whiteness` by `$whiteness` with `max` `100%`.

  * If `$blackness` isn't null, set `blackness` to the result of [scaling][]
    `blackness` by `$blackness` with `max` `100%`.

  * Return the result of calling `hwb()` with `hue`, `whiteness`, `blackness`,
    and `alpha`.

* Otherwise, return a color with the same red, green, and blue channels as
  `$color` and `alpha` as its alpha channel.

### `transparentize()`

```
transparentize($color, $amount)
```

* Throw an error.

  > This error should indicate that the user should use the [`adjust()`
  > function](#adjust) instead.

### `whiteness()`

```
whiteness($color)
```

* If `$color` is not a color, throw an error.

* Return a number with unit `%` between `0%` and `100%` (inclusive) such that:

  * `hwb(hue($color), whiteness($color), blackness($color))` returns a color with
    the same red, green, and blue channels as `$color`.

  * `whiteness($color) + blackness($color) <= 100%`.

  > The specific number returned here is left purposefully open-ended to allow
  > implementations to pursue different strategies for representing color
  > values. For example, one implementation may eagerly convert all colors to
  > RGB channels and convert back when `whiteness()` or `blackness()` is called,
  > where another may keep around their original HWB values and return those
  > as-is.

# Compile API

> These APIs are the entrypoints for compiling Sass to CSS.

## Types

### `CompileResult`

The object returned by the compiler when a Sass compilation succeeds.

## Functions

### `compile`

Compiles the Sass file at `path`:

* If any object in `options.importers` has both `findFileUrl` and `canonicalize`
  fields, throw an error.

* Let `css` be the result of [compiling `path`] with `options.importers` as
  `importers` and `options.loadPaths` as `load-paths`. The compiler must respect
  the configuration specified by the `options` object.

  [compiling `path`]: ../spec.md#compiling-a-path

* If the compilation succeeds, return a `CompileResult` object composed as
  follows:

  * Set `CompileResult.css` to `css`.

  * Set `CompileResult.loadedUrls` to a list of unique canonical URLs of source
    files [loaded] during the compilation. The order of URLs is not guaranteed.

    [loaded]: ../modules.md#loading-a-source-file

  * If `options.sourceMap` is `true`, set `CompileResult.sourceMap` to a
    sourceMap object describing how sections of the Sass input correspond to
    sections of the CSS output.

    > The structure of the sourceMap can vary from implementation to
    > implementation.

* Otherwise, throw an `Exception`.

### `compileAsync`

Like [`compile`], but runs asynchronously.

[`compile`]: #compile

The compiler must support asynchronous plugins when running in this mode.

### `compileString`

Compiles the Sass `source`:

* If `options.importer` or any object in `options.importers` has both
  `findFileUrl` and `canonicalize` fields, throw an error.

* Let `css` be the result of [compiling a string] with:

  * `options.source` as `string`;
  * `options.syntax` as `syntax`, or "scss" if `options.syntax` is not set;
  * `options.url` as `url`;
  * `options.importer` as `importer`;
  * `options.importers` as `importers`;
  * `options.loadPaths` as `load-paths`.

  The compiler must respect the configuration specified by the `options` object.

  [compiling a string]: ../spec.md#compiling-a-string

* If the compilation succeeds, return a `CompileResult` object composed as
  follows:

  * Set `CompileResult.css` to `css`.

  * Set `CompileResult.loadedUrls` to a list of unique canonical URLs of source
    files [loaded] during the compilation. The order of URLs is not guaranteed.

    * If `options.url` is set, include it in the list.
    * Otherwise, do not include a URL for `source`.

  * If `options.sourceMap` is `true`, set `CompileResult.sourceMap` to a
    sourceMap object describing how sections of the Sass input correspond to
    sections of the CSS output.

    > The structure of the sourceMap can vary from implementation to
    > implementation.

* If the compilation fails, throw an `Exception`.

### `compileStringAsync`

Like `compileString`, but runs asynchronously.

The compiler must support asynchronous plugins when running in this mode.

# `@content` Arguments: Draft 1

## Summary

> This section is non-normative.

> are interpreted identically.

* Let `arguments` be the result of applying `invocation` to `declaration`.

  > This means `arguments` is a mapping from variable names to values. If
  > `invocation` isn't a valid invocation of `declaration`, this will throw an
  > error that should be surfaced to the user.

* If `include` has no `ContentBlock`, do nothing.

  > Exiting here rather than earlier means that `@content(value)` is an error if
  > `include` has no content block.

* Otherwise, let `scope` be a new scope that's a child of `include`'s scope.

* For each pair `variable` and `value` in `arguments`:

  * Set `variable` to `value` in `scope`.

* Evaluate `include`'s `ContentBlock` statements in `scope`.

# CSS Imports: Draft 3

This proposal covers a long-awaited Sass feature: the ability to import plain
CSS files from Sass. Although the original plan was to wait on this support
until the [module system][] was in place and support CSS imports only with
`@use`, it has become desirable to support them sooner in order to have
compatibility with the existing LibSass implementation. See
[Background](#background) for more details.

[module system]: module-system.md

Historically, the reference implementations of Sass—first Ruby Sass, then Dart
Sass—only supported importing other Sass files. However, LibSass supported
importing CSS files as well, interpreting them as though they were SCSS.
Although this technically violated the [implementation guide][]'s prohibition on
unilaterally extending the language, these CSS imports were useful and were
widely adopted in the Node.js community.

This became particularly clear when, at the language team's urging, LibSass
added [deprecation warnings][libsass#2611] for CSS imports and users were left
without a suitable replacement. The language team came together to discuss the
problem, and decided to move towards allowing CSS imports but forbidding the use
of non-CSS features in the imported files. This proposal describes the specifics
of that idea.

LibSass's behavior at time of writing is to import files with the extension
`.css` at the same precedence level as those with the `.scss` and `.sass`
extensions, and to throw an error if an import is ambiguous between a `.css`
file and a `.scss` or `.sass` file.

## Summary

> This section is non-normative.

This proposal seeks to strike a balance between preserving compatibility with
LibSass's existing behavior, and moving towards a more principled scheme for
loading CSS. This is particularly important as we intend to allow `@use` to load
CSS files without Sass features, so we want the existing CSS loading support to
be as similar as possible.

Locating CSS files for import works similarly under this proposal as it does in
LibSass currently: a relative `.css` file takes precedence over files with any
extension on the load path, a `.css` file earlier on the load path takes
precedence over a file with any extension later on the load path, and `foo.css`
takes precedence over `index/foo.scss`.

The only difference in loading scheme occurs when an import is ambiguous between
a `.css` file and a `.scss` or `.sass` file at the same path. LibSass currently
produces an error here, but in order to maximize compatibility with existing
Dart Sass (and Ruby Sass) behavior, this proposal has the `.scss` or `.sass`
file taking precedence. This is not a breaking change to LibSass's behavior,
since it only applies in situations that would previously have produced an
error.

This proposal diverges significantly from LibSass in parsing the imported CSS
files, though: it forbids all use of SCSS features in the parsed files. Most
SCSS features produce errors (rather than compiling to plain, likely-invalid
CSS) in order to help users who accidentally wrote SCSS in their CSS realize
what's going wrong. However, features like `@import` that overlap with plain CSS
continue to be rendered as CSS.

In order to avoid a sudden backwards-incompatible change in LibSass, this also
includes a proposal for a set of deprecation warnings that can be added to
LibSass's existing behavior to steer users away from using Sass features in
their imported CSS without entirely breaking their build process.

**D**

# Deep Merge Order: Draft 1

This proposal changes the ordering of maps returned by `map.deep-merge()` to
match that returned by `map.merge()`.

## Background

> This section is non-normative.

When `map.deep-merge()` was first discussed in [issue 1739] and later [added to
the spec], their ordering wasn't explicitly discussed. In practice, the ordering
implied by the original specification put any keys that appeared in both maps at
the end of the result, in the order they appeared in `$map2`. This was different
than the ordering produced by the `map.merge()` function in a way that confused
users.

## Summary

> This section is non-normative.

This proposal changes the `map.deep-merge()` function to match the ordering of
`map.merge()`, in which all keys in `$map1` appear in the result the same order
they did in `$map1` (whether or not they're in `$map2`), followed by all keys
that are only in `$map2` in the same relative order as in `$map2`. For example:

* `map.deep-merge((a: 1, b: 1), (b: 2, c: 2))` produces `(a: 1, b: 2, c: 2)` in
  both the current spec and this proposal.

* `map.deep-merge((a: 1, b: 1), (a: 2, c: 2))` produces `(b: 1, a: 2, c: 2)` in
  the current spec but `(a: 2, b: 1, c: 2)` in this proposal.

### Design Decisions

#### Whether to Specify Order

Rather than change the specified order of map entries, we considered updating
the specification to explicitly make the order an implementation detail. This
would have the advantage of allowing implementations to choose a more performant
ordering in the future if, for example, they used an immutable representation of
maps that could re-use internal data structures.

However, because in practice there's currently only one recommended
implementation of Sass, its behavior would still end up being the *de facto*
standard. In addition, users clearly desire an intuitive map ordering and
there's not clear evidence that any performance gains would be substantial
enough to warrant breaking that intuition.

## Functions

Replace the definition of the `deep-merge()` function in the `sass:map` built-in
module with the following definition:

### `map.deep-merge()`

```
deep-merge($map1, $map2)
```

* If `$map1` and `$map2` are not maps, throw an error.

* Let `merged` be an empty map.

* For each `old-key`/`old-value` pair in `$map1`:

  * If `$map2` has a key `new-key` that's `==` to `old-key`:

    * Let `new-value` be the value associated with `new-key` in `$map2`.

    * If both `old-value` and `new-value` are maps, set `new-value` to the
      result of calling `deep-merge()` with `old-value` and `new-value`.

    * Associate `old-key` with `new-value` in `merged`.

  * Otherwise, associate `old-key` with `old-value` in `merged`.

* For each `new-key`/`new-value` pair in `$map2`:

  * If `merged` doesn't have key that's `==` to `new-key`, associate `new-key`
    with `new-value` in `merged`.

* Return `merged`.

> Note that the order of keys in each merged map is the same as the keys in
> `$map1`, with any new keys from `$map2` added at the end in the same order
> they appear in `$map2`. This matches the ordering of the `merge()` function.

## Deprecation Process

This is technically a breaking change, since stylesheets could be relying on the
current ordering of `map.deep-merge()`. However, there are several reasons why a
standard deprecation process isn't a good fit here:

* There isn't a good way to deprecate the old behavior non-disruptively. If we
  support the old behavior as written, the new behavior would need to be awkward
  to use.

* The breaking change is small. Output ordering is not a core part of
  `map.deep-merge()`'s behavior and is unlikely to be something anyone is
  relying on in practice.

* `map.deep-merge()` is relatively young, which means that there are not as many
  Sass stylesheets using it (and thus relying on every aspect of its behavior)
  as there are using older behaviors.

* The change is a clear improvement in terms of consistency with `map.merge()`
  and with merge behavior in other languages. It could even be argued as a bug
  fix. Any pain caused by this change is likely to be mitigated by the pain due
  to confusing ordering it will prevent.

## Draft 3

* Expand the proposal to cover the embedded protocol as well, renaming it
  accordingly.

* Fix spec to only ever emit warnings for incompatible deprecation flags, rather
  than errors (this was already stated in the summary, but the actual
  specification had not been updated to match).

## Draft 2

* Remove the status from the specified type of each deprecation.

## Draft 1.1

* Add `duplicate-var-flags` as a deprecation.

## Draft 1

* Initial draft.

## Definitions

### Basename

The **basename** of a URL is the final component of that URL's path.

### Dirname

The **dirname** of a URL is the prefix of that URL up to, but not including, the
beginning of its [basename](#basename).

### Canonical URL of a Stylesheet

The **canonical URL** of a stylesheet is a URL associated with that stylesheet
that represents the location from which it was loaded.

The canonical URL for stylesheets are set by the algorithms for
[loading an import](#loading-an-import) and
[loading an entrypoint path](#loading-an-entrypoint-path).

## Semantics

This proposal defines a new algorithm for
[handling an `@import` rule](#handling-an-import-rule). It is intended to
replace the existing algorithm. I've also taken this opportunity to more
explicitly specify the behavior of `@import` rules.

This proposal omits importers, which while important, are out of scope.
Importers should be considered to effectively replace the algorithm for
[loading an import](#loading-an-import), possibly with another algorithm that
calls the existing algorithm to handle filesystem imports.

> Other than support for importing plain CSS, this algorithm is designed to
> accurately capture the current behavior of Ruby Sass and Dart Sass (when only
> filesystem importers are involved). It closely matches the implementation of
> Dart Sass, whereas Ruby Sass treats imported URLs as plain strings and
> operates on filesystem paths rather than `file:` URLs.

This proposal also defines a new algorithm for
[loading an entrypoint path](#loading-an-entrypoint-path), which is also
intended to replace the existing algorithm. This defines how a Sass
implementation should compile a file passed on the command line or through a
programming language API.

### Handling an Import Rule

To evaluate an `@import` rule:

* For each of that rule's arguments:

  * If any of the following are true, the argument is considered "plain CSS":

    * The imported URL begins with `http://` or `https://`.
    * The imported URL ends with `.css`.
    * The imported URL is syntactically defined as a `url()`.
    * The argument has a media query and/or a supports query.

    > Note that this means that imports that explicitly end with `.css` will
    > continue to be treated as plain CSS `@import` rules, rather than importing
    > stylesheets as CSS.

  * If the argument is "plain CSS":

    * Evaluate any interpolation it contains.

    * Add an `@import` with the evaluated string, media query, and/or supports
      query to the CSS AST.

  * Otherwise, let `stylesheet` be the result of
    [loading the imported string](#loading-an-import).

    If this returns null, throw an error.

  * If an AST with the same [canonical URL][] as `stylesheet` is currently being
    evaluated, throw an error.

  * Evaluate `stylesheet` in the global scope.

  [canonical URL]: #canonical-url-of-a-stylesheet

### Loading an Import

This algorithm takes a string, `argument`, and returns a Sass stylesheet.

* Let `root` be the current stylesheet's [canonical URL][] if its scheme is
  `file`, otherwise null.

* Let `bases` be a list beginning with `root` if it's non-null, followed by the
  absolute `file:` URLs of all import paths.

* For each `base` in `bases`:

  * Let `url` be the result of [parsing `argument` as a URL][] with `base` as
    the base URL.

    If this returns a failure, throw that failure.

  * If `url`'s scheme is not `file`, return null.

  * Let `resolved` be the result of [resolving `url`](#resolving-a-file-url).

  * If `resolved` is null:

    * Let `index` be [`dirname(url)`](#dirname) + `"index/"` +
      [`basename(url)`](#basename).

    * Set `resolved` to the result of
      [resolving `index`](#resolving-a-file-url).

  * If `resolved` is still null, continue to the next loop.

  * Let `text` be the contents of the file at `resolved`.

  * Let `ast` be:

    * The result of parsing `text` as SCSS if `resolved` ends in `.scss`.
    * The result of parsing `text` as the indented syntax if `resolved` ends in
      `.sass`.
    * The result of [parsing `text` as CSS](#parsing-text-as-css) if `resolved` ends
      in `.css`.

    > The algorithm for [resolving a `file:` URL](#resolving-a-file-url)
    > guarantees that `resolved` will have one of these extensions.

  * Return `ast` with the [canonical URL][] `resolved`.

* Return null.

### Resolving a `file:` URL

This algorithm takes a URL, `url`, whose scheme must be `file` and returns
either another URL that's guaranteed to point to a file on disk or null.

* If `url` ends in `.scss` or `.sass`, return the result of
  [resolving `url` for partials][resolving for partials].

* Let `sass` be the result of
  [resolving `url` + `".sass"` for partials][resolving for partials].

* Let `scss` be the result of
  [resolving `url` + `".scss"` for partials][resolving for partials].

* If neither `sass` nor `scss` are null, throw an error.

* If exactly one of `sass` and `scss` is null, return the other one.

* Return the result of
  [resolving `url` + `".css"` for partials][resolving for partials].

[resolving for partials]: #resolving-a-file-url-for-partials

### Resolving a `file:` URL for partials

This algorithm takes a URL, `url`, whose scheme must be `file` and returns
either another URL that's guaranteed to point to a file on disk or null.

* If `url`'s [basename](#basename) begins with `"_"`:

  * If a file exists on disk at `url`, return `url`.

    Otherwise return null.

* Let `partial` be [`dirname(url)`](#dirname) + `"_"` +
  [`basename(url)`](#basename).

* If a file exists on disk at both `url` and `partial`, throw an error.

* If a file exists on disk at `url`, return `url`.

* If a file exists on disk at `partial`, return `partial`.

* Return null.

### Parsing text as CSS

This algorithm takes a string, `text`, and returns a Sass abstract syntax tree.

> This algorithm is designed with two goals in mind:
>
> 1. CSS imported from Sass should be as compatible with standard CSS as
>    possible. In some cases we err even more towards CSS compatibility than
>    SCSS does, because the CSS being imported is likely not written by someone
>    who knows to avoid things that Sass interprets specially (such as certain
>    `@import` URLs).
>
> 2. We should provide clear and eager feedback to users who accidentally try to
>    use Sass features in CSS imports. We don't allow these features, and we
>    want users to know that through error messages rather than digging through
>    generated CSS only to find that Sass features were passed through
>    unmodified. This is a particular concern because LibSass has historically
>    allowed the use of Sass features in CSS imports.

The algorithm for parsing text as CSS works like parsing text as SCSS, with some
modifications. The following productions should produce errors:

* Any at-rules that are defined in Sass and not in plain CSS. At the time of
  writing, this means:

  * `@at-root`
  * `@content`
  * `@debug`
  * `@each`
  * `@error`
  * `@extend`
  * `@for`
  * `@function`
  * `@if`
  * `@include`
  * `@mixin`
  * `@return`
  * `@warn`
  * `@while`

* An `@import` that contains interpolation in the `url()`, the media query, or
  the supports query.

* An `@import` that appears within a style rule or at-rule.

* An `@import` with more than one argument.

* A declaration followed by an open curly brace (that is, a nested declaration).

* A style rule appearing within another style rule.

* The parent selector `&`, either in a selector or a declaration value.

* Placeholder selectors.

* All built-in functions, *excluding* the following:

  * `rgb()`
  * `rgba()`
  * `hsl()`
  * `hsla()`
  * `grayscale()`
  * `invert()`
  * `alpha()`
  * `opacity()`

  > Note that user-defined functions are *not* forbidden, whether they're
  > defined using `@function` or through a host language API.

* Any function called with keyword arguments or variable-length arguments.

* Interpolation anywhere its contents would be evaluated. At the time of
  writing, this means:

  * At-rule values (including `@media` queries)
  * Declaration names
  * Declaration values
  * Style rule selectors

* All SassScript operations *except for*:

  * `/`
  * `not`
  * `or`
  * `and`

  > Note that although unary `-` is forbidden, the `-` that appears at the
  > beginning of a number literal is part of that literal and thus allowed.

* Parentheses in declaration values that aren't part of a CSS production.

* Map literals.

* The empty list literal `(,)`.

* Uses or declarations of Sass variables.

* `//`-style ("silent") comments.

In addition, some productions should be parsed differently than they would be in
SCSS:

* All functions that don't produce errors should be parsed as plain CSS
  functions, regardless of whether a Sass function with that name is defined.

* All `@import`s that don't produce errors should be parsed as static CSS
  imports.

* The tokens `not`, `or`, `and`, and `null` should be parsed as unquoted
  strings.

  > The `/` operation should be parsed as normal. Because variables,
  > parentheses, functions that return numbers, and all other arithmetic
  > expressions are disallowed, it will always compile to slash-separated values
  > rather than performing division.

### Loading an entrypoint path

This algorithm takes a string, `path`, that represents a file on the filesystem.
It returns a Sass stylesheet.

* Let `url` be the absolute `file:` URL corresponding to `path`.

* Let `text` be the contents of the file at `path`.

* Let `ast` be:

  * The result of parsing `text` as the indented syntax if `url` ends in
    `.sass`.
  * The result of [parsing `text` as CSS](#parsing-text-as-css) if `url` ends in
    `.css`.
  * The result of parsing `text` as SCSS otherwise.

  > The algorithm for [resolving a `file:` URL](#resolving-a-file-url)
  > guarantees that `resolved` will have one of these extensions.

* Return `ast` with the [canonical URL][] `url`.

## Deprecation process

Because Dart Sass has no existing behavior for CSS imports–they'll just fail to
find a file to import–it can just add the new behavior without need for a
deprecation process. But LibSass parses its CSS imports as SCSS, which means it
allows Sass features that this proposal forbids. In order to help users migrate
away from using these features without a sudden breakage, LibSass should
continue to parse CSS imports as SCSS, while emitting deprecation warnings for:

* All productions that would produce an error according to the algorithm for
  [parsing text as CSS](#parsing-text-as-css).

* All invocations of user-defined functions, whether they're defined using
  `@function` or through a host language API.

* The `not`, `or`, and `and` operations.

* The value `null`.

Where possible, LibSass should avoid emitting multiple deprecation warnings for
the same expression.

> For example, if a user writes `-$var`, producing a warning for the use of the
> variable already makes it clear that Sass features are in use. There's no
> additional value in emitting a warning for the unary minus operation.

These deprecation warnings should indicate that Sass features will cease to be
allowed in files named `.css` in the future, and suggest that users either use
plain CSS or rename their files to `.scss`.

# Deprecations API: Draft 3

We recently added support to Dart Sass that allowed users to opt in to
treating deprecation warnings as errors (on a per-deprecation basis), as
well as opting in early to certain future deprecations. This is currently
supported on the command line and via the Dart API, but we'd like to extend
this support to the JS API as well.

We would also like to add support for silencing a particular deprecation's
warnings, primarily to enable a gentler process for deprecating `@import`.

## Summary

> This section is non-normative.

This proposal adds a new `Deprecation` interface and `Version` class to the
JS API, three new optional properties on `Options` (`fatalDeprecations`,
`silenceDeprecations`, and `futureDeprecations`), a new parameter on
`Logger.warn` (`options.deprecationType`) two type aliases (`DeprecationOrId`
and `DeprecationStatus`) and a new object `deprecations` that contains the
various `Deprecation` objects.

All deprecations are specified in `deprecations`, and any new deprecations
added in the future (even those specific to a particular implementation)
should update the specification accordingly. Deprecations should never be
removed from the specification; when the behavior being deprecated is removed
(i.e. there's a major version release), the deprecation status should be
changed to obsolete, but remain in the specification.

Every `Deprecation` has a unique `id`, one of four `status` values, and
(optionally) a human-readable `description`. Depending on the status, each
deprecation may also have a `deprecatedIn` version and an `obsoleteIn`
version that specify the compiler versions the deprecation became active
and became obsolete in, respectively.

### Design Decisions

#### Exposing the Full `Deprecation` Interface

One alternative to specifying a full `Deprecation` interface is to just have
the relevant APIs take in string IDs. We considered this, but concluded that
each deprecation has additional metadata that users of the API may wish to
access (for example, a bundler may wish to surface the `description` and
`deprecatedIn` version to its users).

#### Formally Specifying the Deprecations

We chose to make the list of deprecations part of the specification itself,
as this ensures that the language-wide deprecations are consistent across
implementations. However, if an implementation wishes to add a deprecation
that applies only to itself, it may still do so.

Additionally, while a deprecation's status is part of the specification, we
chose to leave the `deprecatedIn` and `obsoleteIn` versions of each
deprecation out of the specification. As the two current implementers of this
API are both based on Dart Sass, these versions are *currently* consistent
across implementations in practice, potential future implementers should not
need to be tied to Dart Sass's versioning.

#### Warnings for Invalid Deprecations and Precedence of Options

Whenever potentially invalid sets of deprecations are passed to any of the
options, we choose to emit warnings rather than errors, as the status of
each deprecation can change over time, and users may share a configuration
when compiling across multiple implementations/versions whose dependency
statuses may not be in sync.

The situations we chose to warn for are:

* an invalid string ID.

  This is disallowed by the API's types, but may still occur at runtime,
  and should be warned for accordingly.

* a future deprecation is passed to `fatalDeprecations` but not
  `futureDeprecations`.

  In this scenario, the future deprecation will still be treated as fatal,
  but we want to warn users to prevent situations where a user tries to
  make every deprecation fatal and ends up including future ones too.

* an obsolete deprecation is passed to `fatalDeprecations`.

  If a deprecation is obsolete, that means the breaking change has already
  happened, so making it fatal is a no-op.

* passing anything other than an active deprecation to `silenceDeprecations`.

  This is particularly important for obsolete deprecations, since otherwise
  users may not be aware of a subtle breaking change for which they were
  previously silencing warnings. We also warn for passing
  `Deprecation.userAuthored`, since there's no way to distinguish between
  different deprecations from user-authored code, so silencing them as a
  group is inadvisable. Passing a future deprecation here is either a no-op,
  or cancels out passing it to `futureDeprecations`, so we warn for that as
  well.

* passing a non-future deprecation to `futureDeprecations`.

  This is a no-op, so we should warn users so they can clean up their
  configuration.

## Types

#### `fatalDeprecations`

A set of deprecations to treat as fatal.

If a deprecation warning of any provided type is encountered during compilation,
the compiler must error instead.

The compiler should convert any string passed here to a `Deprecation` by
indexing `deprecations`. If an invalid deprecation ID is passed here, the
compiler must emit a warning. If a version is passed here, it should be treated
equivalently to passing all active deprecations whose `deprecatedIn` version is
less than or equal to it.

The compiler must emit a warning if a future deprecation that's not also
included in `futureDeprecations` or any obsolete deprecation is included here.

If a deprecation is passed both here and to `silenceDeprecations`, a warning
must be emitted, but making the deprecation fatal must take precedence.

#### `silenceDeprecations`

A set of active deprecations to ignore.

If a deprecation warning of any provided type is encountered during compilation,
the compiler must ignore it.

The compiler should convert any string passed here to a `Deprecation` by
indexing `Deprecations`. If an invalid deprecation ID is passed here, the
compiler must emit a warning.

The compiler must emit a warning if any non-active deprecation is included here.
If a future deprecation is included both here and in `futureDeprecations`, then
silencing it takes precedence.

#### `futureDeprecations`

A set of future deprecations to opt into early.

For each future deprecation provided here, the compiler must treat that
deprecation as if it is active, emitting warnings as necessary (subject to
`fatalDeprecations` and `silenceDeprecations`).

The compiler should convert any string passed here to a `Deprecation` by
indexing `Deprecations`. If an invalid deprecation ID is passed here, the
compiler must emit a warning.

If a deprecation warning of any provided type is encountered during compilation,
the compiler must respond with a `CompileFailure` instead of a `CompileSuccess`.

The compiler must emit an event of type `LogEventType.WARNING` if any of the
following is true:

* an invalid deprecation ID is passed
* an obsolete deprecation ID is passed
* a future deprecation ID is passed that is not also passed to
  `future_deprecation`
* a deprecation ID is passed both here and to `silence_deprecation`
  (making it fatal takes precedence)

#### `silence_deprecation`

A set of deprecation IDs to ignore.

If a deprecation warning of any provided type is encountered during compilation,
the compiler must ignore it.

The compiler must emit an event of type `LogEventType.WARNING` if an invalid
deprecation ID or any non-active deprecation ID is passed here.

If a future deprecation ID is passed both here and to `future_deprecation`, then
silencing it takes precedence.

#### `future_deprecation`

A set of future deprecations IDs to opt into early.

For each future deprecation ID provided here, the compiler must treat that
deprecation as if it is active, emitting warnings as necessary (subject to
`fatal_deprecation` and `silence_deprecation`).

The compiler must emit an event of type `LogEventType.WARNING` if an invalid
deprecation ID or any non-future deprecation ID is passed here.

**E**

## Draft 1.1

* No longer mark `CanonicalizeResponse.result`, `ImportResponse.result`, or
  `FileImportResponse.result` as optional at the language level since explicitly
  optional `oneof`s aren't supported.

* Document design decisions for cross-compilation state and outbound request
  IDs.

## Draft 1

* Initial draft.

# Embedded Protocol Version 2: Draft 1.1

## Background

> This section is non-normative.

Since the [embedded Sass protocol] was first released, a number of improvements
have been suggested by embedded host authors that would either be
backwards-incompatible, or would require cumbersome redundancies in the protocol
to make them backwards-compatible.

[embedded Sass protocol]: ../spec/embedded-protocol.md

In the meantime, to provide an efficient Sass CLI along with embedded hosts, the
Dart Sass embedded compiler was merged into the main Dart Sass executable.
Because this is effectively also a breaking change in how hosts obtain and
invoke the compiler, it seemed like a good opportunity to make the other
breaking protocol changes that had been piling up.

## Summary

> This section is non-normative.

This proposal makes three breaking changes to the embedded Sass protocol:

* Replace the compilation IDs in the protobufs with one directly encoded in the
  wire protocol so that compiler implementations can efficiently route requests
  to different workers without reparsing messages.

* Use optional fields as defined in protocol buffers 3.15.0 instead of treating
  default field values as absent.

* Move `CompileSuccess.loaded_urls` to `CompileResponse.loaded_urls` so it's
  available even when compilation fails.

### Design Decisions

#### Length Before Compilation ID

This proposal places the compilation ID for each request *after* the length. The
length is defined as the length of the protocol buffer plus the length of the
compilation ID.

Another possible approach would be to have the compilation ID first, then the
length, and have the length list only the length of the protocol buffer itself.
This approach would have the benefit of being somewhat easier to decode, since
the only length-delimited chunk of input would be parsed as a unit by the
protocol buffer parser rather than needing to be sliced out of the (compilation
ID, protocol buffer) pair.

However, the embedded protocol is intended to be transport-independent, and not
all transports will necessarily require an explicit length encoding at all.
Although today all use of the embedded protocol is over stdin/stdout which
requires a length delimiter, it's likely that we'll eventually add WASM support
as well which won't.

We want to make it easy for the same compiler and host codebases to support
multiple transports. Making the length-delimiting process a layer that can be
transparently applied to the same message blobs that are used in other transport
layers makes it easier for the underlying endpoint logic to just work with those
blobs regardless of where they came from.

For languages that can parse protocol buffers from a subsequence of binary
content without copying, it should be easy to slice off the compilation ID and
parse the remaining binary data. For those that can't, the true length of the
protocol buffer can be determined by taking the given length and subtracting the
length of the compilation ID, which is given by the following table:

| compilation ID          | length in bytes |
|-------------------------|-----------------|
| [0, 128)                | 1               |
| [128, 16384)            | 2               |
| [16384, 2097152)        | 3               |
| [2097152, 268435456)    | 4               |
| [268435456, 4294967296) | 5               |

#### Cross-Compilation State

We have a [future goal] to (optionally) share state *across* compilations, to
more efficiently compile projects with many small entrypoints where the bulk of
the complexity is in static shared libraries. If/when we support this, there
could be two broad implementation strategies for a compiler with worker-based
parallelism like Dart Sass:

1. Run each compilation in a separate worker and keep shared state in one or
   more shared workers. This allows for more parallelism between compilations,
   but requires state (or requests for information about state) to be serialized
   across worker boundaries, adding a potentially substantial amount of overhead.

2. Run all compilations that share state in a single worker, allowing
   zero-overhead access to the shared state but requiring those compilations to
   run serially rather than in parallel.

It's not clear which of these will be more efficient in which circumstances,
although option 1 is certainly substantially more complex to implement. The
protocol as listed here—without an explicit `CompilationRequest.id` field—is
only compatible with option 1, assuming that each compilation ID corresponds to
a separate worker as intended.

However, this isn't a fatal flaw. It would be a non-breaking change to add
`CompilationRequest.id` (and `*.compilation_id`) back later on if we decide to
support option 2. Hosts that were built to target the current version of the
protocol wouldn't set `CompilationRequest.id`, which means it would default to
zero, which will work fine since they're already ensuring each
`CompilationRequest` has a different wire-level compilation ID.

#### Outbound Request IDs

Given that each compilation is expected to run single-threaded in and of itself,
there's theoretically no more need for fields like `ImportRequest.id`. Each
compilation ID will only have one request at a time, so we could just declare
that any response with a given compilation ID is for the single outstanding
request.

However, the *expectation* that each compilation be single-threaded isn't a
*requirement*. One could imagine a multithreaded Sass compiler that actually is
capable of fielding multiple concurrent requests as it compiles independent
chunks of a given stylesheet or resolves loads eagerly. We don't want to cut off
this possibility, so we retain the outbound request IDs.

## Overview

### Packet Structure

Replace the last paragraph of the [embedded protocol overview] with:

[embedded protocol overview]: ../spec/embedded-protocol.md#overview

Each message in the embedded protocol is sent as a *packet* which contains two
values: an unsigned [varint] up to 32 bits long known as the "compilation ID",
and a protocol buffer that contains the protobuf message. For streams (like
standard input and output) that don't have built-in message boundaries, every
packet must begin with another unsigned varint indicating the length in bytes of
the remaining message (*including the compilation ID*). This matches the best
practice described in [the protocol buffer documentation].

Because JavaScript can't easily represent integers larger than 2^53 - 1, the
length may be no more than 2^53 - 1. Because it's so unlikely that this will
come up in practice, implementations are not required to verify it.

For a length-delimited stream, each packet has the following structure:

```
╔══════════╦══════════════════╗
║ varint   ║ Length           ║
╠══════════╬══════════════════╣
║ varint   ║ Compilation ID   ║
╠══════════╬══════════════════╣
║ protobuf ║ Protobuf Message ║
╚══════════╩══════════════════╝
```

## RPCs

### Type Definitions

Replace the following RPC type definitions:

* *Requests* usually include a mandatory `uint32 id` field so that the other
  endpoint can respond, except for `CompileRequest` which uses the [compilation
  ID] as its ID. All request message types end in `Request`.

  [compilation ID]: #packet-structure

* *Responses* usually include a mandatory `uint32 id` field whose value must be
  the same as their associated request's `id`, except for `CompileResponse`
  which uses the compilation ID as its ID. All response message types begin with
  the corresponding request name and end with `Response`.

### ID Requirements

Replace the paragraph that beings "Implementations must guarantee that they use
a unique `id` for every request" with:

Each endpoint must guarantee that each request's `id` doesn't match the `id` of
any other outstanding request with the same [compilation ID] from that endpoint.
The same `id` may be used for an inbound request and an outbound request, and
the same `id` may be used for two requests with different compilation IDs. The
host must similarly guarantee that a `CompileRequest`'s compilation ID doesn't
match the compilation ID of any other outstanding `CompileRequest`. The compiler
must ensure that all outbound requests' compilation IDs match that of the
`CompileRequest` that triggered its associated compilation.

The compilation ID 0 is reserved for `VersionRequest` and `VersionResponse`,
since they're not specific to any individual compilation.

The compilation ID and normal request `id` `4294967295` is reserved for [error
handling]. (This is the maximum number representable by a `uint32`.)

[error handling]: #error-handling

### Optional and Mandatory Fields

Replace the paragraphs about optional and mandatory fields with:

If a field is not optional, the the endpoint that sends that message must
guarantee that it's set to a meaningful value, and the endpoint that receives it
must reject the message if it's not set. Because protocol buffers allow all
`oneof` fields to be unset, the spec describes those that require values as
"mandatory".

## Error Handling

Append to the first paragraph:

The [compilation ID] must match the compilation ID of the request or response
that triggered the error.

## Protocol Buffer

### ID Fields

Remove the following fields:

* `CompileRequest.id`
* `CompileResponse.id`
* `LogEvent.compilation_id`
* `CanonicalizeRequest.compilation_id`
* `ImportRequest.compilation_id`
* `FileImportRequest.compilation_id`
* `FunctionCallRequest.compilation_id`

### Optional Fields

Mark the following fields as optional, and update each one's specification to
check if they're unset instead of the default values:

* `ImportSuccess.source_map_url`
* `LogEvent.span`
* `SourceSpan.end`

### Loaded URLs

Remove `CompileSuccess.loaded_urls` and add `CompileResponse.loaded_urls` with
the same specification.

# The Embedded Sass Protocol

The Embedded Sass Protocol is a bidirectional protocol for communicating between
a Sass implementation and a host environment. It allows the host environment to
invoke the Sass compiler on source files, and to define custom functions and
importers in the host language.

Sass implementations are *not* required to support the embedded protocol.
However, if they do, they must adhere to the specification given in this file
and [`embedded_sass.proto`] for the compiler endpoint.

[`embedded_sass.proto`]: embedded_sass.proto


This protocol operates between two endpoints over a bidirectional stream. One of
these endpoints, the *compiler*, is responsible for compiling Sass stylesheets
to CSS. The other, the *host*, is responsible for telling the compiler what to
compile and for providing implementations of custom importers and functions.

Messages are sent between the host and the compiler in the form of [protocol
buffers][], using a custom RPC system [defined below][]. The messages and
services that comprise this protocol are defined in [the `.proto` file][]
included in this repository. Most messages are *requests* which require the
other endpoint to produce a *response*, but some are *events* which require no
response.

[defined below]: #rpcs
[the `.proto` file]: embedded_sass.proto

In principle this protocol can work over any bidirectional stream capable of
carrying protocol buffers. However, it's expected that most hosts will invoke
the compiler as a subprocess and communicate using binary protocol buffers over
its standard input and output streams.

### Packet Structure

Each message in the embedded protocol is sent as a *packet* which contains two
values: an unsigned [varint] up to 32 bits long known as the "compilation ID",
and a protocol buffer that contains the protobuf message. For streams (like
standard input and output) that don't have built-in message boundaries, every
packet must begin with another unsigned varint indicating the length in bytes of
the remaining message (*including the compilation ID*). This matches the best
practice described in [the protocol buffer documentation].

Because JavaScript can't easily represent integers larger than 2^53 - 1, the
length may be no more than 2^53 - 1. Because it's so unlikely that this will
come up in practice, implementations are not required to verify it.

For a length-delimited stream, each packet has the following structure:

```
╔══════════╦══════════════════╗
║ varint   ║ Length           ║
╠══════════╬══════════════════╣
║ varint   ║ Compilation ID   ║
╠══════════╬══════════════════╣
║ protobuf ║ Protobuf Message ║
╚══════════╩══════════════════╝
```

## RPCs

### Type Definitions

All RPCs are wrapped in an outer message that indicates the RPC's type using [a
oneof field][]. There are two wrapper messages:


* `InboundMessage` is sent from the host to the compiler.
* `OutboundMessage` is sent from the compiler to the host.

The host must only send `InboundMessage`s to the compiler, and the compiler must
only send `OutboundMessage`s to the host.

Each wrapper message contains exactly one RPC. This protocol defines four types
of RPC:

* *Requests* usually include a mandatory `uint32 id` field so that the other
  endpoint can respond, except for `CompileRequest` which uses the [compilation
  ID] as its ID. All request message types end in `Request`.

  [compilation ID]: #packet-structure

* *Responses* usually include a mandatory `uint32 id` field whose value must be
  the same as their associated request's `id`, except for `CompileResponse`
  which uses the compilation ID as its ID. All response message types begin with
  the corresponding request name and end with `Response`.

* *Events* may not be responded to and include no `id` field. All event message
  types end with `Event`.

* The `ProtocolError` message, which is sent when one endpoint detects that the
  other is doing something invalid. See [Error Handling](#error-handling) below.

The protocol also defines some messages whose names don't end with `Request`,
`Response`, or `Event`. These are used as structures shared between different
RPCs.

### ID Requirements

Each endpoint must guarantee that each request's `id` doesn't match the `id` of
any other outstanding request with the same [compilation ID] from that endpoint.
The same `id` may be used for an inbound request and an outbound request, and
the same `id` may be used for two requests with different compilation IDs. The
host must similarly guarantee that a `CompileRequest`'s compilation ID doesn't
match the compilation ID of any other outstanding `CompileRequest`. The compiler
must ensure that all outbound requests' compilation IDs match that of the
`CompileRequest` that triggered its associated compilation.

The compilation ID 0 is reserved for `VersionRequest` and `VersionResponse`,
since they're not specific to any individual compilation.

The compilation ID and normal request `id` `4294967295` is reserved for [error
handling]. (This is the maximum number representable by a `uint32`.)

### Optional and Mandatory Fields

If a field is not optional, the the endpoint that sends that message must
guarantee that it's set to a meaningful value, and the endpoint that receives it
must reject the message if it's not set.

## Error Handling

When the compiler detects that the host is violating this protocol, it must send
a `ProtocolError` message to the host. If the error was detected when processing
a request, the `ProtocolError` must have its `id` field set to the request's id.
Otherwise, even if the error was detected while processing a response with an
id, the `id` field must be set to `4294967295` (the maximum number representable
by a `uint32`). The [compilation ID] must match the compilation ID of the
request or response that triggered the error.

When the host detects that the compiler is violating this protocol, it does not
need to send a `ProtocolError` message to the compiler. Instead, it should
expose an error to the host's consumers and close the connection with the
compiler.

An error occurs whenever any requirements set out by this protocol (including
the documentation in `embedded_sass.proto`) are violated. This includes, but is
not limited to:

* Sending data that can't be parsed as an `InboundMessage` (for the compiler) or
  an `OutboundMessage` (for the host).

* Sending a request with an ID that's in use by another in-flight request.

* Sending a response with an ID that doesn't correspond to an in-flight
  request's ID.

* Sending a response with an ID that corresponds to the ID of an in-flight
  request ID of the incorrect type.

* Sending a message with a `null` value for a mandatory field.

The `ProtocolError` message must *not* be used to report Sass language errors.

## Host Language API

Although not strictly part of the protocol, the host language will presumably
provide an API for reading and manipulating SassScript values so that custom
functions can be written in the host language. In order to ensure that custom
functions will behave consistently with built-in Sass functions, the host
language should provide APIs that meet the following guidelines.

The [Dart `Value` API][] is a good example of an object-oriented API that
follows these guidelines.

### Immutability

All SassScript values are immutable, and the API should preserve that fact. No
API calls should be able to modify any SassScript values, including collections
like lists and maps. Instead, API calls should be provided to return new values
with adjusted contents or to copy values into mutable host-language objects.

If API calls are provided that return a new versions of an object with adjusted
contents, metadata for the returned object (such as the type of list separator
or a number's units) should match that of the original object.

### Indexing

SassScript values use index 1 to refer to the first element and -1 to refer to
the final element. The index 0 is invalid. Furthermore, indexes in Sass strings
refer to [Unicode code points][], not bytes or UTF-16 code units. The API should
provide a means to convert between Sass's indexing scheme and the host
language's indexing scheme, and should encourage authors to treat any indexes
they're passed as Sass-style indexes rather than host-language-style indexes.

### Assertions

The API should provide an easy means to assert that values are the expected type
and to produce a useful error if they aren't. They should *not* provide a means
to assert that a value is a list, though, since all Sass values should be
treated as lists (see below).

### Strings

API users should be encouraged to return quoted strings unless there's a
particular reason not to.

Two strings are equal if they have the same text, regardless of whether either
is quoted or not.

### Numbers

The API should provide additional assertions for numbers:

* that the number doesn't have any units;
* that the number's units are [compatible][] with given expected units;
* that the number is an integer, which for the purposes of Sass numbers means
  that its numeric value is within 1e-11 of an integer;
* that the number is in a given range, where being within 1e-11 of the top or
  bottom of that range is considered being equal to the top or bottom.

The API should also provide means of converting a number to the equivalent
number with different-but-compatible units, and for returning it as the host
language's integer type if it is an integer.

Two numbers are equal if they have [compatible][] units, and if their numerical
value (with normalized units) are within 1e-11 of one another. A hash code with
the same equality semantics can be generated for a number `x` by rounding
`x * 1e11` to the nearest integer and taking the hash code of the result.

### Colors

The protocol includes three distinct color value types, `RgbColor`, `HslColor`,
and `HwbColor`. In Sass code and custom functions, colors may be represented or
manipulated in either RGB, HSL, or HWB form, so having multiple types allows
whichever form is currently in use to be sent between endpoints without having
to eagerly normalize it.

However, users of the host language API should be able to transparently treat
any color object as though it were either RGB, HSL, or HWB form. The API should
provide access to the red, green, and blue, hue, saturation, lightness,
whiteness, and blackness channels of *every* color object. It should use [this
RGB-to-HSL algorithm], [this HSL-to-RGB algorithm], [this RGB-to-HWB algorithm],
and [this HWB-to-RGB algorithm] to convert between representations as necessary.


The API should also provide means of changing one or more channels of a color
while leaving other channels as-is.

Two colors are equal if their RGB forms have the same red, green, blue channels
and alpha channels within 1e-11 of one another.

### Lists

In Sass, every value counts as a list. Maps count as unbracketed comma-separated
lists of two-element unbracketed space-separated key-value lists, and all other
non-list values count as lists that contain that value. The API should make it
easy to treat every value as a list, and should discourage treating values
passed as `Value.List`s specially.

API users should be encouraged to return unbracketed comma-separated lists
unless there's a particular reason not to.

Two lists are equal if they have the same elements, separator, and if they're
both bracketed or both unbracketed. An empty list is equal to an empty map.

`Value.ArgumentList`s should be exposed the same way as any other list, except
that it should also provide access to the keyword map. For object-oriented host
languages, an argument list's class should be a subtype of normal list's. It
should be considered equal to a list with the same elements, regardless of its
keywords.

### Maps

Although maps are transferred as lists of pairs, they should be exposed to the
host language as maps that can be indexed by key, using the notions of equality
described for each type.

Two maps are equal if they have equal keys that map to equal values, regardless
of the order of the keys in the map. An empty map is equal to an empty list.

### Booleans

The `True` and `False` messages are each singletons representing the Sass values
`true` and `false`, respectively. In Sass, all values other than `false` and
`null` can be used to represent truth, so the API should provide an easy way to
tell if a value is "truthy" (one of those values) or "falsey" (`false` or
`null`). It should encourage users to check this rather than directly testing
for `true` or `false`.

Two booleans are equal if they're both `true` or both `false`.

### Null

The `Null` message is a singleton representing the Sass `null` value. It should
*not* be represented as the host language's native `null` value, so that it can
expose Sass-specific APIs like the [assertions](#assertions) described above.

`null` is only equal to `null`.

### Calculations

Calculations are represented similarly to their representation in the Sass
specification, as a tree of binary operations and other calculations that
terminates in numbers or strings. This tree structure may be exposed to the host
language, or the host may choose to keep the structure of calculations opaque.

Two calculations are equal if their names are equal and each of their arguments
are equal. Two `Calculation.CalculationOperation`s are equal if they have the
same operator and their left and right values are equal, respectively.

Note that this protocol chooses *not* to require host implementations to
simplify calculations as they're constructed, for the sake of simplicity of
implementation (although hosts *may* do so). This means that a host can
construct calculations like `calc(1 + 1)` which, in Sass, would simplify to 2.
The host is not required to take simplification into account when determining
equality.

### Functions

The protocol allows first-class functions defined in the compiler to be passed
to the host (as `Value.CompilerFunction`s) and vice-versa (as
`Value.HostFunctions)`. It allows the compiler to invoke functions defined in
the host. The host API should hide the distinction between the two function
types as much as possible, but it may refuse to allow host-defined functions to
be invoked on the host, since doing so correctly would require parsing those
functions' signatures.

Two first-class functions are equal if they have the same ID and they're either
both `CompilerFunction`s or both `HostFunction`s.

## Versioning

This protocol is versioned according to [semver 2.0.0]. The current version is
indicated by the `EMBEDDED_PROTOCOL_VERSION` file. If this file has a `-dev`
prerelease string, that indicates that the currently checked in version is in
development, is not considered a release version, and must not be used by
released versions of compilers or hosts. All release versions will also have
GitHub tags for their version numbers of the form `embedded-protocol-x.y.z`.

A "breaking change" is defined as per [the protocol buffer rules for updating a
message type]. Compatibility is considered from the perspective of the host. For
example, if a new `InboundMessage` type is added, that's considered a "backwards
compatible" change because older hosts can simply opt not to use it, even though
from the perspective of the compiler a new message type would be a breaking
change.

Hosts are generally expected to be responsible for installing appropriate
compiler versions as part of their installation process, which should limit the
potential for incompatible versions between the two. For this reason, version
numbers are intended to be primarily an advisory for humans as to the degree of
change over time.

In some cases, the version number will be marked as "pending". This indicates
that the next version of the protocol is still under active development, and may
be waiting for additional pull requests before it's finalized. Hosts and
compilers should never cut releases that target pending protocol versions.

# Exception API

The error thrown by the compiler when a Sass compilation fails. This should
*not* be thrown for errors that occur outside of Sass compilation, such as
argument verification errors.


#### `message`

The compiler supplies this error message to the JS runtime. This should contain
the description of the Sass exception as well as human-friendly representations
of `span` and `sassStack` (if they're set).

This message must be passed directly to the super constructor.

> The format can vary from implementation to implementation.

```ts
message: string;
```

#### `sassMessage`

The Sass error message, excluding the human-friendly representation of `span`
and `sassStack`.

> The format can vary from implementation to implementation.

```ts
readonly sassMessage: string;
```

#### `sassStack`

A human-friendly representation of the loads, function calls, and mixin includes
that were active when this error was thrown.

> The format can vary from implementation to implementation.

```ts
readonly sassStack: string;
```

#### `span`

A span whose `url` is the canonical URL of the stylesheet being parsed or
evaluated, and whose `start` points to the line in that stylesheet on which the
error occurred.

> The other details of this span can vary from implementation to implementation,
> but implementations are strongly encouraged to ensure that this covers a span
> of text that clearly indicates the location of the error.

```ts
readonly span: SourceSpan;
```

#### `toString()`

Provides a formatted string with useful information about the error.

> This likely includes the Sass error message, span, and stack. The format can
> vary from implementation to implementation.

```ts
toString(): string; // TODO(awjin): Mark this as `override` once TS 4.3 is released.
```

```ts
} // Exception
```
# Extend Specificity

It's valuable to be able to optimize away selectors generated by `@extend` if
they match subsets of the elements matched by other selectors in the same style
rule. However, optimizing *every* such selector can end up having unexpected
consequences when it changes the specificity with which the style rule applies
to a given element. This proposal lays out restrictions on the specificity of
selectors that result from an `@extend`.

First of all, let's define the function `extend(S, A, B)` to be the result of
taking a selector `S` and extending it by replacing all instances of `A` with
`A, B` and resolving the result a la `@extend`. Here are some uncontroversial
examples:

```
extend(a, a, b) = a, b
extend(a.foo, a, b) = a.foo, b.foo
extend(c, a, b) = c
```

## Specificity of the Base Selector

Note that so far, it's always the case that `extend(S, A, B)[0] = S`. However,
consider `extend(a.foo, .foo, a)`. One interpretation of this would give the
result as `a.foo, a`. However, `a` matches a strict superset of the elements
that `a.foo` matches, so another interpretation could give the result as just
`a`. `a` and `a.foo, a` are semantically identical **except** for specificity.

Let's define a new function to talk about this: `spec(S)` is the specificity of
a selector `S`. So `spec(a.foo) = 11`, while `spec(a) = 1`. The nature of CSS
means that differences in specificity can lead to practical differences in
styling, so to some degree we clearly need to consider specificity as part of
the semantics of the selectors we deal with. This is the broad point of this
issue.

Let's get back to the example of `extend(a.foo, .foo, a)`. The first selector in
the result, `extend(a.foo, .foo, a)[0]`, corresponds to the selector written by
the user with the goal of directly styling a set of elements. Allowing the
specificity of this selector to change because an `@extend` was added elsewhere
in the stylesheet is semantic change at a distance, which is clearly something
we shouldn't allow. Thus, it should be the case that
`extend(a.foo, .foo, a)[0] = a.foo` and in general that
`spec(extend(S, A, B)[0]) >= spec(S)`.

In most cases, the first generated selector should be identical to `S`. However,
this isn't possible when dealing with the `:not()` pseudo-selector. For example,

Because `:not` specifically declares selectors that the rule **doesn't** apply
to, extending those selectors will necessarily increase the specificity of the
base selector. The example above should compile to

This new selector has higher specificity than the original. As such, we must
allow the generated selector to have higher specificity than the original in
some cases.

### First Law of Extend: `spec(extend(S, A, B)[0]) >= spec(S)`

This is not always the behavior in Sass, either in master or in stable; this is
clearly a bug that should be fixed.

## Specificity of Generated Selectors

Now that we've established what `spec(extend(S, A, B)[0])` should look like,
it's time to think about what `spec(extend(S, A, B)[1])` should look like as
well. In order to allow our users to reason about the styling of their page, the
specificity of the generated selectors should clearly be as consistent as
possible. In an ideal world, if `@extend` were supported natively in the
browser, the specificity would be equivalent to that of the original selector;
that is, `spec(extend(S, A, B)[1]) = spec(S)`. However, that's not always
possible:

```
extend(a, a, b.foo) = a, b.foo
  spec(a) < spec(b.foo)
extend(a.foo, a.foo, b) = a.foo, b
  spec(a.foo) > spec(b)
```

Since consistency is desirable, we might be tempted instead to say that
`spec(extend(S, A, B)[1]) = spec(B)`. But that's not always possible either:

```
extend(a.foo, a, b) = a.foo, b.foo
  spec(b) < spec(b.foo)
```

There is one guarantee we can make, though:
`spec(extend(S, A, B)[1]) >= spec(B)`, since everything in `S` is either merged
with or added to `B`.

### Second Law of Extend: `spec(extend(S, A, B)[1]) >= spec(B)`

## Implications for Optimization

The ultimate goal of this discussion is, of course, that we want to be able to
perform certain optimizations on the generated selectors in order to reduce
output size, but we don't want these optimizations to break the guarantees we
offer our users. Which optimizations do the guarantees outlines above allow us,
and which do they forbid?

One optimization that we've been doing for a long time is
`extend(a.foo, .foo, a) = a`, as discussed above. This violates the first law,
since `a != a.foo`.

Another optimization added in [8f4869e][] is `extend(a, a, a.foo) = a`. This
violates the second law, since `spec(a) < spec(a.foo)`.

However, many of the optimizations added in [8f4869e][] do still work. For
example, `extend(.bar a, a, a.foo) = .bar a` works because
`spec(.bar a) = spec(a.foo)`.

## Conclusion

As long as we make the `@extend` optimizer specificity-aware, we can retain a
number of useful optimizations while still providing the same guarantees that
they have without any optimizations. That's my proposal: that we support all the
optimizations we can while still abiding by the two Laws of Extend outlined
above.

# `@extend`

The `@extend` at-rule is probably the single most complicated feature in Sass.
While its semantics are straightforward to describe, the implementation involves
many interacting layers and a lot of intricate case analysis.

These definitions provide names to the various selectors involved with a given
use of `@extend`:

### Extender

An `@extend` rule's *extender* is the [selector list][] for the style rule in
which the `@extend` rule appears.

### Target

An `@extend` rule's *target* is the [simple selector][] that's used as an
argument to `@extend`.

### Extension

An *extension* is a collection of various properties.

> An extension is a more abstract representation of the information inherent in
> an `@extend` rule. As such, all `@extend` rules define extensions, but not all
> extensions directly correspond to `@extend` rules.

* The *extender*, a [selector list][].
* The *target*, a [simple selector][].

### Extendee

An *extendee* is a selector list being modified by an [extension](#extension).
It's only defined within the scope of a single application of a given extension.

> If an extendee contains that extensions's target, it will usually be modified
> to include the extension's extender as well.

### The `extend()` Function

As a shorthand, we use the function notation `extend(extendee, target,
extender)` to refer to [extending] `extendee` with `target` and `extender` (much
like the Sass function `selector-extend()`). We further define the following
shorthands:

[extending]: #extending-a-selector

* `extend(extendee, extension)` for `extend(extendee, extension.target,
  extension.extender)`.
* `extend(extendee, extensions)` for iteratively running `extendee =
  extend(extendee, extension)` for each `extension` in `extensions`.

## Semantics

The `@extend` rule means that all elements matching the [extender](#extender)
should be styled as though they match the [target](#target) as well. The
`@extend` rule only applies to CSS in the module in which it's defined and
that module's transitive dependencies.

> Because Sass can't directly affect how the browser applies styles to elements,
> these semantics are approximated by duplicating each [extendee](#extendee)
> with the target replaced by the extender. Rather than being a naïve textual
> replacement, the extender is integrated intelligently into the extendee to
> match the semantics as best as possible.

### Executing an `@extend` Rule

To execute an `@extend` rule `rule`:

* If there is no [current style rule][], throw an error.

  [current style rule]: ../style-rules.md#current-style-rule

* If the current style rule is [bogus], throw an error.

  [bogus]: ../selectors.md#bogus-selector

* Let `target` be the result of evaluating all interpolation in `rule`'s
  selector and parsing the result as a list of simple selectors.

* If `target` contains any parent selectors, throw an error.

* Let `extension` be an [extension](#extension) whose extender is the current
  style rule's selector and whose target is `target`.

* Add `extension` to [the current module][]'s extensions.

  [the current module]: ../spec.md#current-module

> Note that this adds the extension to the module being evaluated, not the
> module in which the `@extend` lexically appears. This means that `@extend`s
> are effectively dynamically scoped, not lexically scoped.

### Resolving a Module's Extensions

This algorithm takes a [module][] `starting-module` and returns a [CSS tree][]
that includes CSS for *all* modules transitively used or forwarded by
`starting-module`.

[module]: ../modules.md#module
[CSS tree]: ../modules.md#css-tree

* Let `new-selectors` be an empty map from style rules to selectors. For the
  purposes of this map, style rules are compared using *reference equality*,
  meaning that style rules at different points in the CSS tree are always
  considered different even if their contents are the same.

* Let `new-extensions` be an empty map from modules to sets of
  [extensions](#extension).

* Let `extended` be the subgraph of the [module graph][] containing
  modules that are transitively reachable from `starting-module`.

  [module graph]: ../modules.md#module-graph

* For each module `domestic` in `extended`, in reverse [topological][] order:

  * Let `downstream` be the set of modules in `extended` whose dependencies
    include `domestic`.

  * For each style rule `rule` in `domestic`'s CSS:

    * Let `selector` be `extend(rule's selector, domestic's extensions)`.

    * Let `selector-lists` be an empty set of selector lists.

    * For each module `foreign` in `downstream`:

      * Let `extended-selector` be `extend(selector, new-extensions[foreign])`.

        > `new-extensions[foreign]` is guaranteed to be populated at this point
        > because `extended` is traversed in reverse topological order, which
        > means that `foreign`'s own extensions will already have been resolved
        > by the time we start working on modules upstream of it.

      * Add `selector` to `selector-lists`.

    * Set `new-selectors[rule]` to a selector that matches the union of all
      elements matched by selectors in `selector-lists`. This selector must obey
      [the specificity laws](#specificity) relative to the selectors from which
      it was generated. For the purposes of [the first law](#the-first-law),
      "the original extendee" is considered only to refer to selectors that
      appear in `domestic`'s CSS, *not* selectors that were added by other
      modules' extensions.

      > Implementations are expected to trim redundant selectors from
      > `selector-lists` as much as possible. For the purposes of the first law
      > of extend, "the original extendee" is *only* the selectors in `rule`'s
      > selector. The new complex selectors in `selector` generated from
      > `domestic`'s extensions don't count as "original", and may be optimized
      > away.

    * For every extension `extension` whose extender appears in `rule`'s
      selector:

      * For every complex selector `complex` in `new-selectors[rule]`:

        * Add a copy of `extension` with its extender replaced by `complex` to
          `new-extensions[domestic]`.

* Let `css` be an empty CSS tree.

* Define a mutating recursive procedure, *traversing*, which takes a module
  `domestic`:

  * If `domestic` has already been traversed, do nothing.

  * Otherwise, traverse every module in `domestic`'s dependencies.

    > Because this traverses modules depth-first, it emits CSS in reverse
    > topological order.

  * Let `initial-imports` be the longest initial subsequence of top-level
    statements in `domestic`'s CSS tree that contains only comments and
    `@import` rules *and* that ends with an `@import` rule.

  * Insert a copy of `initial-imports` in `css` after the last `@import` rule, or
    at the beginning of `css` if it doesn't contain any `@import` rules.

  * For each top-level statement `statement` in `domestic`'s CSS tree after
    `initial-imports`:

    * If `statement` is an `@import` rule, insert a copy of `statement` in `css`
      after the last `@import` rule, or at the beginning of `css` if it doesn't
      contain any `@import` rules.

    * Otherwise, add a copy of `statement` to the end of `css`, with any style
      rules' selectors replaced with the corresponding selectors in
      `new-selectors`.
      
* Let `results` be an empty selector list.

* For each complex selector `complex` in `extendee`:

  * Let `options` be an empty complex selector.

  * For each compound selector `compound` or combinator in `complex`:

    * If it's a combinator, add it to each selector in `options`.

    * For each simple selector `simple` in `compound`:

      * Let `new-list` be the result of
        [extending](#extending-a-simple-selector) `simple` with `target` and
        `extender`.

      * Append an `:is()` selector with argument `new-list` to `options`.

        > For example, in `extend(.a .b, .b, .x .y)`, `options` would end up
        > being `:is(.a) :is(.b, .x .y)` or equivalently `.a :is(.b, .x .y)`.
        > This would then expand to `.a .b, .x .a .y, .a .x .y` in the next
        > step.
        >
        > An `:is()` selector is used here to concisely demonstrate which
        > selectors should be matched by the selector ultimately returned by
        > this algorithm. The algorithm itself should *not* generate an `:is()`
        > selector unless one appears in the input stylesheet.

  * Let `result` be a selector list that matches the same elements as `options`,
    subject to the [limitations] and [specificity] laws.

    > TODO: Specify the details of this procedure.

  * Add all complex selectors in `result` to `results`.

* Return `results`.

[limitations]: #limitations
[specificity]: #specificity

### Extending a Simple Selector

This algorithm takes a simple selector `extendee`, a simple selector `target`,
and a selector list `extender` and returns a selector list.

* If `extendee` matches exactly the same set of elements as `target`, return a
  copy of `extender` with `extendee` added.

* Otherwise, if `extendee` is a pseudo selector that has its own selector `arg`:

  * Let `extended-arg` be `extend(arg, target, extender)`.

  * If `extendee`'s [unprefixed] name is `not`:

    * If `arg` has no complex selectors with more than one compound selector,
      remove all complex selectors with more than one compound selector from
      `extended-arg`.

      > Older browsers only support compound selectors in `:not()`. This step
      > ensures that we don't break any `:not()`s that already work on those
      > browsers.

    * If any complex selectors in `extended-arg` contain only a single compound
      selector which in turn contains a single pseudo selector with a selector
      argument, remove them from `extended-arg`. If any of the removed selectors
      were pseudo-selectors named `is`, `where`, or `matches`, add their
      selector arguments to `extended-arg`.

      > For example, `:not(:is(a, b))` becomes `:not(a, b)`.

    * If `extended-arg` is empty, return `extendee`.

    * Otherwise, if `arg` contains more than one complex selector, return a
      `:not()` selector with `extended-arg` as its arguments.

    * Otherwise, let `result` be an empty compound selector.

    * For each complex selector in `extended-arg`, add a `:not()` selector to
      `result` with that complex selector as its argument.

      > For example, `:not(a, b)` becomes `:not(a):not(b)`. This supports older
      > browsers that don't allow multiple arguments in `:not()`.

    * Return `result`.

  * Otherwise, if `extendee`'s [unprefixed] name is `is`, `matches`, `any`,
    `current`, `nth-child`, or `nth-last-child`:

    * For each complex selectors in `extended-arg` that contain only a single
      compound selector which in turn contains a single pseudo selector `pseudo`
      with a selector argument:

      * Remove `pseudo` from `extended-arg`.

      * If `pseudo` has the same name and (if applicable) `<an+b>` as
        `extendee`, add its selector argument to `extended-arg`.

  * Return a copy of `extendee` with its selector argument set to
    `extended-arg`.

* Otherwise, return `extendee` as-is.

[unprefixed]: ../syntax.md#vendor-prefix

### Unifying a Simple Selector

This procedure takes a simple selector `simple` and a compound selector
`compound` and returns another compound selector or null.

> Semantically, this returns a selector that matches the set of elements matched
> by both `simple` and `compound`. In other words, it's the set intersection
> operation. The null return value indicates the empty set.

* If either `simple` or `compound` is a `:host` or `:host-context` selector, and
  the other selector contains any selector other than a `:host` or a
  pseudo-selector with a selector argument, return null.

  > The `:host` and `:host-context` selectors select elements outside the
  > current shadow DOM context, while most other selectors exclusively refer to
  > elements *within* the current shadow DOM context. Thus the intersection
  > between `:host` and, say, `div` is always empty.
  >
  > We carve out an exception for selector pseudos because it's possible they
  > contain their own `:host` or `:host-context` selectors, and we don't want to
  > add the complexity of determining for sure whether they do or not. For
  > example, `:host(.foo):not(:host-context(.bar))` is valid.

* If either `simple` or `compound` is a universal selector, return the other.

* If `compound` contains a selector that's identical to `simple`, return
  `compound`.

* If `simple` is a type, ID, or [pseudo-element] selector and `compound`
  contains a type, ID, or pseudo-element selector respectively, return null.

  > Note that pseudo-element selectors like `:before` are still considered
  > pseudo-elements even if they use the legacy single-colon syntax.

* Return a copy of `compound` with `simple` added:

  * If `simple` is a pseudo-element, add it to the end.

  * Otherwise, if `simple` is a pseudo-selector, add it before any
    pseudo-elements if they exist, and otherwise add it to the end.

  * Otherwise, add `simple` before any pseudo-selectors or pseudo-elements if
    they exist, and otherwise add it to the end.

### Limitations

It's not possible for a preprocessor to guarantee the semantics of `@extend` in
full generality. There are three major exceptions where implementations are not
required to meet the full definition.

1. Implementations should not try to apply native browser styles that would
   apply to the target. For example, while it's legal to write `@extend table`,
   there's no good way to apply browsers' built-in table styles.

2. Second, when the extender and the extendee both contain multiple compound
   selectors separated by combinators, implementations are allowed to assume
   that the elements matched by the extender's compound selectors are not
   interleaved with those matched by the extendee's compound selectors.

   For example, consider `extend(.c .x, .x, .a .b)`. Implementations must
   generate the selectors `.a .c .b` and `.c .a .b`, because an element with
   `class="a"` may be either outside or inside one with `class="c"`. However,
   implementations are not required to generate the selector `.a.c .b` which
   would require HTML with `class="a c"`.

   This flexiblity is allowed because otherwise implementations would have to
   generate a combinatorial explosion of selectors, the vast majority of which
   would be extremely unlikely to match real HTML. This particular heuristic
   assumes that the extender and extendee were each written with self-contained
   HTML in mind, so that interwoven HTML is unlikely to come up.

3. Implementations are not required to apply the target's styles with the exact
   same specificity as the extender, because this isn't generally possible when
   complex extendees exist. However, implementations must respect certain
   guarantees about specificity; see below for details.

### Specificity

When modifying the extendee during extension, the implementation must provide
two guarantees about the result. These are known as the "laws of extend".

#### The First Law

The first law of `@extend` says that the specificity of the first generated
selector must be greater than or equal to that of the original extendee. For
example, `extend(a.foo, .foo, a)` should generate `a.foo, a` even though
`a.foo` matches a subset of elements matched by `a`.

In most cases, the first generated selector will be identical to the extendee,
but it may need to be modified when dealing with the pseudo-selector `:not()`.
For example, `extend(:not(.foo), .foo, .bar)` should produce
`:not(.foo):not(.bar)`.

#### The Second Law

The second law of extend says that the specificity of a new selector to match a
given extender must be greater than or equal to the specificity of that
extender when modified in the same way as the target is modified within the
extendee. For example, `extend(a, a, a.foo)` should produce `a, a.foo` even
though (again) `a.foo` matches a subset of elements matched by `a`.
`extend(:where(.x), .x, .x .y)` should produce `:where(.x, .x .y)` even though
it has lower specificity than `.x .y`, because `:where` eliminates the
specificity of both `.x` and `.x .y`.

This still leaves room for optimizations. For example,
`extend(.bar a, a, a.foo)` can just produce `.bar a` (omitting `.bar a.foo`).
This is allowed because `.bar a` matches a superset of the elements matched by
`.bar a.foo`, *and* the specificity of `.bar a` is equal to that of the extender
`a.foo`.

**F**

## Draft 2

* Add a design decision section on the choice to return numbers from simplified
  calculations.

* Store interpolations as a separate data type so that they can be parenthesized
  when used in `CalculationOperation`s.

* Throw errors when combining units that are known to be incompatible.

* Allow variables in `CalcValue`s to return calculations.

* Define equality between calculations.

* Allow calculations in CSS color functions.

* Properly parenthesize the right-hand side of `a / (b * c)`.

* Return calculations from `meta.calc-args()` as calculations, not unquoted
  strings.

* Return an unquoted string with value `"calculation"` from `meta.type-of()` for
  calculations, rather than a quoted string with value `"calc"`.

* Allow calls to the global `min()` and `max()` functions in calculations.

* Allow `clamp(var(--three-args))`.

* Simplify `calc(a + -b)` to `calc(a - b)`.

* Explicitly specify how calculations are parsed in plain-CSS mode.

* Allow numbers returned by simplifying calculations to create potentially
  slash-separated numbers.

* Fix some broken formatting.

* Remove TODOs about extra simplification.

## Draft 1

* Initial draft.

# First Class Mixins: Draft 1

> This section is non-normative.

Sass today has two callables: the function and the mixin. Functions in Sass are
a first class SassScript value type; they can be assigned to variables and
invoked dynamically.

Mixins, however, are not first class values. This is a stumbling block many
users (sass/sass#626, sass/sass#673, sass/sass#3328, sass/sass#3439, among
others) of Sass run into.

Promoting mixins to be first class values would resolve a number of commonly
requested features while also rounding out the language and adding feature
parity between Sass's two callables.

## Summary

> This section is non-normative.

This proposal promotes mixins to first-class values, giving Sass composability
for both of its kinds of callables.

Additionally, it provides ways to interact with mixin values similarly to how
one would with function values:

* `meta.get-function()` => `meta.get-mixin()`

* `meta.module-functions()` => `meta.module-mixins()`

* `meta.call()` => `meta.apply()`

### JavaScript API Design Decisions

Mixins differ from functions in that the result of their execution is a Sass AST
node, and not a SassScript value. Sass today does not expose ways to create or
manipulate AST nodes through the JavaScript API, nor does it intend to do so in
the future.

For this reason, it is not meaningful -- or even possible -- to construct or
execute a mixin through the JavaScript API. A mixin object shall be opaque, and
the only operation available shall be to return the object as-is.

## Types

This proposal promotes the [mixin value] to a Sass value type.

[mixin value]: ../spec/at-rules/mixin.md#mixin

### Operations

The only operation permitted for mixin objects is checking for equality. All
other operations throw an error.

#### Equality

When the Sass interpreter encounters an `@mixin` rule in Sass source code, it
constructs a mixin object in memory. Additionally, some mixin objects are
pre-defined by the Sass language and accessible though the builtin modules.

Mixin objects, like function objects, use pointer equality.

If the same file were to be imported multiple times, the Sass interpreter would
create a new mixin object for each `@mixin` rule each time the file is imported.
Because a new mixin object has been created, although the name, body, and source
span of a given mixin from the file would be the same between imports, the
objects would not be equal because they refer to different objects in memory.
Mixins pre-defined by the Sass language are instatiated at most once during the
entire evaluation of a program.

### Serialization

To serialize a `Mixin`:

* If the value is not being inspected, throw an error.

* Otherwise:

  * Emit `"get-mixin("`.

  * Emit a double quote (`"`), then the `name` of the mixin, then another double
    quote.

  * Emit `")"`.

## Functions

### `meta.type-of()`

Add the following clause to the [`meta.type-of()`] function and the top-level
`type-of()` function:

[`meta.type-of()`]: ../spec/built-in-modules/meta.md#type-of

* If `$value` is a mixin, return an unquoted string with value `"mixin"`.

### `meta.get-mixin()`

This is a new function in the `sass:meta` module.

```
meta.get-mixin($name, $module: null)
```

* If `$name` is not a string, throw an error.

* If `$module` is null:

  * Return the result of resolving a mixin named `$name`. If this returns
    null, throw an error.

* Otherwise:

  * If `$module` is not a string, throw an error.

  * Let `use` be the `@use` rule in [the current source file][] whose
    namespace is equal to `$module`. If no such rule exists, throw an error.

  * Return [`use`'s module][]'s mixin named `$name`, or throw an error if no
    such mixin exists.

  [the current source file]: ../spec/spec.md#current-source-file
  [`use`'s module]: ../spec/at-rules/use.md#a-use-rules-module

### `meta.module-mixins()`

This is a new function in the `sass:meta` module.

```
meta.module-mixins($module)
```

* If `$module` is not a string, throw an error.

* Let `use` be the `@use` rule in [the current source file][] whose namespace is
  equal to `$module`. If no such rule exists, throw an error.

* Return a map whose keys are the quoted string names of mixins in
  [`use`'s module][] and whose values are the corresponding mixins.

### `meta.accepts-content()`

This is a new function in the `sass:meta` module.

```
meta.accepts-content($mixin)
```

* If `$mixin` is not a mixin, throw an error.

* Return a boolean which is true if the body of `$mixin` has an `@content` rule.

## Mixins

### `meta.apply()`

```
meta.apply($mixin, $args...)
```

* If `$mixin` is not a mixin, throw an error.

* If the current `@include` rule has a `ContentBlock` and `$mixin`'s body does not
  contain an `@content` rule, throw an error.

* Execute the `ArgumentInvocation` `(...$args)` with `$mixin`'s
  `ArgumentDeclaration` in `$mixin`'s scope. Treat the `@include` rule that
  invoked `meta.apply` as the `@include` rule that invoked `$mixin`.

> This ensures that any `@content` rules in `$mixin` will use `meta.apply()`'s
> `ContentBlock`.

* Execute each statement in `$mixin`.

### Types

#### `SassMixin`

The JS API representation of a Sass mixin.

##### `assertMixin`

Returns `this` if it's a [`SassMixin`] and throws an error otherwise.

[`SassMixin`]: #sassmixin

> The `name` parameter may be used for error reporting.

```ts
assertMixin(name?: string): SassMixin;
```

##### `internal`

The [private `internal` field] refers to a Sass mixin.

[private `internal` field]: ../spec/js-api/value/index.d.ts.md#internal

##### Constructor

Throws an error.

```ts
constructor();
```

```ts
} // SassMixin
```

The protocol allows first-class mixins defined in the compiler to be passed
to the host and vice-versa as `Value.CompilerMixin`s.

Two first-class mixins are equal if they have the same ID.

## Draft 1.2

* Add a section on the modulo operation.

## Draft 1.1

* Add a design decision section about the new math function semantics.

* Fix the definition of `math.$max-safe-integer` and `math.$min-safe-integer`.
  The listed values were correct, but the definitions were not.

## Draft 1

* Initial draft.

# Floating Point Numbers: Draft 1.2
 
This proposal standardizes Sass on using 64-bit floating-point numbers.

In the original Ruby Sass implementation, numbers were represented using Ruby's
numeric stack. If a number was written without a decimal point in Sass (or
returned by an integer-valued function like `red()`), it would be represented as
an arbitrary-sized integer type that would transparently support integers of
arbitrary size. If it was written with a decimal point (or returned by a
float-valued function like `random()`), it used Ruby's floating-point
representation whose size varied based on how Ruby was compiled.

LibSass varied from this behavior by representing all numbers as 64-bit
floating-point numbers.

Dart Sass initially matched Ruby Sass's implementation by virtue of the fact
that Dart versions before 2.0.0 supported a similar transparently-updating
integer stack. However, when Dart 2.0.0 was released its integer representation
instead became fixed-size, and only guaranteed to be fully accurate up to 53
bits.

In addition to the specific details of numeric representation, Ruby Sass papered
over floating-point numbers' accuracy issues by defining a heuristic for
determining when similar numbers were considered equivalent to Sass's logic.
This heuristic has persisted relatively unchanged through to modern
implementations, but it introduces a problematic [intransitivity] in Sass's
equality semantics: `1 == 1.000000000005` and `1.000000000005 ==
1.000000000010`, but `1 != 1.000000000010`. This also means that the hashing
Sass uses for its map keys is inherently flawed when dealing with numbers with
very small variations.

In practice, these changes rarely come up in practice because CSS tends to
involve numbers within the well-behaved ranges almost exclusively. However,
inconsistent edge cases can lead to severely bad user experiences as well as
difficulty writing truly robust library code.

## Summary

> This section is non-normative.

This proposal standardizes Dart Sass on 64-bit IEEE 754 floating-point numbers,
like Dart, Java, and C#'s `double` type and—most pertinently—like JavaScript's
`Number` type. There will no longer be a separate representation of integers and
floating-point numbers, again similarly to JavaScript. In practice this is not a
large change, because Sass has always treated integer-like floating-point
numbers interchangeably with integers anyway.

This proposal also rationalizes Sass's numeric equality heuristic to make it
transitive. In particularly, two numbers will be considered equivalent if they
round to the same 1e-11. Using the example above, this will mean that `1 !=
1.000000000005`, `1.000000000005 == 1.000000000010`, and `1 != 1.000000000010`.

This proposal also adds numeric constants to the `sass:math` module that
represent various boundaries when dealing with floating-point values:

* `math.$epsilon`: The difference between 1 and the smallest floating-point
  number greater than 1.

* `math.$max-safe-integer`: The maximum integer that can be represented "safely"
  in Sass—that is, the maximum integer `n` such that `n` and `n + 1` both have a
  precise representation.

* `math.$min-safe-integer`: The minimum integer that can be represented "safely"
  in Sass—that is, the minimum integer `n` such that `n` and `n - 1` both have a
  precise representation.

* `math.$max-number`: The maximum numeric value representable in Sass.

* `math.$min-number`: The smallest positive numeric value representable in Sass.

### Potentially-Breaking Changes

This proposal introduces changes that cause observable behavioral differences
which could, in principle, break existing Sass code. However, these differences
are only observable in extremely large and extremely small numbers, or numbers
that have extremely small differences between them. It's unlikely that this
comes up often in practice.

Even more importantly, the existing behavior is clearly undesirable. Integer
overflow depending on the internal state of a number object is user-hostile
behavior, as is an intransitive equality operation. To the extent that these
behaviors *are* observed by users, it's highly likely that they're seen as bugs
where a change would be welcome.

Finally, there's not a realistic way for us to provide deprecation messaging for
this change without dire performance implications. Given that, this proposal
immediately changes the behavior of the language without a deprecation period.

### Design Decisions

#### Math Function Special Cases

The existing spec for Sass's suite of math functions carves out a number of
special cases where the mathematical functions have asymptotic behavior around a
particular integer argument. For example, since the tangent function tends to
infinity as its input approaches `π/4 ± 2πn`, Sass defined `math.tan()` to
return `Infinity` for any input that fuzzy-equals `90deg +/- 360deg * n`.

However, this has a number of problems:

* It's inconsistent with `math.div()`, which does *not* do this special-casing
  for divisors very close to 0.

* It's inconsistent with [CSS Values and Units 4], which uses standard
  floating-point operations everywhere.

* Most importantly, it runs the risk of losing information if the small
  differences between values are semantically meaningful.

Given these, we decided to introduce a rule of thumb. A number is always treated
as a standard double except for:

* explicit Sass-level equality comparisons (including map access),
* rounding RGB color channels (until we support Color Level 4),
* and serializing a number to CSS.

## Definitions

### Double

A *double* is a floating-point datum representable in a format with

* `b = 2`
* `p = 53`
* `emax = 1023`

as defined by [IEEE 754 2019], §3.2-3.3.

> This is the standard 64-bit floating point representation, defined as
> `binary64` in [IEEE 754 2019], §3.6.

### Set of Units

A *set of units* is structure with:

* A list of strings called "numerator units".
* A list of strings called "denominator units".

When not otherwise specified, a single unit refers to numerator units containing
only that unit and empty denominator units.

### Fuzzy Equality

Two [doubles] are said to be *fuzzy equal* to one another if either:

[doubles]: #double

* They are equal according to the `compareQuietEqual` predicate as defined
  by [IEEE 754 2019], §5.11.

* They are both finite numbers and the mathematical numbers they represent
  produce the same value when rounded to the nearest 1e⁻¹¹ (with ties away from
  zero).

### Integer

A SassScript number `n` is said to be an *integer* if there exists an integer
`m` with an exact [double] representation and `n` [fuzzy equals] that double.

If `m` exists, we say that `n`'s *integer value* is the double that represents
`m`.

[fuzzy equals]: #fuzzy-equality

> To avoid ambiguity, specification text will generally use the term
> "mathematical integer" when referring to the abstract mathematical objects.

### Compatible Units

Update the definition of compatible units as follows:

Two numbers' units are said to be *compatible* if both:

* There's a one-to-one mapping between those numbers' numerator units such that
  each pair of units is either identical, or both units have a [conversion
  factor] and those two conversion factors have the same unit. This mapping is
  known as the numbers' *numerator compatibility map*.

* There's the same type of mapping between those numbers' denominator units.
  This mapping is known as the numbers' *denominator compatibility map*.

[conversion factor]: ../spec/types/number.md#conversion-factors

Similarly, a number is *compatible with* a [set of units] if it's compatible
with a number that has those units; and two sets of units are *compatible* if a
number with one set is compatible with a number with the other.

[set of units]: #set-of-units

> This is not a functional change, it just makes it easier to refer to the
> details of compatibility between the two numbers.

## Types

Define the value type known as a *number* as three components:

* A [double] called its "value".
* A list of strings called *numerator units*.
* A list of strings called *denominator units*.

[double]: #double

Several shorthands exist when referring to numbers:

* A number's *units* refers to the [set of units] containing its numerator units
  and denominator units.

* A number is *unitless* if its numerator and denominator units are both empty.

* A number is *in a given unit* (such as "in `px`") if it has that unit as its
  single numerator unit and has no denominator units.

### Operations

#### Equality

Let `n1` and `n2` be two numbers. To determine `n1 == n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2`. If this
  throws an error, return false.

  [matching units]: #matching-two-numbers-units

* Return true if `c1`'s value [fuzzy equals] `c2`'s and false otherwise.

#### Greater Than or Equal To

Let `n1` and `n2` be two numbers. To determine `n1 >= n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* Return true if `c1`'s value [fuzzy equals] `c2`'s, or if
  `compareQuietGreaterEqual(c1.value, c2.value)` returns `true` as defined by
  [IEEE 754 2019], §5.11. Return false otherwise.

#### Less Than or Equal To

Let `n1` and `n2` be two numbers. To determine `n1 <= n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* Return true if `c1`'s value [fuzzy equals] `c2`'s, or if
  `compareQuietLessEqual(c1.value, c2.value)` returns `true` as defined by [IEEE
  754 2019], §5.11. Return false otherwise.

#### Greater Than

Let `n1` and `n2` be two numbers. To determine `n1 > n2`, return `n1 >= n2 and
n1 != n2`.

#### Less Than

Let `n1` and `n2` be two numbers. To determine `n1 < n2`, return `n1 <= n2 and
n1 != n2`.

#### Addition

Let `n1` and `n2` be two numbers. To determine `n1 + n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* Return a number whose value is the result of `addition(c1.value, c2.value)` as defined by
  [IEEE 754 2019], §5.4.1; and whose units are the same as `c1`'s.

#### Subtraction

Let `n1` and `n2` be two numbers. To determine `n1 - n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* Return a number whose value is the result of `subtraction(c1.value, c2.value)`
  as defined by [IEEE 754 2019], §5.4.1; and whose units are the same as `c1`'s.

#### Multiplication

Let `n1` and `n2` be two numbers. To determine `n1 * n2`:

* Let `product` be a number whose value is the result of
  `multiplication(n1.value, n2.value)` as defined by [IEEE 754 2019], §5.4.1;
  whose numerator units are the concatenation of `n1`'s and `n2`'s numerator
  units; and whose denominator units are the concatenation of `n1`'s and `n2`'s
  denominator units.

* Return the result of [simplifying] `product`.

  [simplifying]: #simplifying-a-number

#### Modulo

Let `n1` and `n2` be two numbers. To determine `n1 % n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* Let `remainder` be a number whose value is the result of `remainder(c1.value,
  c2.value)` as defined by [IEEE 754 2019], §5.3.1; and whose units are the same
  as `c1`'s.

* If `c2`'s value is less than 0 and `remainder`'s value isn't `0` or `-0`,
  return `result - c2`.

  > This is known as [floored division]. It differs from the standard IEEE 754
  > specification because it was originally inherited from Ruby when that was
  > used for Sass's original implementation.
  >
  >
  > Note: These comparisons are not the same as `c2 < 0` or `remainder == 0`,
  > because they don't do fuzzy equality.

* Otherwise, return `result`.

#### Negation

Let `number` be a number. To determine `-number`, return a number whose value is
the result of `negate(number)` as defined by [IEEE 754 2019], §5.5.1; and whose
units are the same as `number`'s.

## Procedures

### Converting a Number to Units

This algorithm takes a SassScript number `number` and a [set of units] `units`.
It returns a number with the given units. It's written "convert `number` to
`units`" or "convert `number` to `units` allowing unitless".

* If `number` is unitless and this procedure allows unitless, return
  `number` with `units`.

* Otherwise, if `number`'s units aren't [compatible with] `units`, throw an
  error.

  [compatible with]: #compatible-units

* Let `value` be `number`'s value.

* For each pair of units `u1`, `u2` in the [numerator compatibility
  map] between `number` and `units` such that `u1 != u2`:

  [numerator compatibility map]: #compatible-units

  * Let `v1` and `v2` be the values of `u1` and `u2`'s [conversion factors].

  * Set `value` to `division(multiplication(value, v1), v2)` as defined by
    [IEEE 754 2019], §5.4.1.

  [conversion factors]: ../spec/types/number.md#conversion-factors

* For each pair of units `u1`, `u2` in the [denominator compatibility map]
  between `number` and `units` such that `u1 != u2`:

  [denominator compatibility map]: #compatible-units

  * Let `v1` and `v2` be the values of `u1` and `u2`'s [conversion factors].

  * Set `value` to `division(multiplication(value, v2), v1)` as defined by
    [IEEE 754 2019], §5.4.1.

* Return a number with value `value` and units `units`.

### Matching Two Numbers' Units

This algorithm takes two SassScript numbers `n1` and `n2` and returns two
numbers. It's written "match units for `n1` and `n2`" or "match units for `n1`
and `n2` allowing unitless".

* If `n1` is unitless and this procedure allows unitless, return `n1`
  with the same units as `n2` and `n2`.

* Otherwise, if `n2` is unitless and this procedure allows unitless, return `n1`
  and `n2` with the same units as `n1`.

* Return `n1` and the result of [converting `n2` to `n1`'s units].

  [converting `n2` to `n1`'s units]: #converting-a-number-to-units

### Simplifying a Number

This algorithm takes a SassScript number `number` and returns an equivalent
number with simplified units.

* Let `mapping` be a one-to-one mapping between `number`'s numerator units and
  its denominator units such that each pair of units is either identical, or
  both units have a [conversion factor] and those two conversion factors have
  the same unit.

* Let `newUnits` be a copy of `number`'s units without any of the units in
  `mapping`.

  > `newUnits` for `1px*px/px` is `px`, because only one of the numerator `px`
  > is included in the mapping.

* Return the result of [converting `number` to `newUnits`].

  [converting `number` to `newUnits`]: #converting-a-number-to-units

## Variables

### `$e`

A unitless number whose value is the closest possible [double] approximation of
the [mathematical constant e].

> This is `2.718281828459045`.

### `$pi`

A unitless number whose value is the closest possible [double] approximation of
the [mathematical constant π].

> This is `3.141592653589793`.

### `$epsilon`

A unitless number whose value is the difference between 1 and the smallest
[double] greater than 1.

> This is `2.220446049250313e-16`.

### `$max-safe-integer`

A unitless number whose value represents the maximum mathematical integer `n`
such that `n` and `n + 1` both have an exact [double] representation.

> This is `9007199254740991`.

### `$min-safe-integer`

A unitless number whose value represents the minimum mathematical integer `n`
such that `n` and `n - 1` both have an exact [double] representation.

> This is `-9007199254740991`.

### `$max-number`

A unitless number whose value represents the greatest finite number that can be
represented by a [double].

> This is `1.7976931348623157e+308`.

### `$min-number`

A unitless number whose value represents the least positive number that can be
represented by a [double].

> This is `5e-324`.

## Functions

### Bounding Functions

#### `math.ceil()`

Replace this function's procedure with:

* Return a number whose value is the result of
  `convertToIntegerTowardPositive($number.value)` as defined by [IEEE 754 2019],
  §5.8; and whose units are the same as `$number`'s.

#### `math.floor()`

Replace this function's procedure with:

* Return a number whose value is the result of
  `convertToIntegerTowardNegative($number.value)` as defined by [IEEE 754 2019],
  §5.8; and whose units are the same as `$number`'s.

#### `math.round()`

Replace this function's procedure with:

* Return a number whose value is the result of
  `convertToIntegerTiesToAway($number.value)` as defined by [IEEE 754 2019],
  §5.8; and whose units are the same as `$number`'s.

### Distance Functions

#### `math.abs()`

Replace this function's procedure with:

* Return a number whose value is the result of `abs($number.value)` as defined
  by [IEEE 754 2019], §5.5.1; and whose units are the same as `$number`'s.

### Exponential Functions

#### `math.log()`

Replace this function's procedure with:

* If `$number` has units, throw an error.

* Return a unitless number whose value is the result of `log($number.value)` as
  defined by [IEEE 754 2019], §9.2.

> This is the [natural logarithm].

#### `math.pow()`

Replace this function's procedure with:

* If `$base` or `$exponent` has units, throw an error.

* Return a unitless number whose value is the result of `pow($number.value)` as
  defined by [IEEE 754 2019], §9.2.

#### `math.sqrt()`

Replace this function's procedure with:

* If `$number` has units, throw an error.

* Return a unitless number whose value is the result of `rootn($number.value,
  2)` as defined by [IEEE 754 2019], §9.2.

### Trigonometric Functions

#### `math.acos()`

Replace this function's procedure with:

* If `$number` has units, throw an error.

* Let `result` be a number in `rad` whose value is the result of
  `acos($number.value)` as defined by [IEEE 754 2019], §9.2.

* Return the result of [converting `result` to `deg`].

  [converting `result` to `deg`]: ../spec/types/number.md#converting-a-number-to-a-unit

#### `math.asin()`

Replace this function's procedure with:

* If `$number` has units, throw an error.

* Let `result` be a number in `rad` whose value is the result of
  `asin($number.value)` as defined by [IEEE 754 2019], §9.2.

* Return the result of [converting `result` to `deg`].

#### `math.atan()`

Replace this function's procedure with:

* If `$number` has units, throw an error.

* Let `result` be a number in `rad` whose value is the result of
  `atan($number.value)` as defined by [IEEE 754 2019], §9.2.

* Return the result of [converting `result` to `deg`].

#### `math.atan2()`

Replace the last line of this function's procedure with:

* Let `result` be a number in `rad` whose value is the result of
  `atan2($y.value, $x.value)` as defined by [IEEE 754 2019], §9.2.

* Return the result of [converting `result` to `deg`].

#### `math.cos()`

Replace this function's procedure with:

* Let `double` be the value of [converting `$number` to `rad`] allowing
  unitless.

  [converting `$number` to `rad`]: #converting-a-number-to-units

* Return a unitless number whose value is the result of `cos(double)` as defined
  by [IEEE 754 2019], §9.2.

#### `math.sin()`

Replace this function's procedure with:

* Let `double` be the value of [converting `$number` to `rad`] allowing
  unitless.

* Return a unitless number whose value is the result of `sin(double)` as defined
  by [IEEE 754 2019], §9.2.

#### `math.tan()`

Replace this function's procedure with:

* Let `double` be the value of [converting `$number` to `rad`] allowing
  unitless.

* Return a unitless number whose value is the result of `tan(double)` as defined
  by [IEEE 754 2019], §9.2.

### Other Functions

#### `math.div()`

Replace the line

* Its value is the result of dividing `$number1`'s value by `$number2`'s value.

with

* Its value is the result of `divide($number1.value, $number2.value)` as defined
  by [IEEE 754 2019], §5.4.1.

# `@for`

## Semantics

To execute a `@for` rule `rule`:

* Let `from` be the result of evaluating the expression in `FromDeclaration`.

* If `rule` has a `ToDeclaration`:

  * Let `to` be the result of evaluating the expression in `ToDeclaration`.

  * Let `exclusive` be `true`.
  
* Otherwise:

  * Let `to` be the result of evaluating the expression in `ThroughDeclaration`.

  * Let `exclusive` be `false`.
  
* If `from` and `to` aren't numbers, throw an error.

* Let `to` be the result of [converting] `to` to `from`'s unit allowing unitless.

  [converting]: ../types/number.md#converting-a-number-to-a-unit

* If `from` and `to` aren't integers, throw an error.

* If `from` is greater than `to`, set `direction` to `-1`. Otherwise, set
  `direction` to `1`.

* If `exclusive` is `false`, set `to` to `to + direction`.

* Let `i` be `from`.

* While `i` is not equal to `to`:

  * [In a new scope]:

    * Add a variable with `rule`'s `VariableName` as its name and `i` as its value
      to the [current scope].

      > Note that this variable will have the same unit that `from`.

    * Execute the `ForBlock`'s statements.

    * Set `i` to `i + direction`.

  [In a new scope]: ../spec.md#running-in-a-new-scope
  [current scope]: ../spec.md#scope

## Draft 1.1

* Only `!default` variables defer to the pre-existing configuration.

# Reconfigurable Modules: Draft 1.1

> This section is non-normative.

In the existing module system each module can only be cofigured once,
the first time it is used. That works well for direct use of modules,
but doesn't allow for "middleware" modules to forward pre-configured,
and re-configurable modules. It is often useful for complex libraries to
provide a "core" module with unopinionated defaults, and then specialized
wrapper modules with more opinionated configurations and additional helpers.
That wrapper package needs to:

1. Set some or all origin-package configurations
2. Allow the user to *also* set some or all origin-package configurations,
   along with new middleware configurations
3. Use the configured origin-package to provide additional members
   based on the fully-configured origin module

Part 3 should be possible in the existing system by writing the `@forward`
rules before the `@use` rules, but parts 1 and 2 are not currently possible
in combination.

This proposal provides a syntax for middleware modules to add configuration
of the root module, without removing that option for end-users.

## Summary

> This section is non-normative.

Sass will add a `with` clause to `@forward`. The `@forward ... with` syntax is
based on the `@use ... with` syntax, but allows the addition of `!default` flags
similar to a [variable declaration][]. Unlike `@use ... with`, unconfigured
origin variables, and variables configured with a `!default` flag, will remain
configurable by any file importing the combined module. For example:

[variable declaration]: ../spec/variables.md#syntax

```scss
// _origin.scss
$hue: 0 !default;
$saturation: 50% !default;
```

```scss
// _middleware.scss
@forward "origin" with (
  $hue: 330 !default, // Can be overridden by importing users.
  $saturation: 70% // Cannot be overridden by importing users.
);
```

```scss
// entrypoint.scss
@use "middleware" with (
  $hue: 120 // override both the origin & middleware !default values
);

// middleware.$hue == 120
// middleware.$saturation == 70%
```

Keyword arguments in the configuration must reference variable names as
defined in the forwarded module, regardless of any concurent `as` clause:

```scss
// _origin.scss
$hue: 0 !default;
$color-hex: #ccc !default;
```

```scss
// _middleware.scss
@forward "origin" as color-* with (
  $hue: 330, // the color-* prefix is not referenced in configuration
  $color-hex: #966
);
```

```scss
// entrypoint.scss
@use "middleware" as m;
// m.$color-hue == 330
// m.$color-hex == #966
```

A `@forward` rule configuration is applied to the source module even if the
forwarding module acts as an entrypoint:

```scss
// _origin.scss
$hue: 0 !default;
```

```scss
// entrypoint.scss
@forward "origin" with (
  $hue: 330 !default
);

@use "origin"; // origin.$hue == 330
```

Multiple configurations can be chained in a single cascading "thread" that
contains zero or more `@forward` rules, and zero or one terminal `@use` rule.
Variables remain open to configuration in the chain as long as every mention
includes the `!default` flag. Multiple threads configuring a single module will
cause an error, even if they originate in the same file.

## Syntax

The new `WithClause` extends `@forward` to the follow grammar:

<x><pre>
**ForwardRule**     ::= '@forward' QuotedString AsClause? (ShowClause | HideClause)?  WithClause?
**WithClause**      ::= 'with' '('
&#32;                     KeywordArgument (',' KeywordArgument)\* ','?
&#32;                   ')'
**ForwardWithArgument** ::= '$' Identifier ':' Expression '!default'?
</pre></x>

## Semantics

The `@forward ... with` semantics builds on the existing proposal for
[Executing Files][], and should be understood as modifying and expanding upon
the existing execution process rather than being a comprehensive replacement.

[Executing Files]: ../accepted/module-system.md#executing-files

Given a source file `file`, a configuration `config`, and an import context
`import`:

* Let `module` be an empty module with the same URL as `file`.

* Let `uses` be an empty map from `@use` rules to [modules][].

* When a `@use` rule `rule` is encountered:

  * If `rule` has a namespace that's the same as another `@use` rule's namespace
    in `file`, throw an error.

  * Let `rule-config` be the empty configuration.

  * If `rule` has a `WithClause`:

    * For each `KeywordArgument` `argument` in this clause:

      * Let `value` be the result of evaluating `argument`'s expression.

      * Add a variable to `rule-config` with the same name as `argument`'s
        identifier and with `value` as its value.

  * Let `module` be the result of [loading][] the module with `rule`'s URL
    and `rule-config`.

  * If `rule` has a `WithClause` that contains any variables that aren't part of
    `module`'s public API or that weren't declared with a `!default` flag in
    `module`, throw an error.

  * Associate `rule` with `module` in `uses`.

* When a `@forward` rule `rule` is encountered:

  * If `rule` has an `AsClause` with identifier `prefix`:

    * Let `rule-config` be an empty configuration.

    * For each variable `variable` in `config`:

      * If `variable`'s name begins with `prefix`:

        * Let `suffix` be the portion of `variable`'s name after `prefix`.

        * Add a variable to `rule-config` with the name `suffix` and with the
          same value as `variable`.

  * Otherwise, let `rule-config` be `config`.

  * If `rule` has a `WithClause`:

    * For each `ForwardWithArgument` `argument` in this clause:

      * If `argument` has a `!default` flag and a variable exists in
        `rule-config` with the same name as `argument`'s identifier, do nothing.

      * Otherwise, let `value` be the result of evaluating `argument`'s
        expression.

      * Add a variable to `rule-config` with the same name as `argument`'s
        identifier, and with `value` as its value.

  * Let `forwarded` be the result of [loading][] the module with `rule`'s URL
    and `rule-config`.

  * If `rule` has a `WithClause` that contains any variables that aren't part of
    `forwarded`'s public API or that weren't declared with a `!default` flag in
    `forwarded`, throw an error.

  * [Forward `forwarded`][forwarding] with `file` through `module`.

> From this point on, the logic remains unchanged.

[modules]: ../accepted/module-system.md#module
[loading]: ../accepted/module-system.md#loading-modules
[forwarding]: ../accepted/module-system.md#forwarding-modules

# `@forward`

The `@forward` rule loads a [module][] from a URL and adds its members to the
public API of the current module without making them available to use within the
current stylesheet.

[module]: ../modules.md#module

## Syntax

The grammar for the `@forward` rule is as follows:

<x><pre>
**ForwardRule**         ::= '@forward' QuotedString AsClause? (ShowClause | HideClause)?  WithClause?
**AsClause**            ::= 'as' [\<ident-token>][] '\*'
**ShowClause**          ::= 'show' MemberName (',' MemberName)\*
**HideClause**          ::= 'hide' MemberName (',' MemberName)\*
**WithClause**          ::= 'with' '('
&#32;                     ForwardWithArgument (',' ForwardWithArgument)\* ','?
&#32;                   ')'
**ForwardWithArgument** ::= '$' Identifier ':' Expression '!default'?
**MemberName**          ::= '$'? [\<ident-token>][]
</pre></x>

`@forward` rules must be at the top level of the document, and must come before
any rules other than `@charset` or `@use`. The `QuotedString`'s contents, known
as the rule's *URL*, must be a [valid URL string][] (for non-[special][] base
URL). No whitespace is allowed after `$` in `MemberName`, or before `*` in
`AsClause`.

## Semantics

> Note that `@forward` *does not* make any APIs available to the current module;
> that is purely the domain of `@use`. It *does* include the forwarded module's
> CSS tree, but it's not visible to `@extend` without also using the module.

To execute a `@forward` rule `rule`:

* If `rule` has an `AsClause` with identifier `prefix`:

  * Let `rule-config` be an empty [configuration] with the same opaque ID as
    [the current configuration].

  * For each variable `variable` in the current configuration:

    * If `variable`'s name begins with `prefix`:

      * Let `suffix` be the portion of `variable`'s name after `prefix`.

      * Add a variable to `rule-config` with the name `suffix` and with the
        same value as `variable`.

  [configuration]: ../modules.md#configuration
  [the current configuration]: ../spec.md#current-configuration

* Otherwise, let `rule-config` be the current configuration.

* If `rule` has a `WithClause`:

  * Set `rule-config` to a copy of itself including its opaque ID.

  * For each `ForwardWithArgument` `argument` in this clause:

    * If `argument` has a `!default` flag and a variable exists in `rule-config`
      with the same name as `argument`'s identifier, do nothing.

    * Otherwise, let `value` be the result of evaluating `argument`'s
      expression.

    * Add a variable to `rule-config` with the same name as `argument`'s
      identifier, and with `value` as its value.

* Let `forwarded` be the result of [loading the module][] with `rule`'s URL
  string and `rule-config`.

  [loading the module]: ../modules.md#loading-a-module

* If `rule` has a `WithClause`:

  * For each `ForwardWithArgument` `argument` in this clause:

    * Let `variable` be the variable in `module` with the same name as
      `argument`'s identifier. If no such variable exists, throw an error.

    * If `variable` wasn't declared with a `!default` flag, throw an error.

* For every member `member` in `forwarded`:

  * Let `name` be `member`'s name.

  * If `rule` has an `AsClause` `as`, prepend `as`'s identifier to `name` (after
    the `$` if `member` is a variable).

  * If there's a member defined at the top level of [the current source file][]
    named `name` with the same type as `member`, do nothing.

  * Otherwise, if `rule` has a `show` clause that doesn't include `name`
    (including `$` for variables), do nothing.

    > It's not possible to show/hide a mixin without showing/hiding the
    > equivalent function, or to do the reverse.

  * Otherwise, if `rule` has a `hide` clause that does include `name` (including
    `$` for variables), do nothing.

  * If another `@forward` rule's module has a member named `name` with the same
    type as `member`:

    * If the other member is [identical to][] `member`, do nothing.

    * Otherwise, throw an error.

  * Otherwise, add `member` to [the current module][] with the name `name`.

    > It's possible for the same member to be added to a given module multiple
    > times if it's forwarded with different prefixes. All of these names refer
    > to the same logical member, so for example if a variable gets set that
    > change will appear for all of its names.
    >
    > It's also possible for a module's members to have multiple prefixes added,
    > if they're forwarded with prefixes multiple times.

  [the current source file]: ../spec.md#current-source-file
  [identical to]: ../modules.md#member
  [the current module]: ../spec.md#current-module

# Free Interpolation

"Free interpolation" refers to interpolation that appears in SassScript values
outside of a quoted string. Earlier versions of Sass had very convoluted rules
for parsing free interpolation, but the current rule is very simple:
interpolation is parsed as though it were an alphabetic character in an
identifier...

# Normalizing Free Interpolation in SassScript

Spurred by [#1774][], I started thinking about how messy interpolation is in
SassScript at the moment and how to clean it up. This issue is the result of
that thought process.

## History

Long ago, when only the indented syntax existed, SassScript couldn't be used
directly in property values. 
Eventually, we figured out how to make SassScript compatible enough with CSS property values that we decided to
just let properties use it directly. For backwards compatibility, these
properties still needed to support interpolation, so we came up with a way to
have interpolation work more or less anywhere in a SassScript expression.
Unfortunately, working "more or less anywhere" was a parsing nightmare, and the
specifics of where interpolation can be used and its effect on the surrounding
script are bizarre and arcane. Chris and I want to fix that by substantially
limiting the places can appear and clarifying exactly what it does to the
surrounding script.

## Proposal

* When parsing or evaluating a quoted string, treat interpolation the same way
  it's treated today.
* When parsing an identifier, treat interpolation as though it's an alphabetic
  character. When evaluating an interpolated unquoted string, concatenate the
  literal identifier characters with the values of the interpolated segments.
* Otherwise, parse an interpolation as an individual expression. When evaluating
  it, return its value as an unquoted string.

Here are some examples (I'm including quotes for unquoted strings in the output
to clarify their extents):

## Design decisions

The primary question when figuring out how to handle this was how much
interpolation should be restricted. Chris and I agree that interpolation in
SassScript reads strangely in many situations, but we ended up deciding to
continue allowing it in most places. One major reason for this is
backwards-compatibility: no matter what we do, the process of making this change
will be painful, and any functionality we can preserve will help mitigate that
pain. But there were also compelling use cases for retaining interpolation in
various situations.

### Interpolation in unquoted strings

It was tempting to restrict interpolation for use *only* in quoted strings.
Interpolation in unquoted strings can be mimicked using `+`, and allowing it in
unquoted strings could produce the incorrect impression that interpolation is
performed before any other SassScript resolution. However, we decided to allow
this for several reasons:

* Backwards compatibility, as described above.
* Similarity with quoted strings. It's not always obvious that unquoted strings
  and quoted strings are the same sorts of value under the hood, but sharing
  capabilities helps reinforce that idea.
* Similarity with other identifiers. Interpolation can be used in almost all
  most non-SassScript contexts where identifiers appear, most notably property
  names, so it's natural that users would think that all Sass identifiers can be
  interpolated.
* Vendor prefixes. It would be very difficult to dynamically choose vendor
  prefixes for function names or other values, since `-` on its own is not an
  identifier.
* Aesthetics.

### Interpolation outside of strings

The other big decision was whether to allow a bare interpolation expression that
wasn't attached to any string at all. Both of us were fine with deprecating this
until we remembered one situation where it's by far the best solution: a slash
delimited. 

We considered coming up with a new way to produce a literal slash without using
interpolation, but we didn't find anything that was clear enough to warrant the
migration cost for all the stylesheets using the current method. In the end, we
decided that since the current method looks pretty decent and can work with a
more reasonable definition of standalone interpolation, we would leave it as-is.

## Deprecation process

Any change we make here will be backwards-incompatible. Since interpolation is
such an old feature, we have to be very careful to only surface deprecation
warnings to people whose stylesheet semantics will actually change (or as close
as possible), and to provide them with actionable ways to fix those stylesheets.
This is complicated by the fact that the effects of this change are difficult to
reason about locally.

Let S1 be the value of an expression containing interpolation under the old
rules, and E the value of the same expression under the new rules. 

Formalizing this requires a more explicit notion of how to detect when S1 and S2
are CSS-semantically identical, and how to tell which operations would be a
problem in the second case, which we'll get to below.

### Deprecation warnings

Now that we (hopefully) have a clear idea of how free interpolation works right
now, we can start figuring out the surface area that needs deprecation warnings
when moving to the new semantics.

Ideally, we want to warn only when the new semantics will produce *semantically
different* CSS output. In practice determining this exactly isn't always
feasible, since free interpolation produces values that can be used in many
heterogeneous ways, so instead we'll warn if the values they produce are ever
used in a way that will change behavior under the new semantics.

## Draft 1.1

* Fix a few places where `color.change()` was incorrectly referred to as
  `color.scale()`.

## Draft 1

* Initial draft.

# Function Units: Draft 1.1

> This section is non-normative.

Sass functions added early during Sass's lifetime were generally quite
permissive, allowing numbers with units to be passed even if the units were
ignored. However, this is often quite confusing in practice; for example, a user
might expect that `color.adjust($color, $alpha: -1%)` would return a color with
`0.01` less alpha. In fact it returns a transparent color, because the unit is
ignored entirely.

In some cases, CSS has even added support for units to functions after the
fact—including support for [percentages in alpha values]. In that case, Sass has
been forced to deprecate passing incorrect units to those functions before
adding support for new units.

## Summary

> This section is non-normative.

This proposal adds the following restrictions:

* The `$alpha` parameter to `color.adjust()`, `color.change()`, `opacify()`,
  `fade-in()`, `transparentize()`, and `fade-out()` may be either unitless or
  use the `%` unit. If it uses `%`, it's divided by `100%` before using it.

* The `$weight` parameter to `color.mix()` must have unit `%`.

* The `$n` parameter to `list.nth()` and `list.set-nth()` may not have units.

### Design Decisions

#### Alpha Units

One alternative would be to forbid units in `$alpha` parameters entirely, as
we're doing for `$n` parameters. However, since [Colors Level 4] supports
percentage-style alphas (as do Sass's `hsl()`, `rgb()`, and `hwb()` functions),
it's much more friendly and consistent to allow them.

There is some risk that users are already passing `%` units to alpha values and
will have their colors change unexpectedly. However, deprecation warnings should
alert these users in time to change their code, and even if they miss the
warnings it's likely they expected the new behavior in the first place so in a
sense the change will be a bug fix for them.

## Functions

> `opacify()`, `fade-in()`, `transparentize()`, and `fade-out()` don't need to
> be modified explicitly because they're defined as calling `color.adjust()`
> internally.

### `color.adjust()`

Replace the "If `$alpha` isn't null" block with the following:

* If `$alpha` isn't null:

  * If `$alpha` isn't a number, throw an error.

  * If `$alpha` has units other than `%`, throw an error.

  * If `$alpha` has unit `%`, set it to `math.div($alpha, 100%)`.

  * If `$alpha` isn't a number between -1 and 1 (inclusive), throw an error.

  * Set `alpha` to `alpha + $alpha` clamped between 0 and 1.

### `color.change()`

Replace

* If `$alpha` isn't either null or a number between 0 and 1 (inclusive), throw
  an error.

* Let `alpha` be `$color`'s alpha channel if `$alpha` is null or `$alpha`
  without units otherwise.

with

* If `$alpha` is null, let `alpha` be `$color`'s alpha channel. Otherwise:

  * If `$alpha` isn't a number, throw an error.

  * If `$alpha` has units other than `%`, throw an error.

  * If `$alpha` has unit `%`, set it to `math.div($alpha, 100%)`.

  * If `$alpha` isn't a number between 0 and 1 (inclusive), throw an error.

  * Let `alpha` be `$alpha`.

### `color.mix()`

Add the following to the beginning of the function's definition:

* If `$weight` isn't a number with unit `%`, throw an error.

### `list.nth()` and `list.set-nth()`

Add the following to the beginning of these functions' definitions:

* If `$n` isn't a unitless integer, throw an error.

## Deprecation Process

Before an implementation releases its next major version, it should make the
following changes instead of those listed above:

### `color.adjust()`

Add the following to the beginning of the "If `$alpha` isn't null" block:

* If `$alpha` has any units, emit a deprecation warning.

### `color.change()`

Replace

* If `$alpha` isn't either null or a number between 0 and 1 (inclusive), throw
  an error.

* Let `alpha` be `$color`'s alpha channel if `$alpha` is null or `$alpha`
  without units otherwise.

with

* If `$alpha` is null, let `alpha` be `$color`'s alpha channel. Otherwise:

  * If `$alpha` isn't a number, throw an error.

  * If `$alpha` has any units, emit a deprecation warning.

  * If `$alpha` isn't a number between 0 and 1 (inclusive), throw an error.

  * Let `alpha` be `$alpha`.

### `color.mix()`

Add the following to the beginning of the function's definition:

* If `$weight` is a unitless number or a number with units other than `%`, emit
  a deprecation warning.

### `list.nth()` and `list.set-nth()`

Add the following to the beginning of these functions' definitions:

* If `$n` is a number with units, emit a deprecation warning.

# Function Value API

## Types

### `SassFunction`

The JS API representation of a Sass function.


#### `internal`

The [private `internal` field] refers to a Sass function.

[private `internal` field]: index.d.ts.md#internal

#### Constructor

Creates a Sass function:

* If `signature` isn't a valid Sass function signature that could appear after
  the `@function` directive in a Sass stylesheet (such as `mix($color1, $color2,
  $weight: 50%)`), the implementation *may* throw an error.

  > This is optional to allow for implementations of the value API that don't
  > have easy access to a Sass parser, such as the embedded host. These
  > implementations must instead throw an error when the invalid function is
  > returned from the custom function.

* Set `internal` to a Sass function with signature set to `signature` that, upon
  execution, runs `callback` and returns the result.

* Return `this`.

```ts
constructor(signature: string, callback: (args: Value[]) => Value);
```

```ts
} // SassFunction
```
# `@function`

No whitespace is allowed between the `Identifier` and the `ArgumentDeclaration`
in `FunctionRule`.

## Semantics

To execute a `@function` rule `rule`:

* Let `name` be the value of `rule`'s `Identifier`.

* If `name` is `calc`, `element`, `expression`, `url`, `and`, `or`, or `not`, or
  if `name` has a [vendor prefix] and the unprefixed identifier is one of those
  strings, throw an error.

  [vendor prefix]: ../syntax.md#vendor-prefix

* Let `parent` be the [current scope].

  [current scope]: ../spec.md#scope

* Let `function` be a [function] named `name` which does the following when
  executed with `args`:

  [function]: ../types/functions.md

  * With the current scope set to an empty [scope] with `parent` as its parent:

    * Evaluate `args` with `rule`'s `ArgumentDeclaration`.

    * Execute each statement in `rule`.

    * Return the value from the `@return` rule if one was executed, or throw an
      error if no `@return` rule was executed.

  [scope]: ../spec.md#scope
  
  # Functions

## Definitions

### Special Number

A *special number* is either:

* a [calculation], or
* an unquoted string that CSS will recognize as a function that may return a
  number. For the purposes of Sass, this is any unquoted string that begins with
  `calc(`, `var(`, `env(`, `clamp(`, `min(`, or `max(`. This matching is
  case-insensitive.

[calculation]: types/calculation.md

> Sass functions that shadow CSS functions must work with any invocation that
> CSS allows, which includes allowing special numbers anywhere a number would be
> allowed.

### Special Variable String

A *special variable string* is [special number] that begins with `var(`. This
matching is case-insensitive.

[special number]: #special-number

> Unlike other special numbers, variables can expand into multiple arguments to
> a single function.

## Syntax

<x><pre>
**FunctionExpression**¹ ::= [SpecialFunctionExpression]
&#32;                     | EmptyFallbackVar
&#32;                     | FunctionCall
**EmptyFallbackVar**²   ::= 'var(' Expression ',' ')'
**FunctionCall**⁴       ::= [NamespacedIdentifier] ArgumentInvocation
</pre></x>

[SpecialFunctionExpression]: syntax.md#specialfunctionexpression
[NamespacedIdentifier]: modules.md#syntax

1: Both `CssMinMax` and `EmptyFallbackVar` take precedence over `FunctionCall`
   if either could be consumed.

2: `'var('` is matched case-insensitively.

4: `FunctionCall` may not have any whitespace between the `NamespacedIdentifier`
   and the `ArgumentInvocation`. It may not start with [`SpecialFunctionName`],
   `'calc('`, or `'clamp('` (case-insensitively).

[`SpecialFunctionName`]: syntax.md#specialfunctionexpression

<x><pre>
**FunctionCall** ::= [NamespacedIdentifier][] ArgumentInvocation
</pre></x>

No whitespace is allowed between the `NamespacedIdentifier` and the
`ArgumentInvocation` in `FunctionCall`.

## Semantics

### `EmptyFallbackVar`

To evaluate an `EmptyFallbackVar` `call`:

* Let `argument` be the result of evaluating `call`'s `Expression`.

* Let `function` be the result of [resolving a function] named `'var'`.

  [resolving a function]: modules.md#resolving-a-member

* If `function` is null, return an unquoted string consisting of `'var('`
  followed by `argument`'s CSS representation followed by `',)'`.

* Return the result of calling `function` with `argument` as its first argument
  and an empty unquoted string as its second argument.

### `FunctionCall`

To evaluate a `FunctionCall` `call`:

* Let `name` be `call`'s `NamespacedIdentifier`.

* Let `function` be the result of [resolving a function][] named `name`.

* If `function` is null and `name` is not a plain `Identifier`, throw an error.

* If `function` is null; `name` is case-insensitively equal to `"min"`, `"max"`,
  `"round"`, or `"abs"`; `call`'s `ArgumentInvocation` doesn't have any
  `KeywordArgument`s or `RestArgument`s; and all arguments in `call`'s
  `ArgumentInvocation` are [calculation-safe], return the result of evaluating
  `call` [as a calculation].

  [calculation-safe]: types/calculation.md#calculation-safe-expression
  [as a calculation]: types/calculation.md#evaluating-a-functioncall-as-a-calculation

  > For calculation functions that overlap with global Sass function names, we
  > want anything Sass-specific like this to end up calling the Sass function.
  > For all other calculation functions, we want those constructs to throw an
  > error (which they do when evaluating `call` [as a calculation]).

* If `function` is null and `name` is case-insensitively equal to `"calc"`,
  `"clamp"`, `"hypot"`, `"sin"`, `"cos"`, `"tan"`, `"asin"`, `"acos"`, `"atan"`,
  `"sqrt"`, `"exp"`, `"sign"`, `"mod"`, `"rem"`, `"atan2"`, `"pow"`, or `"log"`,
  return the result of evaluating `call` [as a calculation].

* If `function` is null, set it to the [global function](#global-functions)
  named `name`.

* If `function` is still null:

  * Let `list` be the result of evaluating `call`'s `ArgumentInvocation`.

  * If `list` has keywords, throw an error.

  * Return an unquoted string representing a CSS function call with name `name`
    and arguments `list`.

* Execute `call`'s `ArgumentInvocation` with `function`'s `ArgumentDeclaration`
  in `function`'s scope.

* Execute each statement in `function` until a `ReturnRule` `return` that's
  lexically contained in `function`'s `Statements` is encountered. If no such
  statement is encountered, throw an error.

* Evaluate `return`'s `Expression` and return the result.

## Global Functions

> While most built-in Sass functions are defined in [built-in modules][], a few
> are globally available with no `@use` necessary. These are mostly functions
> that expand upon the behavior of plain CSS functions.
>
> [built-in modules]: modules.md#built-in-module
>
> In addition, many functions that *are* defined in built-in modules have global
> aliases for backwards-compatibility with stylesheets written before `@use` was
> introduced. These global aliases should be avoided by stylesheet authors if
> possible.

### `adjust-hue()`

```
adjust-hue($color, $degrees)
```

* If `$color` isn't a color or `$degrees` isn't a number, throw an error.

* Let `degrees` be the result of [converting] `$degrees` to `deg` allowing
  unitless.

* Let `saturation` and `lightness` be the result of calling
  [`color.saturation($color)`] and [`color.lightness($color)`], respectively.

* Return the result of calling [`hsl()`] with `degree`, `saturation`,
  `lightness`, and `$color`'s alpha channel.

[`hsl()`]: #hsl-and-hsla
[`color.saturation($color)`]: built-in-modules/color.md#saturation
[`color.lightness($color)`]: built-in-modules/color.md#lightness

### `alpha()`

* ```
  alpha($color)
  ```

  * If `$color` is not a string, call the other overload and return its result.

  * Return the alpha channel of `$color` as a unitless number.

* ```
  alpha($args...)
  ```

  > This overload exists to support Microsoft's proprietary [`alpha()`
  > function][].

  * If `$args` is empty, throw an error.

  * If `$args` has any keyword arguments, throw an error.

  * Unless all arguments of `$args` are unquoted strings that begin with a
    sequence of ASCII letters, followed by one or more spaces, followed by `=`
    throw an error.

  * Return a plain CSS function string with the name `"alpha"` and the arguments
    `$args`.

### `rgb()` and `rgba()`

The `rgba()` function is identical to `rgb()`, except that if it would return a
plain CSS function named `"rgb"` that function is named `"rgba"` instead.

* ```
  rgb($red, $green, $blue, $alpha)
  ```

  * If any argument is a [special number], return a plain CSS function
    string with the name `"rgb"` and the arguments `$red`, `$green`, `$blue`,
    and `$alpha`.

  * If any of `$red`, `$green`, `$blue`, or `$alpha` aren't numbers, throw an
    error.

  * Let `red`, `green`, and `blue` be the result of [percent-converting][]
    `$red`, `$green`, and `$blue`, respectively, with a `max` of 255.

  * Let `alpha` be the result of percent-converting `$alpha` with a `max` of 1.

  * Return a color with the given `red`, `green`, `blue`, and `alpha` channels.

  [percent-converting]: built-in-modules/color.md#percent-converting-a-number

* ```
  rgb($red, $green, $blue)
  ```

  * If any argument is a [special number], return a plain CSS function string
    with the name `"rgb"` and the arguments `$red`, `$green`, and `$blue`.

  * Otherwise, return the result of calling `rgb()` with `$red`, `$green`,
    `$blue`, and `1`.

* ```
  rgb($color, $alpha)
  ```

  * If either argument is a [special variable string][], return a plain CSS
    function string with the name `"rgb"` and the same arguments.

  * If `$color` isn't a color, throw an error.

  * Call `rgb()` with `$color`'s red, green, and blue channels as unitless
    number arguments, and with `$alpha` as the final argument. Return the
    result.

* ```
  rgb($channels)
  ```

  * If `$channels` is a [special variable string][], return a plain CSS function
    string with the name `"rgb"` and the argument `$channels`.

  * If `$channels` is an unbracketed slash-separated list:

    * If `$channels` doesn't have exactly two elements, throw an error.
      Otherwise, let `rgb` be the first element and `alpha` the second element.

    * If either `rgb` or `alpha` is a special variable string, return a plain
      CSS function string with the name `"rgb"` and the argument `$channels`.

    * If `rgb` is not an unbracketed space-separated list, throw an error.

    * If the first element of `rgb` is an unquoted string which is
      case-insensitively equal to `from`, return a plain CSS function string
      with the name `"rgb"` and the argument `$channels`.

    * If `rgb` has more than three elements, throw an error.

    * If `rgb` has fewer than three elements:

      * If any element of `rgb` is a [special variable string][], return a
        plain CSS function string with the name `"rgb"` and the argument
        `$channels`.

      * Otherwise, throw an error.

    * Let `red`, `green`, and `blue` be the three elements of `rgb`.

    * Call `rgb()` with `red`, `green`, `blue`, and `alpha` as arguments and
      return the result.

  * If `$channels` is not an unbracketed space-separated list, throw an error.

  * If the first element of `$channels` is an unquoted string which is
    case-insensitively equal to `from`, return a plain CSS function string
    with the name `"rgb"` and the argument `$channels`.

  * If `$channels` has more than three elements, throw an error.

  * If `$channels` has fewer than three elements:

    * If any element of `$channels` is a [special variable string][], return a
      plain CSS function string with the name `"rgb"` and the argument
      `$channels`.

    * If the last element of `$channels` is an unquoted string that begins with
      `var(` and contains `/`, return a plain CSS function string with the name
      `"rgb"` and the argument `$channels`.

    * Otherwise, throw an error.

  * Let `red` and `green` be the first two elements of `$channels`.

  * If the third element of `$channels` is an unquoted string that contains `/`:

    * Return a plain CSS function string with the name `"rgb"` and the argument
      `$channels`.

  * Otherwise, if the third element of `$channels` has preserved its status as
    two slash-separated numbers:

    * Let `blue` be the number before the slash and `alpha` the number after the
      slash.

  * Otherwise:

    * Let `blue` be the third element of `$channels`.

  * Call `rgb()` with `red`, `green`, `blue`, and `alpha` (if it's defined) as
    arguments and return the result.

  [special variable string]: #special-variable-string

### `hsl()` and `hsla()`

The `hsla()` function is identical to `hsl()`, except that if it would return a
plain CSS function named `"hsl"` that function is named `"hsla"` instead.

* ```
  hsl($hue, $saturation, $lightness, $alpha: 1)
  ```

  * If any argument is a [special number], return a plain CSS function
    string with the name `"hsl"` and the arguments `$hue`, `$saturation`,
    `$lightness`, and `$alpha`.

  * If any of `$hue`, `$saturation`, `$lightness`, or `$alpha` aren't numbers,
    throw an error.

  * Let `hue` be the result of [converting] `$hue` to `deg` allowing unitless.

  * If `$saturation` and `$lightness` don't have unit `%`, throw an error.

  * Let `saturation` and `lightness` be the result of clamping `$saturation` and
    `$lightness`, respectively, between `0%` and `100%` and dividing by `100%`.

  * Let `red`, `green`, and `blue` be the result of converting `hue`,
    `saturation`, and `lightness` [to RGB][].

  * Set `red`, `green`, and `blue` to their existing values multiplied by 255
    and rounded to the nearest integers.

  * Let `alpha` be the result of [percent-converting][] `$alpha` with a `max` of 1.

  * Return a color with the given `red`, `green`, `blue`, and `alpha` channels.

  [converting]: types/number.md#converting-a-number-to-a-unit
* ```
  hsl($hue, $saturation, $lightness)
  ```

  * If any argument is a [special number], return a plain CSS function string
    with the name `"hsl"` and the arguments `$hue`, `$saturation`, and
    `$lightness`.

  * Otherwise, return the result of calling `hsl()` with `$hue`, `$saturation`,
    `$lightness`, and `1`.

* ```
  hsl($hue, $saturation)
  ```

  * If either argument is a [special variable string][], return a plain CSS
    function string with the name `"hsl"` and the same arguments.

  * Otherwise, throw an error.

* ```
  hsl($channels)
  ```

  * If `$channels` is a [special variable string][], return a plain CSS function
    string with the name `"hsl"` and the argument `$channels`.

  * If `$channels` is an unbracketed slash-separated list:

    * If `$channels` doesn't have exactly two elements, throw an error.
      Otherwise, let `hsl` be the first element and `alpha` the second element.

    * If either `hsl` or `alpha` is a special variable string, return a plain
      CSS function string with the name `"hsl"` and the argument `$channels`.

    * If `hsl` is not an unbracketed space-separated list, throw an error.

    * If the first element of `hsl` is an unquoted string which is
      case-insensitively equal to `from`, return a plain CSS function string
      with the name `"hsl"` and the argument `$channels`.

    * If `hsl` has more than three elements, throw an error.

    * If `hsl` has fewer than three elements:

      * If any element of `hsl` is a [special variable string][], return a
        plain CSS function string with the name `"hsl"` and the argument
        `$channels`.

      * Otherwise, throw an error.

    * Let `hue`, `saturation`, and `lightness` be the three elements of `hsl`.

    * Call `hsl()` with `hue`, `saturation`, `lightness`, and `alpha` as
      arguments and return the result.

  * If `$channels` is not an unbracketed space-separated list, throw an error.

  * If the first element of `$channels` is an unquoted string which is
    case-insensitively equal to `from`, return a plain CSS function string
    with the name `"hsl"` and the argument `$channels`.

  * If `$channels` has more than three elements, throw an error.

  * If `$channels` has fewer than three elements:

    * If any element of `$channels` is a [special variable string][], return a
      plain CSS function string with the name `"hsl"` and the argument
      `$channels`.

    * If the last element of `$channels` is an unquoted string that begins with
      `var(` and contains `/`, return a plain CSS function string with the name
      `"hsl"` and the argument `$channels`.

    * Otherwise, throw an error.

  * Let `hue` and `saturation` be the first two elements of `$channels`.

  * If the third element of `$channels` is an unquoted string that contains `/`:

    * Return a plain CSS function string with the name `"rgb"` and the argument
      `$channels`.

  * Otherwise, if the third element of `$channels` has preserved its status as
    two slash-separated numbers:

    * Let `lightness` be the number before the slash and `alpha` the number
      after the slash.

  * Otherwise:

    * Let `lightness` be the third element of `$channels`.

  * Call `hsl()` with `hue`, `saturation`, `lightness`, and `alpha` (if it's
    defined) as arguments and return the result.

### `if()`

```
if($condition, $if-true, $if-false)
```

# Functions

## Types

The value type known as a "function" is a procedure that takes an
`ArgumentInvocation` `args` and returns a SassScript value. Each function has a
string name.

> The specific details of executing this procedure differ depending on where and
> how the function is defined.

### Operations

A function follows the default behavior of all SassScript operations, except
that equality is defined as below.

#### Equality

Functions use reference equality: two function values are equal only if they
refer to the exact same instance of the same procedure.

### Serialization

To serialize a function value:

* If the value is not being inspected, throw an error.

* Otherwise, emit `'get-function("'`, then the function's name, then `'")'`.
# First-Class `calc()`: Draft 2

> This section is non-normative.

CSS's [`calc()`] syntax for mathematical expressions has existed for a long
time, and it's always represented a high-friction point in its interactions with
Sass. Sass currently treats `calc()` expressions as fully opaque, allowing
almost any sequence of tokens within the parentheses and evaluating it to an
unquoted string. Interpolation is required to use Sass variables in `calc()`
expressions, and once an expression is created it can't be inspected or
manipulated in any way other than using Sass's string functions.

As `calc()` and related mathematical expression functions become more widely
used in CSS, this friction is becoming more and more annoying. In addition, the
move towards using [`/` as a separator] makes it desirable to use `calc()`
syntax as a way to write expressions using mathematical syntax that can be
resolved at compile-time.

[`/` as a separator]: ../accepted/slash-separator.md

## Summary

> This section is non-normative.

This proposal changes `calc()` (and other supported mathematical functions) from
being parsed as unquoted strings to being parsed in-depth, and sometimes
(although not always) producing a new data type known as a "calculation". This
data type represents mathematical expressions that can't be resolved at
compile-time, such as `calc(10% + 5px)`, and allows those expressions to be
combined gracefully within further mathematical functions.

To be more specific: a `calc()` expression will be parsed according to the [CSS
syntax], with additional support for Sass variables, functions, and (for
backwards compatibility) interpolation. Sass will perform as much math as is
possible at compile-time, and if the result is a single number it will return
that number. Otherwise, it will return a calculation that represents the
(simplified) expression that can be resolved in the browser.

For example:

* `calc(1px + 10px)` will return the number `11px`.

* Similarly, if `$length` is `10px`, `calc(1px + $length)` will return `11px`.

* However, `calc(1px + 10%)` will return the calc `calc(1px + 10%)`.

* If `$length` is `calc(1px + 10%)`, `calc(1px + $length)` will return
  `calc(2px + 10%)`.

* Sass functions can be used directly in `calc()`, so `calc(1% +
  math.round(15.3px))` returns `calc(1% + 15px)`.

Note that calculations cannot generally be used in place of numbers. For
example, `1px + calc(1px + 10%)` will produce an error, as will
`math.round(calc(1px + 10%))`.

For backwards compatibility, `calc()` expressions that contain interpolation
will continue to be parsed using the old highly-permissive syntax, although this
behavior will eventually be deprecated and removed. These expressions will still
return calculation values, but they'll never be simplified or resolve to plain
numbers.

### Design Decisions

#### "Contagious" Calculations

In this proposal, calculation objects throw errors if they're used with normal
SassScript level math operations (`+`, `-`, `*`, and `%`). Another option would
have been to make calculations "contagious", so that performing these operations
with at least one calculation operand would produce another calculation as a
result. For example, instead of throwing an error `1px + calc(100px + 10%)`
would produce `calc(101px + 10%)` (or possibly just `calc(1px + 100px + 10%)`).

We chose not to do this because calculations aren't *always* interchangeable
with plain numbers, so making them contagious in this way could lead to
situations where a calculation entered a set of functions that only expected
numbers and ended up producing an error far away in space or time from the
actual source of the issue. For example:

* Miriam publishes a Sass library with a function, `frobnicate()`, which does a
  bunch of arithmetic on its argument and returns a result.

* Jina tries calling `frobnicate(calc(100px + 10%))`. This works, so she commits
  it and ships to production.

* Miriam updates the implementation of `frobnicate()` to call `math.log()`,
  which does not support calculations. She doesn't realize this is a breaking
  change, since she was only ever expecting numbers to be passed.

* Jina updates to the newest version of Miriam's library and is unexpectedly
  broken.

To avoid this issue, we've made it so that the only operations that support
calculations are those within `calc()` expressions. This follows Sass's broad
principle of "don't design for users using upstream stylesheets in ways they
weren't intended to be used".

Going back to the example above, if Miriam *did* want to support calculations,
she could simply wrap `calc()` around any mathematical expressions she writes.
This will still return plain numbers when given compatible numbers as inputs,
but it will also make it clear that `calc()`s are supported and that Miriam
expects to support them on into the future.

#### Returning Numbers

In plain CSS, the expression `calc(<number>)` is not strictly equivalent to the
same `<number>` on its own (and same for `calc(<dimension>)`). In certain
property contexts, a `calc()`'s value can be rounded or clamped, so for example
`width: calc(-5px)` and `z-index: calc(1.2)` are equivalent to `width: 0` and
`z-index: 1`.

In this proposal, rather than preserving calculations whose arguments are plain
numbers or dimensions as `calc()` expressions, we convert them to Sass numbers.
This is technically a slight violation of CSS compatibility, because it avoids
the rounding/clamping behavior described above. However, we judge this slight
incompatibility to be worthwhile for a number of reasons:

* We get a lot of value from allowing calculations to simplify to numbers. In
  addition to making it easier to work with `calc()` for its own sake, this
  simplification makes it possible to use `calc()` to write division expressions
  using `/`. Since `/`-as-division is otherwise deprecated due to `/` being used
  as a separator in CSS, this provides a substantial ergonomic benefit to users.

* Any situation where a *build-time calculation* could produce a number that
  needs to be clamped or rounded in order to be valid is likely to be a result
  of user error, and we generally have lower compatibility requirements for
  errors than we do for valid and useful CSS. We know of no use-case for writing
  CSS like `width: calc(-5px)` instead of `width: 0`. The use-case for CSS's
  clamping and rounding behavior is for browse-time calculations like
  `calc(20px - 3em)`, and these will continue to be emitted as `calc()`
  expressions.


#### Interpolation in `calc()`

Historically, interpolation has been the only means of injecting SassScript
values into `calc()` expressions, so for backwards compatibility, we must
continue to support it to some degree. Exactly to what degree and how it
integrates with first-class calculation is a question with multiple possible
answers, though.

The answer we settled on was to handle interpolation in a similar way to how we
handled backwards-compatibility with Sass's [`min()` and `max()` functions]: by
parsing `calc()` expressions using the old logic if they contain any
interpolation and continuing to treat those values as opaque strings, and only
using the new parsing logic for calculations that contain no interpolation. This
is maximally backwards-compatible and it doesn't require interpolated
calculations to be reparsed after interpolation.

[`min()` and `max()` functions]: ../accepted/min-max.md

#### Vendor Prefixed `calc()`

Although `calc()` is now widely supported in all modern browsers, older versions
of Firefox, Chrome, and Safari supported it only with a vendor prefix. Sass in
turn supported those browsers by handling `calc()`'s special function parsing
with arbitrary vendor prefixes as well. However, time has passed, those browser
versions have essentially no usage any more, and we don't anticipate anyone is
looking to write new stylesheets that target them.

As such, this proposal only adds first-class calculation support for the
`calc()` function without any prefixes. For backwards-compatibility,
vendor-prefixed `calc()` expressions will continue to be parsed as opaque
special functions the way they always have, but they will not be interoperable
with any of the new calculation features this proposal adds.

#### Complex Simplification

Since this spec does have support for simplifying calculations to some degree,
it would make some sense for it to try to minimize the output size of all
`calc()` and related expressions it emits to CSS. However, as currently written,
it only simplifies enough to ensure that if the entire calculation reduces to a
single number that number can be returned.

For example, the current specification doesn't simplify expressions like
`calc(1px + var(--length) + 1px)` to `calc(2px + var(--length))` or `calc(-1 *
(10% + 5px))` to `calc(-10% - 5px)`. This is for ease of specification and
implementation: simplifications of these sorts are highly complex and would make
designing, testing, and implementing this spec substantially more difficult.

It's possible a future proposal will add support for this advanced
simplification logic later on. Until then, it's probably better to leave it to
post-processors that are dedicated to CSS minification.

## Definitions

### Possibly-Compatible Units

Two units are *possibly-compatible* with one another if and only if either both
units appear in the same row in the following table, or either unit doesn't
appear in the following table. Units are matched case-insensitively to determine
possible-compatibility.

> This is intended to be kept in sync with the unit types in [CSS Values and
> Units]. Note that all unknown units are possibly-compatible with all other
> units; this preserves forwards-compatibility with new units that are
> introduced in browsers over time.


| Type           | Units                                                                                        |
| -------------- | -------------------------------------------------------------------------------------------- |
| `<length>`     | `em`, `ex`, `ch`, `rem`, `vw`, `vh`, `vmin`, `vmax`, `cm`, `mm`, `Q`, `in`, `pt`, `pc`, `px` |
| `<angle>`      | `deg`, `grad`, `rad`, `turn`                                                                 |
| `<time>`       | `s`, `ms`                                                                                    |
| `<frequency>`  | `Hz`, `kHz`                                                                                  |
| `<resolution>` | `dpi`, `dpcm`, `dppx`                                                                        |

### Possibly-Compatible Numbers

Two numbers are *possibly-compatible* if there's a one-to-one mapping between
their numerator units, and another such mapping between their denominator units,
such that each pair of units is [possibly-compatible](#possibly-compatible-units).
Two numbers are *definitely-incompatible* if they are not possibly-compatible.

> The definition of definite-incompatibility captures the notion of numbers that
> can be determined at build time to be incompatible with one another, and thus
> erroneous to ever combine. This allows us to eagerly produce error messages
> for certain incompatible units rather than serving them to the browser where
> they're much more difficult to debug.
>
> For example, `1px` is possibly-compatible with `2em`. Unitless numbers are
> only possibly-compatible with other unitless numbers. In theory, this
> definition defines a notion of possible-compatiblity for numbers with more
> complex units, but in practice these numbers are already flagged as errors
> prior to any possible-compatibility checks.

### Special Number

Replace the definition of [special number string] with the following definition:

[special number string]: ../spec/functions.md#special-number

A *special number* is either:

* a calculation, or
* an unquoted string that CSS will recognize as a function that may return a
  number. For the purposes of Sass, this is any unquoted string that begins with
  `calc(`, `var(`, `env(`, `clamp(`, `min(`, or `max(`. This matching is
  case-insensitive.

In addition, replace all references to special number strings with references to special
numbers.

### Potentially Slash-Separated Number

Add `CalcExpression`s, `ClampExpression`s, `CssMinMax`es to the list of operands
of the `/` operator that can create a [potentially slash-separated number].

[potentially slash-separated number]: ../spec/types/number.md#potentially-slash-separated-number

## Syntax

### `SpecialFunctionExpression`

This proposal replaces the definition of [`SpecialFunctionName`] with the
following:

[`SpecialFunctionName`]: ../spec/syntax.md#specialfunctionexpression

<x><pre>
**SpecialFunctionName**¹      ::= VendorPrefix? ('element(' | 'expression(')
&#32;                           | VendorPrefix 'calc('
</pre></x>

1: The string `calc(` is matched case-insensitively.

### `CalcExpression`

This proposal defines a new production `CalcExpression`. This expression is
parsed in a SassScript context when an expression is expected and the input
stream starts with an identifier with value `calc` (ignoring case) followed
immediately by `(`.

1: The strings `calc(` and `clamp(` are matched case-insensitively.

2: A `CalcArgument` is only parsed as an `InterpolatedDeclarationValue` if it
includes interpolation, unless that interpolation is within a region bounded by
parentheses (a `FunctionExpression` counts as parentheses).

3: Whitespace is required around these `"+"` and `"-"` tokens.

4: This `FunctionExpression` cannot begin with `min(`, `max(`, or `clamp(`,
case-insensitively.

†: These productions are invalid in plain CSS syntax.

> The `CalcArgument` production provides backwards-compatibility with the
> historical use of interpolation to inject SassScript values into `calc()`
> expressions. Because interpolation could inject any part of a `calc()`
> expression regardless of syntax, for full compatibility it's necessary to
> parse it very expansively.

### `CssMinMax`

This proposal replaces the reference to `CalcValue` in the definition of
`CssMinMax` with `CalcArgument`.

> Note that this increases the number of cases where a `MinMaxExpression` will
> be parsed as a `CssMinMax` rather than a `FunctionExpression` (for example,
> `min($foo, $bar)` is now a valid `CssMinMax` where it wasn't before).
> Fortunately, this is backwards-compatible, since all such `MinMaxExpression`s
> that were already valid will be simplified down into the same number they
> returned before.

Unless otherwise specified, when this specification creates a calculation, its
name is "calc".

### Operations

A calculation follows the default behavior of all SassScript operations, except
that it throws an error if used as an operand of a unary or binary `+` or `-`
operation, and equality is defined as below.

> This helps ensure that if a user expects a number and receives a calculation
> instead, it will throw an error quickly rather than propagating as an
> unquoted string.

#### Equality

Two calculations are considered equal if their names are equal, they have the
same number of arguments, and each argument in one calculation is equal to the
corresponding argument in the other.

`CalculationOperation` and `CalculationInterpolation` values are equal if each
field in one value is equal to the corresponding field in the other.

### Serialization

#### Calculation

To serialize a calculation, emit its name followed by "(", then each of its arguments
separated by ",", then ")".

#### `CalculationOperation`

To serialize a `CalculationOperation`:

* Let `left` and `right` be the result of serializing the left and right values,
  respectively.

* If either:

  * the left value is a `CalculationInterpolation`, or
  * the operator is `"*"` or `"/"` and the left value is a
    `CalculationOperation` with operator `"+"` or `"-"`,

  emit `"("` followed by `left` followed by `")"`. Otherwise, emit `left`.

* Emit `" "`, then the operator, then `" "`.

* If either:

  * the right value is a `CalculationInterpolation`, or
  * the operator is `"*"` and the right value is a `CalculationOperation` with
    operator `"+"` or `"-"`, or
  * the operator is `"/"` and the right value is a `CalculationOperation`,
  
  emit `"("` followed by `right` followed by `")"`. Otherwise, emit `right`.

#### `CalculationInterpolation`

To serialize a `CalculationInterpolation`, emit its `value`.

## Procedures

### Simplifying a Calculation

This algorithm takes a calculation `calc` and returns a number or a calculation.

> This algorithm is intended to return a value that's CSS-semantically identical
> to the input.

* Let `arguments` be the result of [simplifying](#simplifying-a-calculationvalue) each
  of `calc`'s arguments.

* If `calc`'s name is `"calc"`, the syntax guarantees that `arguments` contain
  only a single argument. If that argument is a number or calculation, return
  it.

* If `calc`'s name is `"clamp"`, `arguments` has fewer than three elements, and
  none of those are unquoted strings or `CalculationInterpolation`s, throw an
  error...

* If `calc`'s name is `"min"`, `"max"`, or `"clamp"` and `arguments` are all
  numbers:

  * If those arguments' units are mutually [compatible], return the result of
    calling [`math.min()`], [`math.max()`], or `math.clamp()` (respectively)
    with those arguments.

  * Otherwise, if any two of those arguments are [definitely-incompatible],
    throw an error.

  [compatible]: ../spec/types/number.md#compatible-units
  [`math.min()`]: ../spec/built-in-modules/math.md#min
  [`math.max()`]: ../spec/built-in-modules/math.md#max
  [definitely-incompatible]: #possibly-compatible-numbers

* Otherwise, return a calculation with the same name as `calc` and `arguments`
  as its arguments.

### Simplifying a `CalculationValue`

This algorithm takes a `CalculationValue` `value` and returns a
`CalculationValue`.

> This algorithm is intended to return a value that's CSS-semantically identical
> to the input.

* If `value` is a number, unquoted string, or `CalculationInterpolation`, return
  it as-is.

* If `value` is a calculation:

  * Let `result` be the result of [simplifying] `value`.

  * If `result` is a calculation whose name is `"calc"`, return `result`'s
      single argument.

  * Otherwise, return `result`.

  [simplifying]: #simplifying-a-calculation

* Otherwise, `value` must be a `CalculationOperation`. Let `left` and `right` be
  the result of simplifying `value.left` and `value.right`, respectively.

* Let `operator` be `value.operator`.

* If `operator` is `"+"` or `"-"`:

  * If `left` and `right` are both numbers with [compatible] units, return
    `left + right` or `left - right`, respectively.

  * Otherwise, if either `left` or `right` is a number with more than one
    numerator unit or more than zero denominator units, throw an error.

  * Otherwise, if `left` and `right` are [definitely-incompatible] numbers,
    throw an error.

  * If `right` is a number whose value is fuzzy-less-than zero, set `right` to
    `right * -1` and set `operator` to `"-"` or `"+"`, respectively.

  * Return a `CalculationOperation` with `operator`, `left`, and `right`.

* If `operator` is `"*"` or `"/"`:

  * If `left` and `right` are both numbers, return `left * right` or
    `math.div(left, right)`, respectively.

  * Otherwise, return a `CalculationOperation` with `operator`, `left`, and
    `right`.

## Semantics

### `CalcExpression`

To evaluate a `CalcExpression`:

* Let `calc` be a calculation whose name is `"calc"` and whose only argument is
  the result of [evaluating the expression's `CalcArgument`](#calcargument).

* Return the result of [simplifying] `calc`.

### `ClampExpression`

To evaluate a `ClampExpression`:

* Let `clamp` be a calculation whose name is `"clamp"` and whose arguments are the
  results of [evaluating the expression's `CalcArgument`s](#calcargument).

* Return the result of [simplifying] `clamp`.

### `CssMinMax`

To evaluate a `CssMinMax`:

* Let `calc` be a calculation whose name is `"min"` or `"max"` according to the
  `CssMinMax`'s first token, and whose arguments are the results of [evaluating
  the expression's `CalcArgument`s](#calcargument).

* Return the result of [simplifying] `calc`.

### `CalcArgument`

To evaluate a `CalcArgument` production `argument` into a `CalculationValue` object:

* If `argument` is an `InterpolatedDeclarationValue`, evaluate it and return a
  `CalculationInterpolation` whose `value` is the resulting string.

* Otherwise, return the result of [evaluating `argument`'s
  `CalcValue`](#calcvalue).

### `CalcSum`

To evaluate a `CalcSum` production `sum` into a `CalculationValue` object:

* Left `left` be the result of evaluating the first `CalcProduct`.

* For each remaining "+" or "-" token `operator` and `CalcProduct` `product`:

  * Let `right` be the result of evaluating `product`.

  * Set `left` to a `CalcOperation` with `operator`, `left`, and `right`.

* Return `left`.

### `CalcProduct`

To evaluate a `CalcProduct` production `product` into a `CalculationValue`
object:

* Left `left` be the result of evaluating the first `CalcValue`.

* For each remaining "*" or "/" token `operator` and `CalcValue` `value`:

  * Let `right` be the result of evaluating `value`.

  * Set `left` to a `CalcOperation` with `operator`, `left`, and `right` as its
    values.

* Return `left`.

### `CalcValue`

To evaluate a `CalcValue` production `value` into a `CalculationValue` object:

* If `value` is a `CalcArgument`, `CssMinMax`, or `Number`, return the result of
  evaluating it.

* If `value` is a `FunctionExpression` or `Variable`, evaluate it. If the result
  is a number, an unquoted string, or a calculation, return it. Otherwise, throw
  an error.

  > Allowing variables to return unquoted strings here supports referential
  > transparency, so that `$var: fn(); calc($var)` works the same as
  > `calc(fn())`.

## Functions

### `meta.type-of()`

Add the following clause to the [`meta.type-of()`] function and the top-level
`type-of()` function:

[`meta.type-of()`]: ../spec/built-in-modules/meta.md#type-of

* If `$value` is a calculation, return an unquoted string with value
  `"calculation"`.

### `meta.calc-name()`

This is a new function in the `sass:meta` module.

```
meta.calc-name($calc)
```

* If `$calc` is not a calculation, throw an error.

* Return `$calc`'s name as a quoted string.

### `meta.calc-args()`

This is a new function in the `sass:meta` module.

```
meta.calc-args($calc)
```

* If `$calc` is not a calculation, throw an error.

* Let `args` be an empty list.

* For each argument `arg` in `$calc`'s arguments:

  * If `arg` is a number or a calculation, add it to `args`.

  * Otherwise, [serialize](#serialization) `arg` and add the result to `args` as
    an unquoted string.

* Return `args` as an unbracketed comma-separated list.


**G**

**H**

**I**

## Draft 3

* If a number is escaped at the beginning of an identifier, its canonical form
  should be its hex escape rather than `\` followed by the character, since that
  could be interpreted as a hex escape.

## Draft 2

* Include U+000D CARRIAGE RETURN and U+000C FORM FEED in the list of characters
  that should be rendered as escape codes.

* Disallow whitespace between `InterpolatedIdentifier` components.

## Draft 1

* Initial draft.

# Escapes in Identifiers: Draft 3

This proposal adjusts how escaped code points are handled by Sass outside of
string contexts. It's intended to bring Sass's semantics more in line with how
CSS handles escapes.

## Background

> This section is non-normative.

At time of writing, while Sass recognizes escaped code points in identifiers and
other names, it doesn't resolve them into the code points they represent. This
means that, for example, Sass considers the selector `.\!foo` and the selector
`.\21 foo` to be distinct. This is contrary to the [CSS Syntax Level 3][], which
[says that][css: consume name] the value of an escaped code point should be
included in the name rather than the syntax of the escape.

However, the current behavior works well for unquoted strings in SassScript.
These strings need to distinguish between escaped code points and the literal
characters they represent, because unquoted strings can represent more than just
identifiers. For example, the SassScript expression `unquote("@x")` should be
rendered to CSS as `@x`, whereas the expression `\@x` should be rendered as
`\@x` (or `\40 x`). Any proposal for parsing escapes properly should preserve
this distinction.

## Summary

> This section is non-normative.

As identifiers are parsed, escapes will be normalized into a canonical form.
This preserves the benefits of the existing behavior, where `\@x` and
`unquote("@x")` are different SassScript expressions, while ensuring that
`.\!foo` and `.\21 foo` are considered the same selector.

The canonical form of a code point is:

* The literal code point if it's a valid identifier character; or

* a backslash followed by the code point's lowercase hex code followed by a
  space if it's not printable or a newline; or

* a backslash followed by the code point's lowercase hex code followed by a
  space if it's a digit at the beginning of an identifier; or

* a backslash followed by the literal code point.

For example, in SassScript:

* `ax`, `\61x`, and `\61 x` all parse to the unquoted string `ax`;
* `\7f x`, `\7fx`, and `\7Fx` all parse to the unquoted string `\7f x`; and
* `\31 x` and `\31x` parse to the unquoted string `\31 x`; and
* `\@x`, `\40x`, and `\0040x` all parse to the unquoted string `\@x`.

### Compatibility

The proposed change affects existing observable behavior. It's theoretically
possible that an existing user is, for example, using `\@x` and `\40 x` as
distinct map keys; or that they're relying on `length(\40 x)` returning `5`
rather than `3`. However, the chances of this seem extremely low, and it would
be very difficult to produce actionable deprecation warnings without
compromising efficiency.

Given that, and given that this is arguably a bug fix (in that we're moving
towards interpreting plain CSS text following the CSS spec, which we hadn't been
before), I propose that we don't consider this a breaking change and release it
with only a minor version bump.

## Syntax

This proposal defines a new algorithm for
[consuming an identifier](#consuming-an-identifier) and
[an interpolated identifier](#consuming-an-interpolated-identifier). These are
intended to replace the existing algorithms.

> Other than modifying the way escaped code points are handled, these algorithm
> are designed to accurately capture the current behavior of all Sass
> implementations.

### Consuming an Identifier

This algorithm consumes input from a stream of [code points][] and returns a
string.

This production has the same grammar as [`<ident-token>`][].

* Let `string` be an empty string.

* If the stream starts with `--`, consume it and append it to `string`.

* Otherwise:

  * If the stream starts with `-`, consume it and append it to `string`.

  * If the stream starts with `\`, [consume an escaped code point][] with the
    `start` flag set and append it to `string`.

  * Otherwise, if the stream starts with a [name-start code point][], consume it
    and append it to `string`.

  * Otherwise, throw an error.

* [Consume a name](#consuming-a-name) and append it to `string`.

* Return `string`.

### Consuming an Interpolated Identifier

This algorithm consumes input from a stream of [code points][] and returns a
sequence of strings and/or expressions.

### Consuming a Name

This algorithm consumes input from a stream of [code points][] and returns a
string.

The grammar for this production is:

<x><pre>
**Name** ::= ([name code point][] | [escape][])+
</pre></x>

* Let `string` be an empty string.

* While the input starts with a [name code point][] or `\`:

  * If the input starts with a [name code point][], consume it and append it to
    `string`.

  * Otherwise, [consume an escaped code point][] and append it to `string`.

* Return `string`.

### Consuming an Escaped Code Point

This algorithm consumes input from a stream of [code points][]. It takes an
optional boolean flag, `start`, which indicates whether it's at the beginning of
an identifier and defaults to false. It returns a string.

This production has the same grammar as [`escape`][escape] in CSS Syntax Level 3.

* If the stream doesn't [start with a valid escape][], throw an error.

* Let `codepoint` be the result of [consuming an escaped code point][].

* Let `character` be the string containing only `codepoint`.

* If `codepoint` is a [name-start code point][], return `character`.

* Otherwise, if `codepoint` is a [name code point][] and the `start` flag is
  not set, return `character`.

* Otherwise, if `codepoint` is a [non-printable code point][], U+000A LINE FEED,
  U+000D CARRIAGE RETURN, or U+000C FORM FEED; *or* if `codepoint` is a
  [digit][] and the `start` flag is set:

  * Let `code` be the lowercase hexadecimal representation of `codepoint`,
      with no leading `0`s.

  * Return `"\"` + `code` + `" "`.

* Otherwise, return `"\"` + `character`.

# Configuring Modules Through Imports: Draft 1

This proposal modifies the module system semantics to support configuring
libraries that have migrated to the module system through `@import` rules in
downstream stylesheets without requiring changes to those stylesheets.

## Background

> This section is non-normative.

As it is, while configuration in a `@use` rule passes through `@forward` rules
automatically, there's no way for a stylesheet using `@import` to configure
members that are behind a `@forward` rule.

This makes it difficult for libraries with configurable variables to migrate to
the module system without breaking downstream users that haven't migrated yet.
This is especially true if the library removed a manual prefix from its members
during migration. When the [migrator][] does this, it creates an import-only file
that forwards the regular stylesheet with the prefix added back, but that
`@forward` rule means configuration doesn't work.

Because it is nearly impossible to migrate these cases incrementally, this
violates the module system's [backwards compatibility goal][]. Libraries with
prefixes and configuration variables are common, and without an incremental
migration solution, these libraries may be slow to start using the module
system, limiting its adoption by the ecosystem as a whole.

## Summary

> This section is non-normative.

This proposal modifies the semantics for configuring a module when `@import` is
involved to ensure that most downstream users of a library are not broken when
the library migrates to the module system.

When a file is loaded by an `@import` rule, a [configuration][] is created that
includes all variables declared in the current [import context][]. This
implicitly created configuration is a special type that can be distinguished
from other, explicitly created configurations.

When a `@forward` rule is encountered within a file that was loaded by an
`@import` rule, the implicit configuration is passed to it in the same way as an
explicit configuration from a `@use` rule would be.

Normally, when a module has already been executed, and is then loaded with a
configuration that is not empty, an error is thrown. However, if the
configuration is an implicit one, this error will be ignored and the executed
module will be returned in the same way as if the configuration were empty. If
an implicit configuration passes through a `@forward` rule with a prefix, then
new configuration created for that rule is also considered an implicit one and
retains this special property.

This proposal should allow most existing stylesheets using `@import` to continue
working unchanged after a library they depend on migrates to the module system.

### Design Decisions

We considered a few alternatives in designing this proposal.

One alternative did not involve any language changes at all, instead
recommending that library authors add `@use` rules explicitly configuring their
variables to their [import-only files][] when migrating. For example:

While this would work for simple libraries with a single entrypoint, libraries
with multiple components that depend on common sublibraries but can be imported
separately would often break, as this solution would attempt to configure some
modules more than once. The same would happen if you imported even a simple
library more than once.

An alternative to just ignoring subsequent implicit configurations would be to
(a) filter them to include only variables that are actually configurable and
(b) allow the subsequent configuration only if it exactly matched the previous
one, but doing this matching could hurt performance. This would also still cause
issues if the same library is imported more than once.

While the solution we settled on does not perfectly cover all use cases that
worked before the library migrated to the module system, we think it strikes a
good balance of supporting most existing use cases without hurting performance
or making the language specification and implementation overly complicated.

For example, if a downstream user imports a library twice and changes its
configuration between the two imports, the change will be ignored. However,
this is an edge case that is (a) probably not intended by the user, (b)
relatively easy to fix by moving all declared configuration variables before
all library imports, and (c) very difficult to support for a library using the
module system without compromising the module system's [import once goal][], as
handling this case would require modules in the library to be executed twice.

## Definitions

This proposal modifies the definition of a [configuration][] within the
[module system spec][] to add the following:

A configuration is either *explicit* or *implicit*. When a configuration is
created, if the type is not specified, it is considered *explicit*.

## Procedures

This proposal modifies the fourth bullet of the [Loading Modules][] procedure
within the [module system spec][] to read as follows:

* If `file` has already been [executed][]:

  * If `config` is **explicit and** not empty, throw an error.

  * Otherwise, return the module that execution produced.

## Semantics

### Executing Files

This proposal modifies the first bullet of the semantics of [Executing Files][]
within the [module system spec][] to read as follows:

* If this file isn't being executed for a `@forward` **or `@import`** rule:

  * For every variable name `name` in `config`:

    * If neither `file` nor any source file for a module transitively forwarded
      or imported by `file` contains a variable declaration named `name` with a
      `!default` flag at the root of the stylesheet, throw an error.

This proposal also modifies the fifth bullet to read as follows:

* When a `@forward` rule `rule` is encountered:

  * If `rule` has an `AsClause` with identifier `prefix`:

    * Let `rule-config` be an empty configuration. **`rule-config` is implicit
      if `config` is implicit and explicit otherwise.**

    * For each variable `variable` in `config`:

      * If `variable`'s name begins with `prefix`:

        * Let `suffix` be the portion of `variable`'s name after `prefix`.

        * Add a variable to `rule-config` with the name `suffix` and with the
          same value as `variable`.

  * Otherwise, let `rule-config` be `config`.

  * Let `forwarded` be the result of [loading][] the module with `rule`'s URL
    and `rule-config`.

  * [Forward `forwarded`][] with `file` through `module`.

[Executing Files]: ../accepted/module-system.md#executing-files
[loading]: ../accepted/module-system.md#loading-modules
[Forward `forwarded`]: ../accepted/module-system.md#forwarding-modules

### Importing Files

This proposal modifies the semantics for [Importing Files][] within the
[module system spec][] to read as follows:

This algorithm takes a [source file][] `file`, an [import context][] `import`,
and a mutable [module][] `module`.

* If `file` is currently being executed, throw an error.

* **Let `config` be an implicit configuration containing every variable defined
  in `import`.**

  > If `file` does not contain any `@forward` rules, `config` will never be
  > used, so implementations may wish to skip this step and use the empty
  > configuration instead in that case for performance reasons.

* Let `imported` be the result of [executing][] `file` with ~~the empty
  configuration~~ **`config` as its configuration** and `import` as
  its import context, except that if the `@import` rule is nested within
  at-rules and/or style rules, that context is preserved when executing `file`.

* Let `css` be the result of [resolving extensions][] for
  `imported`, except that if the `@import` rule is nested within at-rules and/or
  style rules, that context is added to CSS that comes from modules loaded by
  `imported`.

* Add `css` to `module`'s CSS.

* Add `imported`'s [extensions][] to `module`.

* Add each member in `imported` to `import` and `module`.

[Importing Files]: ../accepted/module-system.md#importing-files
[source file]: ../accepted/module-system.md#source-file
[module]: ../accepted/module-system.md#module
[executing]: ../accepted/module-system.md#executing-files
[resolving extensions]: ../accepted/module-system.md#resolving-extensions
[extensions]: ../accepted/module-system.md#extension

# Import

The `@import` rule is the legacy way of splitting styles across multiple files
in Sass. The [`@use` rule][] should generally be used instead, but `@import` is
still supported for backwards-compatibility.

[`@use` rule]: use.md

1: This identifier may not be `"supports"` or `"and"`. No whitespace is allowed
   between it and the following `(`.
## Syntax

> because this simpler version produces a number of problematic ambiguities. For
> example:
>
> * `@import "..." a b(c)` could be parsed as either:
>   * `MediaQuery "a", ImportFunction "b(c)"`
>   * `MediaQuery "a b", MediaQuery "(c)"`
> * `@import "..." a and(b)` could be parsed as either:
>   * `MediaQuery "a", ImportFunction "and(b)"`
>   * `MediaQuery "a and(b)"`
>
> To resolve these, this grammar explicitly indicates that a `MediaQueryList`
> and its associated commas may only appear at the end of an `ImportRule`, and
> delineates the exact circumstances in which an `InterpolatedIdentifier` is or
> is not part of a `MediaQueryList`.
>
> Note that this parses `@import "..." layer (max-width: 600px)` differently
> than the CSS standard: in CSS, `layer` is a CSS layering keyword but Sass
> parses it as part of a media query in this instance. This doesn't pose a
> problem in practice because Sass's semantics never depend on how import
> modifiers are parsed.

## Semantics

To execute an `@import` rule `rule`:

* For each of `rule`'s `ImportArgumentNoMedia`s and `ImportArgument`s `argument`:

  * If any of the following are true, `argument` is considered "plain CSS":

    * `argument`'s URL string begins with `http://` or `https://`.
    * `argument`'s URL string ends with `.css`.
    * `argument`'s URL is an `InterpolatedUrl`.
    * `argument` has at least one `ImportModifierNoMedia`.
    * `argument` has a non-empty `ImportModifier`.

    > Note that this means that imports that explicitly end with `.css` are
    > treated as plain CSS `@import` rules, rather than importing stylesheets as
    > CSS.

  * If `argument` is "plain CSS":

    * Evaluate each of the following within `argument`'s
      `ImportModifierNoMedia`s or `ImportModifier`s, and concatenate the results
      into a single string with `" "` between each one:

      * For an `InterpolatedIdentifier` outside an `ImportMedia`, concatenate
        the result of evaluating it.

      * For an `ImportFunction`, concatenate:
        * The result of evaluating its `InterpolatedIdentifier`
        * `"("`
        * The result of evaluating its `InterpolatedDeclarationValue` (or `""`
          if it doesn't have one)
        * `")"`

      * For an `ImportSupports`, concatenate:
        * `"supports("`
        * The result of evaluating its `SupportsDeclaration` as a CSS string
        * `")"

      * For an `ImportMedia`, concatenate the result of evaluating it as a
        [`MediaQueryList`] as a CSS string.

        > `ImportMedia` is a subset of the valid syntax of `MediaQueryList`, so
        > this will always work.

    * Add an `@import` with the evaluated modifiers to [the current module]'s
      CSS AST.

  * Otherwise, let `file` be the result of [loading the file][] with
    `argument`'s URL string. If this returns null, throw an error.

  * If `file`'s canonical URL is the same as that of any other [current source
    file][], throw an error.

  * Let `imported` be the result of [executing][] `file` with the empty
    configuration and the [current import context][], except that if
    `rule` is nested within at-rules and/or style rules, that context is
    preserved when executing `file`.

    > Note that this execution can mutate `import`.

  * Let `css` be the result of [resolving `imported`'s extensions][], except
    that if `rule` is nested within at-rules and/or style rules, that context is
    added to CSS that comes from modules loaded by `imported`.

    > This creates an entirely separate CSS tree with an entirely separate
    > `@extend` context than normal `@use`s of these modules. This means their
    > CSS may be duplicated, and they may be extended differently.

  * Add `css` to the current module's CSS.

  * Add `imported`'s [extensions][] to the current module.

  * If the `@import` rule is nested within at-rules and/or style rules, add each
    member in `imported` to the [current scope].

  * Otherwise, add each member in `imported` to the current import context and
     the current module.

    > Members defined directly in `imported` will have already been added to
    > `import` in the course of its execution. This only adds members that
    > `imported` forwards.
    >
    > Members from `imported` override members of the same name and type that
    > have already been added to `import` and `module`.

  [`MediaQueryList`]: media.md#syntax
  [the current module]: ../spec.md#current-module
  [loading the file]: ../modules.md#loading-a-source-file
  [current source file]: ../spec.md#current-source-file
  [executing]: ../spec.md#executing-a-file
  [current import context]: ../spec.md#current-import-context
  [resolving `imported`'s extensions]: extend.md#resolving-a-modules-extensions
  [extensions]: extend.md#extension
  [current scope]: ../spec.md#scope

# Importer API

> Interfaces for user-declared importers that customize how Sass loads
> stylesheet dependencies.

## Types

### `CanonicalizeContext`

This is a data object passed into calls to `Importer.canonicalize()` and
`FileImporter.findFileUrl()`. Its fields are set as part of the function
invocations.

### `FileImporter`

This interface represents an [importer]. When the importer is invoked with a
string `string`:

[importer]: ../modules.md#importer

* If `string` is an absolute URL whose scheme is `file`:

  * Let `url` be string.

* Otherwise:

  * Let `fromImport` be `true` if the importer is being run for an `@import` and
    `false` otherwise.

  * Let `containingUrl` be the canonical URL of the [current source file] if it
    has one, or undefined otherwise.

  * Let `url` be the result of calling `findFileUrl` with `string`, `fromImport`,
    and `containingUrl`. If it returns a promise, wait for it to complete and use
    its value instead, or rethrow its error if it rejects.

  * If `url` is null, return null.

  * If `url`'s scheme is not `file`, throw an error.

  [current source file]: ../spec.md#current-source-file

* Let `resolved` be the result of [resolving `url`].

  [resolving `url`]: ../modules.md#resolving-a-file-url

* If `resolved` is null, return null.

* Let `text` be the contents of the file at `resolved`.

* Let `syntax` be:
  * "scss" if `url` ends in `.scss`.
  * "indented" if `url` ends in `.sass`.
  * "css" if `url` ends in `.css`.

  > The algorithm for resolving a `file:` URL guarantees that `url` will have
  > one of these extensions.

* Return `text`, `syntax`, and `resolved`.

### `Importer`

This interface represents an [importer]. When the importer is invoked with a
string `string`:

* Let `fromImport` be `true` if the importer is being run for an `@import` and
  `false` otherwise.

* If `string` is a relative URL, or if it's an absolute URL whose scheme is
  non-canonical for this importer, let `containingUrl` be the canonical URL of
  the [current source file]. Otherwise, or if the current source file has no
  canonical URL, let `containingUrl` be undefined.

* Let `url` be the result of calling `canonicalize` with `string`, `fromImport`,
  and `containingUrl`. If it returns a promise, wait for it to complete and use
  its value instead, or rethrow its error if it rejects.

* If the scheme of `url` is [non-canonical] for this importer, throw an error.

  [non-canonical]: #noncanonicalscheme

* If `url` is null, return null.

* Let `result` be the result of calling `load` with `url`. If it returns a
  promise, wait for it to complete and use its value instead, or rethrow its
  error if it rejects.

* If `result` is null, return null.

* Throw an error if `result.syntax` is not "scss", "indented", or "css".

* If `result.sourceMapUrl` is defined and the implementation generates a source
  map, the implementation must use this URL in the source map to refer to source
  spans in `result.contents`.

* Return `result.contents`, `result.syntax`, and `url`.

#### `nonCanonicalScheme`

The set of URL schemes that are considered *non-canonical* for this importer. If
this is a single string, treat it as a list containing that string.

Before beginning compilation, throw an error if any element of this is empty or
contains a character other than a lowercase ASCII letter, an ASCII numeral,
U+002B (`+`), U+002D (`-`), or U+002E (`.`).

> Uppercase letters are normalized to lowercase in the `URL` constructor, so for
> simplicity and efficiency we only allow lowercase here.

## Types

### `LegacyImporterThis`

The interface for the `this` keyword for custom importers. The implementation
must invoke importers with an appropriate `this`.

#### `fromImport`

The implementation must set this field to true if this importer invocation was
caused by an `@import` statement and `false` otherwise.

> This allows importers to look for `.import.scss` stylesheets if and only if an
> `@import` is being resolved.

### `LegacyImporterResult`

### `LegacySyncImporter`

```ts
type LegacySyncImporter = (
  this: LegacyImporterThis,
  url: string,
  prev: string
) => LegacyImporterResult;
```

### `LegacyAsyncImporter`

```ts
type LegacyAsyncImporter = (
  this: LegacyImporterThis,
  url: string,
  prev: string,
  done: (result: LegacyImporterResult) => void
) => void;
```
### `LegacyImporter`

# JavaScript API

Sass implementations that are available for use via JavaScript must expose the
following JavaScript API. As with the rest of this specification, they must not
add custom extensions that aren't shared across all implementations.

> Having a shared, consistent API makes it easy for users to move between Sass
> implementations with minimal disruption, and for build system plugins to
> seamlessly work with multiple implementations.

The JS API is specified as a TypeScript type declaration. Implementations must
adhere to this declaration and to the behavioral specifications written in JSDoc
comments on the declarations. Implementations may throw errors when user code
passes in values that don't adhere to the type declaration, but unless otherwise
indicated they may also handle these values in undefined ways in accordance with
the common JavaScript pattern of avoiding explicit type checks. This must not be
used as a way of adding custom extensions that aren't shared across all
implementations.

Certain interfaces in the JS API are defined within the `legacy` directory,
indicating that they're part of the legacy Node Sass API. This API is deprecated
and implementations are not required to support it. However, at least partial
support is recommended for compatibility with older applications and
particularly build system plugins.

As with other sections of this specification, the specification of the legacy JS
API is incomplete, and is added to *lazily*. This means that portions of the
spec—particularly the documentation comments that serve as a behavioral
specification—are only written when they're necessary as background for new API
proposals.

## Modern APIs
## Top-Level Members

### `info`

Information about the Sass implementation. This must begin with a unique
identifier for this package (typically but not necessarily the npm package
name), followed by U+0009 TAB, followed by its npm package version. It may
contain another tab character followed by additional information, but this is
not required.

# Logger API

## Types

### `Logger`

An object that provides callbacks for handling messages from the compiler.

#### `warn`

If this field is defined, the compiler must invoke it under the following
circumstances:

* When it encounters a `@warn` rule:

  * Let `value` be the result of evaluating the rule's expression.
  * Let `message` be `value`'s text if it's a string, or the result of
    serializing `value` if it's not.
  * Invoke `warn` with `message` and an object with `deprecation` set to `false`
    and `stack` set to a string representation of the current Sass stack trace.

    > The specific format of the stack trace may vary from implementation to
    > implementation.

* When it encounters anything else that the user needs to be warned about:

  > This is intentionally vague about what counts as a warning. Implementations
  > have a considerable degree of flexibility in defining this for themselves,
  > although in some cases warnings are mandated by the specification (such as
  > in preparation for a breaking change).

  * Let `options` be an empty object.
  * If this warning is caused by behavior that used to be allowed but will be
    disallowed in the future, set `options.deprecation` to `true`. Otherwise,
    set `options.deprecation` to `false`.
  * If this warning is associated with a specific span of a Sass stylesheet, set
    `options.span` to a `SourceSpan` that covers that span.
  * If this warning occurred during execution of a stylesheet, set
    `options.stack` to a string representation of the current Sass stack trace.
  * Invoke `warn` with a string describing the warning and `options`.

If this field is defined, the compiler must not surface warnings in any way
other than inkoving `warn`.

#### `debug`

If this field is defined, the compiler must invoke it when it encounters a
`@debug` rule using the following procedure:

* Let `value` be the result of evaluating the rule's expression.
* Let `message` be `value`'s text if it's a string, or the result of serializing
  `value` if it's not.
* Invoke `debug` with `message` and an object with `span` set to the span
  covering the `@debug` rule and its expression.

If this field is defined, the compiler must not surface debug messages in any
way other than invoking `debug`.

## Fields

### `Logger`

A namespace for built-in logger implementations.
#### `silent`

A [`Logger`] that does nothing when it warn or debug methods are called.

[`Logger`]: #logger

## Fields

### `sassNull`

A `Value` whose [`internal`] is the SassScript null value.

[`internal`]: #internal
# Value API

## Types

### `Value`

The JS API representation of a Sass value.

Sass values are immutable. Therefore, all subclasses of Value must have an API
that obeys immutability. Their APIs must not expose ways to modify Sass values,
including lists and maps. An API call that returns a new copy of a Sass value
must ensure that the copy preserves the metadata of the original value (e.g.
units).

#### `internal`

To make the spec terser and easier to author, each `Value` instance has a
private property named `internal` that refers to the Sass value it represents.
This property is only used for spec purposes and is not visible in any sense to
JavaScript.

#### `asList`

Returns `this` as an array:

* If [`internal`] is a Sass list, return an array of its contents.
* If [`internal`] is a Sass map, return an array of its keys and values as
  two-element `SassList`s.
* Otherwise, return a list containing `this`.

```ts
get asList(): List<Value>;
```

#### `hasBrackets`

Whether [`internal`] is a bracketed Sass list.

```ts
get hasBrackets(): boolean;
```

#### `isTruthy`

Whether `this` is truthy.

```ts
get isTruthy(): boolean;
```

#### `realNull`

Returns JS null if [`internal`] is Sass null. Otherwise, returns `this`.

```ts
get realNull(): null | Value;
```

#### `separator`

Return [`internal`]'s separator if it's a Sass list, and `null` otherwise.

```ts
get separator(): ListSeparator;
```

#### `sassIndexToListIndex`

Converts the Sass index `sassIndex` to a JS index into the array returned by
`asList`:

* If `sassIndex` is not a unitless Sass number, throw an error.

* Let `value` be the value of `sassIndex`. Let `index` be the result of
  `fuzzyAsInt(value)`. If `index === null`, throw an error.

* If `index === 0`, or the absolute value of `index` is greater than
  `asList.length`, throw an error.

* If `index > 0`, return `index - 1`.
* Otherwise, if `index < 0`, return `asList.length + index`.

  > Sass indices start counting at 1, and may be negative in order to index from
  > the end of the list.

> The `name` parameter may be used for error reporting.

```ts
sassIndexToListIndex(sassIndex: Value, name?: string): number;
```

#### `get`

Returns `this.asList.get(index)`.

> Note that the `immutable` package uses zero-based indexing, with negative
> numbers indexing backwards from the end of the list. Non-integer indices are
> rounded down.

```ts
get(index: number): Value | undefined;
```

#### `assertBoolean`

Returns `this` if it's a [`SassBoolean`] and throws an error otherwise.

[`SassBoolean`]: boolean.d.ts.md

> The `name` parameter may be used for error reporting.

```ts
assertBoolean(name?: string): SassBoolean;
```

#### `assertCalculation`

Returns `this` if it's a [`SassCalculation`] and throws an error otherwise.

[`SassCalculation`]: calculation.d.ts.md

> The `name` parameter may be used for error reporting.

```ts
assertCalculation(name?: string): SassCalculation;
```

#### `assertColor`

Returns `this` if it's a [`SassColor`] and throws an error otherwise.

[`SassColor`]: color.d.ts.md

> The `name` parameter may be used for error reporting.

```ts
assertColor(name?: string): SassColor;
```

#### `assertFunction`

Returns `this` if it's a [`SassFunction`] and throws an error otherwise.

[`SassFunction`]: function.d.ts.md

> The `name` parameter may be used for error reporting.

```ts
assertFunction(name?: string): SassFunction;
```

#### `assertMap`

Return `this.tryMap()` if it's not null, and throw an error otherwise.

> The `name` parameter may be used for error reporting.

```ts
assertMap(name?: string): SassMap;
```

#### `assertMixin`

Returns `this` if it's a [`SassMixin`] and throws an error otherwise.

[`SassMixin`]: mixin.d.ts.md

> The `name` parameter may be used for error reporting.

```ts
assertMixin(name?: string): SassMixin;
```

#### `assertNumber`

Returns `this` if it's a [`SassNumber`] and throws an error otherwise.

[`SassNumber`]: number.d.ts.md

> The `name` parameter may be used for error reporting.

```ts
assertNumber(name?: string): SassNumber;
```

#### `assertString`

Returns `this` if it's a [`SassString`] and throws an error otherwise.

[`SassString`]: string.d.ts.md

> The `name` parameter may be used for error reporting.

```ts
assertString(name?: string): SassString;
```

#### `tryMap`

Returns `this` interpreted as a map.

* If `this` is a [`SassMap`], return `this`.

* Otherwise, if [`internal`] is an empty Sass list, return a `SassMap` with its
  `internal` set to an empty map.

* Otherwise, return `null`.

```ts
tryMap(): SassMap | null;
```

#### `equals`

Returns whether [`internal`] is `==` to `other`'s `internal` in SassScript.

```ts
equals(other: Value): boolean;
```

#### `hashCode`

Returns the same number for any two `Value`s that are equal according to
[`equals`].

[`equals`]: #equals

> This is *not* required to be different for different values, although having
> overlap between common values is likely to cause performance issues.

```ts
hashCode(): number;
```

#### `toString`

Returns a string representation of `this`.

> The specific format can vary from implementation to implementation and is not
> guaranteed to be valid Sass source code.

```ts
toString(): string;
```

```ts
} // Value
```

**J**

## Draft 2

* Add a `logger` option to the new JS API.

* Add a `Logger.silent` field.

## Draft 1

* Initial draft.

**K**

**L**

## Types

### `ListSeparator`

The JS API representation of a Sass list separator. null represents the
undecided separator type.

### `SassList`

The JS API representation of a Sass list.

#### `internal`

The [private `internal` field] refers to [a Sass list].

[private `internal` field]: index.d.ts.md#internal
[a Sass list]: ../../types/list.md

#### Constructor

Creates a Sass list:

* If the first argument is an `Array` or a `List`:
  * Let `contents` be the first argument.
  * Let `options` be the second argument, or `{}` if it's undefined.

* Otherwise:
  * Let `contents` be `[]`.
  * Let `options` be the first argument, or `{}` if it's undefined.

* Let `separator` be `options.separator`, or `','` if that's undefined.

* Let `brackets` be `options.brackets`, or `false` if that's undefined.

* Set `internal` to a Sass list with contents set to `contents`, separator set
  to `separator`, and brackets set to `brackets`.

* Return `this`

# Numbers

## Definitions

### List

A *SassScript list* (usually referred to as just a *list*) is an ordered
sequence of SassScript values. A list may or may not be *bracketed*, and a list
has a *separator* which is one of "space", "comma", "slash", or "undecided".
Only lists with zero or one elements may have an "undecided" separator.

### List Value

A SassScript value's *list value* is the interpretation of that value as a
SassScript list. This differs from type to type:

* The list value of a list is the list itself.
* The list value of a map is an unbracketed comma-separated list whose elements
  are the key/value pairs in the map as two-element unbracketed space-separated
  lists.
* The list value of any other value is an unbracketed undecided-separator list
  containing only that value.

### Index

An *index* is a unitless [integer] that refers to a specific location in a list.
Positive integers count from the beginning of the list, and negative integers
count from the end of the list. The referenced value is said to be *indexed by*
the index. An integer is an *invalid index* for a given list if it's 0 or if its
absolute value is larger than the length of that list.

> For example, in the values in the list `["a", "b", "c"]` are referred to by
> the following indices:
> `["a", "b", "c"]`
> * `"a"`: 1, -3
> * `"b"`: 2, -2
> * `"c"`: 3, -1

[integer]: number.md#integer

# List Module

This built-in module is available from the URL `sass:list`.

## Functions

### `append()`

```
append($list, $val, $separator: auto)
```

This function is also available as a global function named `append()`.

### `index()`

```
index($list, $value)
```

This function is also available as a global function named `index()`.

### `is-bracketed()`

```
is-bracketed($list)
```

This function is also available as a global function named `is-bracketed()`.

### `join()`

```
join($list1, $list2, $separator: auto, $bracketed: auto)
```

This function is also available as a global function named `join()`.

### `length()`

```
length($list)
```

This function is also available as a global function named `length()`.

### `separator()`

```
separator($list)
```

This function is also available as a global function named `list-separator()`.

### `slash()`

```
slash($elements...)
```

* If `$elements` contains zero or one values, throw an error.
* Return an unbracketed slash-separated list containing `$elements`.

### `nth()`

```
nth($list, $n)
```

This function is also available as a global function named `nth()`.

* If `$n` isn't a unitless [integer], throw an error.

* If `$n` is an [invalid index] for `$list`'s [list value], throw an error.

* Return the value [indexed by] `$n` in `$list`'s list value.

[integer]: ../types/number.md#integer
[invalid index]: ../types/list.md#index
[indexed by]: ../types/list.md#index
[list value]: ../types/list.md#list-value

### `set-nth()`

```
set-nth($list, $n, $value)
```

This function is also available as a global function named `set-nth()`.

* If `$n` isn't a unitless [integer], throw an error.

* Let `list` be a copy of `$list`'s [list value].

* If `$n` is an [invalid index] for `list`, throw an error.

* Replace the value indexed by `$n` in `list` with `$value`.

* Return `list`.

### `zip()`

```
zip($lists...)
```

This function is also available as a global function named `zip()`.

**M**

## Types

### `SassMap`

The JS API representation of a Sass map.

#### `internal`

The [private `internal` field] refers to a Sass map.

[private `internal` field]: index.d.ts.md#internal

#### Constructor

Creates a Sass map:

* If `contents` is undefined, set it to an empty `OrderedMap`.
* Set `internal` to a Sass map with contents set to `contents`.
* Return `this`.

```ts
constructor(contents?: OrderedMap<Value, Value>);
```

#### `contents`

Returns a map containing `internal`'s contents:

* Let `result` be an empty `OrderedMap`.
* Add each key and value from `internal`'s contents to `result`, in order.
* Return `result`.

```ts
get contents(): OrderedMap<Value, Value>;
```

#### `get`

* If the first argument is a JavaScript number, pass it to `this.asList.get` and
  return the result.

* Otherwise, pass it to `this.contents.get` and return the result.

```ts
get(key: Value): Value | undefined;

get(index: number): SassList | undefined;
```

#### `tryMap`

```ts
tryMap(): SassMap;
```

```ts
} // SassMap
```

# Map Module

This built-in module is available from the URL `sass:map`.

## Functions

### `deep-merge()`

```
deep-merge($map1, $map2)
```

* If `$map1` and `$map2` are not maps, throw an error.

* Let `merged` be an empty map.

* For each `old-key`/`old-value` pair in `$map1`:

  * If `$map2` has a key `new-key` that's `==` to `old-key`:

    * Let `new-value` be the value associated with `new-key` in `$map2`.

    * If both `old-value` and `new-value` are maps, set `new-value` to the
      result of calling `deep-merge()` with `old-value` and `new-value`.

    * Associate `old-key` with `new-value` in `merged`.

  * Otherwise, associate `old-key` with `old-value` in `merged`.

* For each `new-key`/`new-value` pair in `$map2`:

  * If `merged` doesn't have key that's `==` to `new-key`, associate `new-key`
    with `new-value` in `merged`.

* Return `merged`.

> Note that the order of keys in each merged map is the same as the keys in
> `$map1`, with any new keys from `$map2` added at the end in the same order
> they appear in `$map2`. This matches the ordering of the `merge()` function.

### `deep-remove()`

```
deep-remove($map, $key, $keys...)
```

> Intuitively, `map.deep-remove($map, $keys..., $last-key)` is equivalent to
> `map.set($map, $keys..., map.remove(map.get($map, $keys...), $last-key)`.

* If `$map` isn't a map, throw an error.

* If `$keys` has no elements:

  * Return the result of calling `map.remove($map, $key)`.

* Otherwise:

  * Let `last-key` be the last element of `$keys`.

  * Let `other-keys` be a list containing `$key` followed by all elements in
    `$keys` except the last.

  * Let `sub` be the result of calling `get()` with `$map` as the first
    argument and the contents of `other-keys` as the remaining arguments.

  * If `sub` is a map with a key `old-key` that's `==` to `last-key`:

    * Set `sub` to a copy of itself.

    * Remove `old-key` and its associated value from `sub`.

    * Return the result of calling `set()` with `$map` as the first argument,
      followed by the contents of `other-keys` as separate arguments, followed
      by `sub`.

  * Otherwise:

    * Return `$map`.

### `get()`

This function is also available as a global function named `map-get()`.

* ```
  get($map, $key)
  ```

* ```
  get($map, $key, $keys...)
  ```

  > Intuitively, `get($map, $key1, $key2, $key3)` is equivalent to
  > `get(get(get($map, $key1), $key2), $key3)` with the exception that if any
  > intermediate value isn't a map or doesn't have the given key the whole
  > function returns `null` rather than throwing an error.

  * If `$map` is not a map, throw an error.

  * Let `child` be `$map`.

  * Let `keys` be a list containing `$key` followed by the elements of `$keys`.

  * For each element `key` in `keys`:

    * If `child` is not a map, return `null`.

    * If `child` contains a key that's `==` to `key`, set `child` to the value
      associated with that key. Otherwise, return `null`.

  * Return `child`.

### `has-key()`

This function is also available as a global function named `map-has-key()`.

* ```
  has-key($map, $key)
  ```

* ```
  has-key($map, $key, $keys...)
  ```

  > Intuitively, `has-key($map, $key1, $key2, $key3)` is equivalent to
  > `has-key(get(get($map, $key1), $key2), $key3)` with the exception that if any
  > intermediate value isn't a map or doesn't have the given key the whole
  > function returns `false` rather than throwing an error.

  * If `$map` is not a map, throw an error.

  * Let `child` be `$map`.

  * Let `keys` be a list containing `$key` followed by the elements of `$keys`.

  * For each element `key` in `keys`:

    * If `child` is not a map, return `false`.

    * If `child` contains a key that's `==` to `key`, set `child` to the value
      associated with that key. Otherwise, return `false`.

  * Return `true`.

### `keys()`

```
keys($map)
```

This function is also available as a global function named `map-keys()`.

### `merge()`

This function is also available as a global function named `map-merge()`.

* ```
  merge($map1, $map2)
  ```

* ```
  merge($map1, $args...)
  ```

  > Intuitively, `map.merge($map1, $keys..., $map2)` is equivalent to
  > `map.set($map1, $keys..., map.merge(map.get($map1, $keys...), $map2))`.

  * If `$args` is empty, return `$map1`.

  * Let `map2` be the last element of `$args`.

  * If either `$map1` or `map2` is not a map, throw an error.

  * If `$args` has fewer than two elements, throw an error.

  * Let `keys` be a slice of all elements in `$args` except the last.

  * Let `sub` be the result of calling `get()` with `$map1` as the first
    argument and the contents of `keys` as the remaining arguments.

  * If `sub` is a map:

    * Let `sub-merged` be the result of calling `merge()` with `sub` and `map2` as
      arguments.

  * Otherwise:

    * Let `sub-merged` be `map2`.

  * Return the result of calling `set()` with `$map1` as the first argument,
    followed by the contents of `keys` as separate arguments, followed by
    `sub-merged`.

### `remove()`

```
remove($map, $key, $keys...)
```

This function is also available as a global function named `map-remove()`.

### `set()`

* ```
  set($map, $key, $value)
  ```

  > Intuitively, `set($map, $key, $value)` is equivalent to `merge($map, ($key: $value))`.

  * If `$map` is not a map, throw an error.

  * Let `map` be a copy of `$map`.

  * If `map` has a key that's `==` to `$key`, remove it and its associated value.

  * Associate `$key` with `$value` in `map`.

  * Return `map`.

* ```
  set($map, $args...)
  ```

  > Intuitively, `set($map, $key1, $key2, $value)` is equivalent to `set($map,
  > $key1, set(get($map, $key1), $key2, $value))` with the exception that if any
  > intermediate value isn't set or isn't a map it's replaced with a map.

  * If `$map` is not a map, throw an error.

  * If `$args` has fewer than three elements, throw an error.

  * Let `map` be a copy of `$map`.

  * Let `key` be the first element of `$args`.

  * Let `remaining` be the slice of all elements in `$args` except the first.

  * If `map` has a key that's `==` to `key`:

    * Remove that key and its associated value from `map`.

    * Let `child` be the value that was associated with that key if that value
      is a map, or an empty map otherwise.

  * Otherwise:

    * Let `child` be an empty map.

  * Let `new-child` be the result of calling `set()` with `child` as the first
    argument and the elements of `remaining` as the remaining arguments.

  * Associate `key` with `new-child` in `map`.

  * Return `map`.

### `values()`

```
values($map)
```

This function is also available as a global function named `map-values()`.

# Math Module

This built-in module is available from the URL `sass:math`.

This module contains Sassified versions of all the mathematical constants and
functions in the [CSS Values and Units 4 Draft], and more (such as logarithms,
`e`, `pi`). Each function is basically equivalent to its mathematical form,
though some have special handling of units.

## Variables

### `$e`

A unitless number whose value is the closest possible [double] approximation of
the [mathematical constant e].

[double]: ../types/number.md#double

> This is `2.718281828459045`.

### `$pi`

A unitless number whose value is the closest possible [double] approximation of
the [mathematical constant π].

> This is `3.141592653589793`.

### `$epsilon`

A unitless number whose value is the difference between 1 and the smallest
[double] greater than 1.

> This is `2.220446049250313e-16`.

### `$max-safe-integer`

A unitless number whose value represents the maximum mathematical integer `n`
such that `n` and `n + 1` both have an exact [double] representation.

> This is `9007199254740991`.

### `$min-safe-integer`

A unitless number whose value represents the minimum mathematical integer `n`
such that `n` and `n - 1` both have an exact [double] representation.

> This is `-9007199254740991`.

### `$max-number`

A unitless number whose value represents the greatest finite number that can be
represented by a [double].

> This is `1.7976931348623157e+308`.

### `$min-number`

A unitless number whose value represents the least positive number that can be
represented by a [double].

> This is `5e-324`.

## Functions

### Bounding Functions

#### `ceil()`

```
ceil($number)
```

This function is also available as a global function named `ceil()`.

* Return a number whose value is the result of
  `convertToIntegerTowardPositive($number.value)` as defined by [IEEE 754 2019],
  §5.8; and whose units are the same as `$number`'s.

#### `clamp()`

```
clamp($min, $number, $max)
```

* If some arguments have units and some do not, throw an error.
* If `$min`, `$number`, and `$max` have units, but the units are not
  [compatible] with each other, throw an error.
* If `$min >= $max`, return `$min`.
* If `$number <= $min`, return `$min`.
* If `$number >= $max`, return `$max`.
* Return `$number`.

[compatible]: ../types/number.md#compatible-units

#### `floor()`

```
floor($number)
```

This function is also available as a global function named `floor()`.

* Return a number whose value is the result of
  `convertToIntegerTowardNegative($number.value)` as defined by [IEEE 754 2019],
  §5.8; and whose units are the same as `$number`'s.

#### `max()`

```
max($numbers...)
```

This function is also available as a global function named `max()`.

#### `min()`

```
min($numbers...)
```

This function is also available as a global function named `min()`.

#### `round()`

```
round($number)
```

This function is also available as a global function named `round()`.

* Return a number whose value is the result of
  `convertToIntegerTiesToAway($number.value)` as defined by [IEEE 754 2019],
  §5.8; and whose units are the same as `$number`'s.

### Distance Functions

#### `abs()`

```
abs($number)
```

This function is also available as a global function named `abs()`.

* Return a number whose value is the result of `abs($number.value)` as defined
  by [IEEE 754 2019], §5.5.1; and whose units are the same as `$number`'s.

#### `hypot()`

```
hypot($numbers...)
```

* If some numbers have units and some do not, throw an error.
* If all numbers have units, but the units are not [compatible] with each other,
  throw an error.
* If all numbers are unitless, the return value is unitless.
* Otherwise, the return value takes the unit of the leftmost number.
* If any number equals `Infinity` or `-Infinity`, return `Infinity`.
* Return the square root of the sum of the squares of each number.

### Exponential Functions

> Exponential operations on numbers with units would create meaningless units
> (e.g. `(1px)^(1/3)` has a unit of `px^(1/3)`). To prevent this, the
> exponential functions accept only a unitless number as input, and return a
> unitless number.

#### `log()`

```
log($number, $base: null)
```

* If `$number` has units, throw an error.

* Return a unitless number whose value is the result of `log($number.value)` as
  defined by [IEEE 754 2019], §9.2.

> This is the [natural logarithm].

#### `pow()`

```
pow($base, $exponent)
```

* If `$base` or `$exponent` has units, throw an error.

* Return a unitless number whose value is the result of `pow($number.value,
  $exponent.value)` as defined by [IEEE 754 2019], §9.2.

#### `sqrt()`

```
sqrt($number)
```

* If `$number` has units, throw an error.

* Return a unitless number whose value is the result of `rootn($number.value,
  2)` as defined by [IEEE 754 2019], §9.2.

### Trigonometric Functions

> The trigonometric functions accept a number with a unit, as long as that unit
> is an [angle] type, and output a unitless number. If the input is unitless, it
> must be treated as though it were in `rad`.
>
> The inverse trig functions accept unitless numbers and output a number in
> `deg`.

#### `acos()`

```
acos($number)
```

* If `$number` has units, throw an error.

* Let `result` be a number in `rad` whose value is the result of
  `acos($number.value)` as defined by [IEEE 754 2019], §9.2.

* Return the result of [converting `result` to `deg`].

  [converting `result` to `deg`]: ../types/number.md#converting-a-number-to-a-unit

#### `asin()`

```
asin($number)
```

* If `$number` has units, throw an error.

* Let `result` be a number in `rad` whose value is the result of
  `asin($number.value)` as defined by [IEEE 754 2019], §9.2.

* Return the result of [converting `result` to `deg`].

#### `atan()`

```
atan($number)
```

* If `$number` has units, throw an error.

* Let `result` be a number in `rad` whose value is the result of
  `atan($number.value)` as defined by [IEEE 754 2019], §9.2.

* Return the result of [converting `result` to `deg`].

#### `atan2()`

> `atan2($y, $x)` is distinct from `atan($y / $x)` because it preserves the
> quadrant of the point in question. For example, `atan2(1, -1)` corresponds to
> the point `(-1, 1)` and returns `135deg`. In contrast, `atan(1 / -1)` and
> `atan(-1 / 1)` resolve first to `atan(-1)`, so both return `-45deg`.

```
atan2($y, $x)
```

* If the units of `$y` and `$x` are not [compatible], throw an error.

* If `$y` has units and `$x` does not, or vice-versa, throw an error.

* Let `result` be a number in `rad` whose value is the result of
  `atan2($y.value, $x.value)` as defined by [IEEE 754 2019], §9.2.

* Return the result of [converting `result` to `deg`].

#### `cos()`

```
cos($number)
```

* Let `double` be the value of [converting `$number` to `rad`] allowing
  unitless.

  [converting `$number` to `rad`]: ../types/number.md#converting-a-number-to-a-unit

* Return a unitless number whose value is the result of `cos(double)` as defined
  by [IEEE 754 2019], §9.2.

#### `sin()`

```
sin($number)
```

* Let `double` be the value of [converting `$number` to `rad`] allowing
  unitless.

* Return a unitless number whose value is the result of `sin(double)` as defined
  by [IEEE 754 2019], §9.2.

#### `tan()`

```
tan($number)
```

* Let `double` be the value of [converting `$number` to `rad`] allowing
  unitless.

* Return a unitless number whose value is the result of `tan(double)` as defined
  by [IEEE 754 2019], §9.2.

### Unit Functions

#### `compatible()`

```
compatible($number1, $number2)
```

This function is also available as a global function named `comparable()`.

* If `$number1` or `$number2` is not a number, throw an error.
* If `$number1` or `$number2` is unitless, return true.
* If the units of `$number1` and `$number2` are [compatible], return true.
* Otherwise, return false.

#### `is-unitless()`

```
is-unitless($number)
```

This function is also available as a global function named `unitless()`.

#### `unit()`

```
unit($number)
```

This function is also available as a global function named `unit()`.

### Other Functions

#### `div()`

```
div($number1, $number2)
```

* If `$number1` is a color and `$number2` is either a number or a color, throw an
  error.
* Otherwise, if `$number2` is a number and `$number2` is a color, throw an error.
* Otherwise, if either of `$number1` or `$number2` are not numbers, return an
  unquoted string whose contents is the result of serializing `$number1`
  followed by `"/"` followed by the result of serializing `$number2`.
* Let `quotient` be a number such that:
  * Its value is the result of `divide($number1.value, $number2.value)` as defined
    by [IEEE 754 2019], §5.4.1.
  * Its numerator units are equal to `$number1`'s numerator units followed by
    `$number2`'s denominator units.
  * Its denominator units are equal to `$number1`'s denominator units followed
    by `$number2`'s numerator units.
* Return the result of simplifying `quotient`.

#### `percentage()`

```
percentage($number)
```

This function is also available as a global function named `percentage()`.

#### `random()`

```
random($limit: null)
```

This function is also available as a global function named `random()`.

* If `$limit` is `null` then return a pseudo-random unitless number whose value
   is in the range `[0, 1)`.

  > Example: `math.random() => 0.1337001337`

* If `$limit` is an [integer] greater than zero:

  * Return a pseudo-random integer in the range `[1, $limit]` with the same
    units as `$limit`.

    > Examples:
    >
    > * `math.random(123) => 87`
    > * `math.random(123px) => 43px`
    > * `math.random(500%) => 238%`

* Otherwise throw an error.

[integer]: ../types/number.md#integer

## Draft 1.1

* In the `MediaQuery` production, don't allow an `Interpolation` to be followed
  by `(MediaAnd* | MediaOr*)` since `Interpolation` is ambiguous with
  `MediaType`.

* Forbid whitespace in the `MediaNot`, `MediaAnd`, and `MediaOr` productions.

* Fix the link for `CssMediaQuery`.

## Draft 1

* Initial draft.

# Media Logic: Draft 1.1

This proposal adds support for the full [Media Queries Level 4] syntax for media
conditions, including arbitrary boolean logic using `and`, `or`, and `not`.

## Background

> This section is non-normative.

For historical reasons, Sass fully parses media queries and allows SassScript to
be embedded directly in them, as in `@media ($query: $value)`, in contrast to
most other at-rules in which SassScript can only be injected using
interpolation. This means that as CSS adds new media query syntax, Sass is
obligated to update its specification to accommodate it.

[Media Queries Level 4] adds support for arbitrary boolean logic in media
queries, such as `@media ((width >= 100px) and (width <= 800px)) or (grid)`.
Sass must therefore update its syntax accordingly.

## Summary

> This section is non-normative.

The proposal is relatively straightforward: it adds the new syntax to Sass's
grammar. It is worth noting, though, that this will require a few breaking
changes. These are unlikely to affect many real-world stylesheets, but they're
worth highlighting nevertheless.

The new syntax allows any [`<media-condition>`] to appear inside a
[`<media-in-parens>`]. This means that queries beginning with `(not ` or `((`
must be parsed as nested media queries, rather than SassScript expressions as
they have historically been parsed. We'll issue a short deprecation period for
the SassScript expressions in question, recommending users migrate them to
interpolation instead, then drop support and begin parsing them as media queries
for CSS compatibility.

## Syntax

### `MediaQuery`

Replace the definition of the [`MediaQuery`] production with the following (with
all identifiers matched case-insensitively):

[`MediaQuery`]: ../spec/at-rules/media.md#sass

<x><pre>
**MediaQuery**     ::= MediaNot
&#32;                | MediaInParens (MediaAnd\* | MediaOr\*)
&#32;                | MediaType ('and' MediaNot | MediaAnd\*)
**MediaType**      ::= [InterpolatedIdentifier] [InterpolatedIdentifier]¹?
**MediaNot**²      ::= 'not' MediaOrInterp
**MediaAnd**²      ::= 'and' MediaOrInterp
**MediaOr**²       ::= 'or' MediaOrInterp
**MediaOrInterp**  ::= Interpolation | MediaInParens
**MediaInParens**  ::= '(' Expression³ ')'
&#32;                | '(' Expression³ [\<mf-comparison>] Expression³ ')'
&#32;                | '(' Expression³ [\<mf-lt>] Expression³ [\<mf-lt>] Expression³ ')'
&#32;                | '(' Expression³ [\<mf-gt>] Expression³ [\<mf-gt>] Expression³ ')'
&#32;                | '(' MediaNot ')'
&#32;                | '(' MediaInParens (MediaAnd\* | MediaOr\*) ')'
</pre></x>

1. This `InterpolatedIdentifier` may not be the identifier `"and"`.

2. No whitespace is allowed between the identifier and the `MediaOrInterp` in
   these productions.

3. These `Expression`s may not:

   * Contain binary operator expressions with the operators `=`, `>`, `>=`, `<`,
     or `<=`, except within parentheses (including function calls and map
     literals) and square brackets.

   * Begin with the case-insensitive identifier `"not"`.

   * Begin with the character `"("`.

### `CssMediaQuery`

Replace the definition of the [`CssMediaQuery`] production with the following (with
all identifiers matched case-insensitively):

[`CssMediaQuery`]: ../spec/at-rules/media.md#css

<x><pre>
**CssMediaQuery**     ::= CssMediaCondition
&#32;                   | CssMediaType ('and' CssMediaNot | CssMediaAnd*)
**CssMediaType**      ::= [\<ident-token>] [\<ident-token>]¹?
**CssMediaCondition** ::= CssMediaNot | CssMediaInParens (CssMediaAnd* | CssMediaOr*)
**CssMediaNot**       ::= 'not' CssMediaInParens
**CssMediaAnd**       ::= 'and' CssMediaInParens
**CssMediaOr**        ::= 'or' CssMediaInParens
**CssMediaInParens**  ::= '(' [\<declaration-value>] ')'
</pre></x>

1. This `<ident-token>` may not be the identifier `"and"`.

## Deprecation Process

Before this specification is applied in full force, it will be applied with the
following modifications:

* [`MediaInParens`](#mediaquery) will not allow the productions `'(' MediaNot
  ')'` or `'(' MediaInParens (MediaAnd* | MediaOr*) ')'`.

* If the first `Expression` in a `MediaInParens` production begins with the
  case-insensitive identifier `"not"` or the character `"("`, emit a deprecation
  warning.

## Draft 3.1

* Improve the formatting of the syntax examples.

## Draft 3

* Disallow ambiguous binary operators in the `'(' Expression ')'` option for the
  `MediaFeature` production.

## Draft 2

* Refer to CSS's `<ident-token>` rather than a Sass-specific `Identifier`
  production.

* Clarify how to consume CSS's `<declaration-value>`.

## Draft 1

* Initial draft.

# Range-Context Media Features: Draft 3.1

This proposal defines how Sass handles media queries with features written in a
[range context][].

## Table of Contents

* [Summary](#summary)
  * [Design Decisions](#design-decisions)
* [Syntax](#syntax)
  * [Sass](#sass)
  * [CSS](#css)

## Summary

> This section is non-normative.

Media features written in a range context will be parsed by Sass, with full
SassScript expressions allowed for the values except in cases where Sass's
operators would be ambiguous with range operators. Range-context media features
will be merged as all media features have been up to this point, by adding each
feature to the media query's `"and"`-separated list.

### Design Decisions

While it would be possible to merge features more intelligently—for example,
`(width > 200px) and (width < 600px)` could be merged into
`(200px > width > 600px)`—doing so in general would add a great deal of
complexity to media merging, for very limited benefits in terms of output size
and readability.

The values of media features with the "range" type are heterogeneous, including
a [`<ratio>`][] type value type that Sass has no existing knowledge of. If Sass
were to support intelligent merging of these features, it would need to keep
abreast of any new value types supported by "range"-type media features. This
would violate Sass's general design principle of knowing as little about CSS as
possible.

## Syntax

Sass parses media queries twice. The first time is part of parsing the Sass
stylesheet, at which point the queries may contain SassScript expressions and
interpolation. The second parses the result of evaluating the SassScript as
plain CSS.

### Sass

This proposal defines a new syntax for media queries in Sass stylesheets. It is
intended to replace the existing syntax.

> Other than support for the [range context][] syntax, this syntax is designed
> to represent the current behavior of all Sass implementations.

<x><pre>
**MediaQueryList** ::= MediaQuery (',' MediaQuery)*
**MediaQuery**     ::= MediaType | (MediaType 'and')? MediaFeature ('and' MediaFeature)*
**MediaType**      ::= InterpolatedIdentifier InterpolatedIdentifier¹?
**MediaFeature**   ::= Interpolation
&#32;                 | '(' Expression² ')'
&#32;                 | '(' Expression² ':' Expression ')'
&#32;                 | '(' Expression² <mf-comparison> Expression² ')'
&#32;                 | '(' Expression² <mf-lt> Expression² <mf-lt> Expression² ')'
&#32;                 | '(' Expression² <mf-gt> Expression² <mf-gt> Expression² ')'
</pre></x>

1: This `InterpolatedIdentifier` may not be the identifier `"and"`.

2: These `Expression`s may not contain binary operator expressions with the
operators `=`, `>`, `>=`, `<`, or `<=`, except within parentheses (including
function calls and map literals) and square brackets.

The `<mf-comparison>`, `<mf-lt>`, and `<mf-gt>` productions are defined in
[Media Queries Level 4][].

> Note that Sass currently doesn't support parsing full media conditions
> according to the level 4 specification, since no browsers support it yet. See
> [sass/sass#2538][] for details.

### CSS

Plain CSS media queries are parsed using the following syntax:

<!-- markdown-link-check-disable -->
<x><pre>
**CssMediaQueryList** ::= CssMediaQuery (',' CssMediaQuery)*
**CssMediaQuery**     ::= CssMediaType
&#32;                    | (CssMediaType 'and')? CssMediaFeature ('and' CssMediaFeature)*
**CssMediaType**      ::= <ident-token> <ident-token>¹?
**CssMediaFeature**   ::= '(' <declaration-value> ')'
</pre></x>
<!-- markdown-link-check-enable -->

1: This `Identifier` may not be the identifier `"and"`.

The `<ident-token>` production matches the [railroad diagram][ident-token]
listed in CSS Syntax Level 3. The `<declaration-value>` production uses
[the definition][declaration-value] from CSS Syntax Level 3,
[consuming tokens][] only as needed until the production terminates.

> This is the existing syntax Sass uses to reparse plain CSS media queries.
> Since they're already parsed using `<declaration-value>`, no change in
> behavior is necessary to support range-form queries.

# `@media`

Although the `@media` rule is a plain CSS rule, Sass has special support for
parsing it and handling at runtime, in order to bring nested `@media` queries
to the top-level for browsers that don't support nesting natively.

## Table of Contents

* [Syntax](#syntax)
  * [Sass](#sass)
  * [CSS](#css)

## Syntax

Sass parses media queries twice. The first time is part of parsing the Sass
stylesheet, at which point the queries may contain SassScript expressions and
interpolation. The second parses the result of evaluating the SassScript as
plain CSS.

### Sass

Media queries are parsed from Sass source using the following syntax. All
identifiers are matched case-insensitively:

<x><pre>
**MediaQueryList** ::= MediaQuery (',' MediaQuery)*
**MediaQuery**     ::= MediaNot
&#32;                | MediaInParens (MediaAnd* | MediaOr*)
&#32;                | MediaType ('and' MediaNot | MediaAnd*)
**MediaType**      ::= [InterpolatedIdentifier] [InterpolatedIdentifier]¹?
**MediaNot**²      ::= 'not' MediaOrInterp
**MediaAnd**²      ::= 'and' MediaOrInterp
**MediaOr**²       ::= 'or' MediaOrInterp
**MediaOrInterp**  ::= Interpolation | MediaInParens
**MediaInParens**  ::= '(' Expression³ ')'
&#32;                | '(' Expression³ [\<mf-comparison>] Expression³ ')'
&#32;                | '(' Expression³ [\<mf-lt>] Expression³ [\<mf-lt>] Expression³ ')'
&#32;                | '(' Expression³ [\<mf-gt>] Expression³ [\<mf-gt>] Expression³ ')'
&#32;                | '(' MediaNot ')'
&#32;                | '(' MediaInParens (MediaAnd\*| MediaOr\*) ')'
</pre></x>

1. This `InterpolatedIdentifier` may not be the identifier `"and"`.

2. No whitespace is allowed between the identifier and the `MediaOrInterp` in
   these productions.

3. These `Expression`s may not:

   * Contain binary operator expressions with the operators `=`, `>`, `>=`, `<`,
     or `<=`, except within parentheses (including function calls and map
     literals) and square brackets.

   * Begin with the case-insensitive identifier `"not"`.

   * Begin with the character `"("`.

### CSS

Plain CSS media queries are parsed using the following syntax. All identifiers
are matched case-insensitively:

<x><pre>
**CssMediaQuery**     ::= CssMediaCondition
&#32;                   | CssMediaType ('and' CssMediaNot | CssMediaAnd*)
**CssMediaType**      ::= [\<ident-token>] [\<ident-token>]¹?
**CssMediaCondition** ::= CssMediaNot | CssMediaInParens (CssMediaAnd* | CssMediaOr*)
**CssMediaNot**       ::= 'not' CssMediaInParens
**CssMediaAnd**       ::= 'and' CssMediaInParens
**CssMediaOr**        ::= 'or' CssMediaInParens
**CssMediaInParens**  ::= '(' [\<declaration-value>] ')'
</pre></x>

1. This `<ident-token>` may not be the identifier `"and"`.

# Meta-Programming Module

This built-in module is available from the URL `sass:meta`.

## Functions

### `accepts-content()`

This is a new function in the `sass:meta` module.

```
accepts-content($mixin)
```

* If `$mixin` is not a [mixin], throw an error.

  [mixin]: ../types/mixins.md

* Return whether `$mixin` accepts a content block as a SassScript boolean.

### `calc-name()`

```
calc-name($calc)
```

* If `$calc` is not a calculation, throw an error.

* Return `$calc`'s name as a quoted string.

### `calc-args()`

```
calc-args($calc)
```

* If `$calc` is not a calculation, throw an error.

* Let `args` be an empty list.

* For each argument `arg` in `$calc`'s arguments:

  * If `arg` is a number or a calculation, add it to `args`.

  * Otherwise, [serialize] `arg` and add the result to `args` as an unquoted
    string.

  [serialize]: ../types/calculation.md#serialization

* Return `args` as an unbracketed comma-separated list.

### `call()`

```
call($function, $args...)
```

This function is also available as a global function named `call()`.

### `content-exists()`

```
content-exists()
```

This function is also available as a global function named `content-exists()`.

### `feature-exists()`

```
feature-exists($feature)
```

This function is also available as a global function named `feature-exists()`.

### `function-exists()`

```
function-exists($name, $module: null)
```

This function is also available as a global function named `function-exists()`.

* If `$name` is not a string, throw an error.

* If `$name` is not an [`<ident-token>`], return false.

* If `$module` is null:

  * Return whether [resolving a function][] named `$name` returns null.
  
  [resolving a function]: ../modules.md#resolving-a-member

* Otherwise, if `$module` isn't a string, throw an error.

* Otherwise, let `use` be the `@use` rule in [the current source file][] whose
  namespace is equal to `$module`. If no such rule exists, throw an error.

  [the current source file]: ../spec.md#current-source-file

* Return whether [`use`'s module][] contains a function named `$name`.

  [`use`'s module]: ../at-rules/use.md#a-use-rules-module

### `get-function()`

```
get-function($name, $css: false, $module: null)
```

This function is also available as a global function named `get-function()`.

* If `$name` is not a string, throw an error.

* If `$name` is not an [`<ident-token>`], throw an error.

* If `$module` is null:

  * If `$css` is falsey:

    * Return the result of [resolving a function][] named `$name`. If this
      returns null, throw an error.

  * Otherwise, return a function object that takes arguments `($args...)`. When
    this function is called:

    * If `$args` has any keyword arguments, throw an error.

    * Return a plain CSS function string with the name `$name` and the arguments
      `$args`.

* Otherwise:

  * If `$module` isn't a string, throw an error.

  * If `$css` is truthy, throw an error.

  * Let `use` be the `@use` rule in [the current source file][] whose
    namespace is equal to `$module`. If no such rule exists, throw an error.

  * Return [`use`'s module][]'s function named `$name`, or throw an error if no
    such function exists.

### `get-mixin()`

```
get-mixin($name, $module: null)
```

* If `$name` is not a string, throw an error.

* If `$name` is not an [`<ident-token>`], throw an error.

* If `$module` is null:

  * Return the result of [resolving a mixin] named `$name`. If this returns
    null, throw an error.

  [resolving a mixin]: ../modules.md#resolving-a-member

* Otherwise:

  * If `$module` is not a string, throw an error.

  * Let `use` be the `@use` rule in [the current source file] whose namespace is
    equal to `$module`. If no such rule exists, throw an error.

  * Return [`use`'s module]'s mixin named `$name`, or throw an error if no such
    mixin exists.

### `global-variable-exists()`

```
global-variable-exists($name, $module: null)
```

This function is also available as a global function named `global-variable-exists()`.

* If `$name` is not a string, throw an error.

* If `$name` is not a [`PlainVariable`], return false.

  [`PlainVariable`]: ../variables.md#syntax

* If `$module` is null:

  * Return whether [resolving a variable][] named `$name`, ignoring local
    scopes, returns null.
  
  [resolving a variable]: ../modules.md#resolving-a-member

* Otherwise, if `$module` isn't a string, throw an error.

* Otherwise, let `use` be the `@use` rule in the [current source file][] whose
  namespace is equal to `$module`. If no such rule exists, throw an error.

  [current source file]: ../spec.md#current-source-file

* Return whether [`use`'s module][] contains a function named `$name`.

### `inspect()`

```
inspect($value)
```

This function is also available as a global function named `inspect()`.

### `keywords()`

```
keywords($args)
```

This function is also available as a global function named `keywords()`.

### `mixin-exists()`

```
mixin-exists($name, $module: null)
```

This function is also available as a global function named `mixin-exists()`.

* If `$name` is not a string, throw an error.

* If `$name` is not an [`<ident-token>`], return false.

* If `$module` is null:

  * Return whether [resolving a mixin] named `$name` returns null.

* Otherwise, if `$module` isn't a string, throw an error.

* Otherwise, let `use` be the `@use` rule in [the current source file] whose
  namespace is equal to `$module`. If no such rule exists, throw an error.

* Return whether [`use`'s module] contains a mixin named `$name`.

### `module-functions()`

```
module-functions($module)
```

This function is also available as a global function named `module-functions()`.

* If `$module` is not a string, throw an error.

* Let `use` be the `@use` rule in [the current source file][] whose namespace is
  equal to `$module`. If no such rule exists, throw an error.

* Return a map whose keys are the names of functions in [`use`'s module][] and
  whose values are the corresponding functions.

### `module-mixins()`

This is a new function in the `sass:meta` module.

```
module-mixins($module)
```

* If `$module` is not a string, throw an error.

* Let `use` be the `@use` rule in [the current source file] whose namespace is
  equal to `$module`. If no such rule exists, throw an error.

* Return a map whose keys are the quoted string names of mixins in
  [`use`'s module] and whose values are the corresponding mixins.

### `module-variables()`

```
module-variables($module)
```

This function is also available as a global function named `module-variables()`.

* If `$module` is not a string, throw an error.

* Let `use` be the `@use` rule in [the current source file][] whose namespace is
  equal to `$module`. If no such rule exists, throw an error.

* Return a map whose keys are the names (without `$`) of variables in [`use`'s
  module][] and whose values are the corresponding values.

### `type-of()`

```
type-of($value)
```

This function is also available as a global function named `type-of()`.

* Look up `$value`'s type in the "Type" column of the table below, and return an
  unquoted string whose value is the corresponding cell in the "Result" column:

  | Type          | Result          |
  | ------------- | --------------- |
  | Argument list | `"arglist"`     |
  | Boolean       | `"bool"`        |
  | Calculation   | `"calculation"` |
  | Color         | `"color"`       |
  | Function      | `"function"`    |
  | List          | `"list"`        |
  | Map           | `"map"`         |
  | Mixin         | `"mixin"`       |
  | Null          | `"null"`        |
  | Number        | `"number"`      |
  | String        | `"string"`      |

### `variable-exists()`

```
variable-exists($name, $module: null)
```

This function is also available as a global function named `variable-exists()`.

* If `$name` is not a string, throw an error.

* If `$name` is not a [`PlainVariable`], return false.

* If `$module` is null:

  * Return whether [resolving a variable][] named `$name` returns null.

* Otherwise, if `$module` isn't a string, throw an error.

* Otherwise, let `use` be the `@use` rule in [the current source file][] whose
  namespace is equal to `$module`. If no such rule exists, throw an error.

* Return whether [`use`'s module][] contains a mixin named `$name`.

## Mixins

### `apply()`

```
apply($mixin, $args...)
```

* If `$mixin` is not a [mixin], throw an error.

* If the current `@include` rule has a `ContentBlock` and `$mixin` doesn't
  accept a block, throw an error.

* Execute `$mixin` with the `ArgumentInvocation` `(...$args)`. Treat the
  `@include` rule that invoked `apply` as the `@include` rule that invoked
  `$mixin`.

  > This ensures that any `@content` rules in `$mixin` will use `apply()`'s
  > `ContentBlock`.

### `load-css()`

```
load-css($url, $with: null)
```

* If `$url` isn't a string, throw an error.

* Let `config` be a configuration whose variable names and values are given by
  `$with` if `$with` isn't null, or the empty configuration otherwise.

* Let `module` be the result of [loading][] `$url` with `config`.

  [loading]: ../modules.md#loading-a-module

* Let `css` be the result of [resolving `module`'s extensions][].

  [resolving `module`'s extensions]: ../at-rules/extend.md#resolving-a-modules-extensions

  > This means that, if a module loaded by `load-css()` shares some dependencies
  > with the entrypoint module, those dependencies' CSS will be included twice.

* Treat `css` as though it were the contents of the mixin.

## Draft 3

* Use `CssMinMax` instead of `MinMaxExpression` as a possibility for
  `CalcValue`. We don't want SassScript funtion invocations in plain CSS math
  functions.

## Draft 2

* Fix a typo where `CalcValue` was incorrectly referred to as `CalcArithemtic`.

## Draft 1

* Initial draft.

# Plain CSS `min()` and `max()`: Draft 3

This proposal defines how Sass handles CSS's `min()` and `max()`
[math functions][].

## Table of Contents

* [Background](#background)
* [Summary](#summary)
  * [Design Decisions](#design-decisions)
* [Syntax](#syntax)

## Background

> This section is non-normative.

Since Ruby Sass 3.2, Sass has provided `min()` and `max()` functions that return
the minimum or maximum values among a set of SassScript numbers. Later, CSS
Values and Units Level 4 added support for additional [math functions][] with
special syntax like that in `calc()`, among which were `min()` and `max()`.

This presents a problem for Sass: to retain backwards-compatibility with
existing Sass stylesheets, it must support `min()` and `max()` as Sass
functions. However, to provide compatibility with CSS, it must also support them
as math functions with special syntax.

Support for CSS's `min()` and `max()` has landed in real browsers and
[Sass users want to use it][], so this should be solved with some urgency.

## Summary

> This section is non-normative.

Sass will support a combined syntax for `min()` and `max()` that will parse to
either a SassScript function call or a CSS math function, depending on the
syntax of the arguments. If all arguments to a function named `min()` or `max()`
are valid arguments for CSS math functions (possibly including use of the
`var()` or `env()` functions), it's parsed as a math function. Otherwise, it's
parsed as a SassScript function.

### Design Decisions

Another possible solution to this problem would be to rename the `min()` and
`max()` functions to something that doesn't conflict with CSS, or to add partial
support for [the proposed module system](module-system.md) to allow the
functions to be used with a namespace. Both of these solutions would require the
existing function invocations to be deprecated, though, and for all existing
stylesheets that use them to be migrated.

This deprecation would add a substantial amount of time before support for CSS's
math functions could be added, and the eventual removal of the SassScript
functions would probably create substantial migration pain for our users for a
long time.

Supporting both syntaxes does run the risk of escalating users' typos or
misunderstandings of syntax into confusing errors or even busted output.
However, because the CSS syntax is relatively narrow, it's likely that errors
will cause functions to be interpreted as SassScript where unit mismatches or
type errors will quickly be brought to the user's attention.

It's also conceivable that users are using SassScript's `min()` and `max()` in
ways that are now valid CSS. This seems very unlikely, though, since any such
invocation would either be useless or fail at runtime. Those invocations that
don't have type errors will also be compiled to semantically-identical (although
possibly less-compatible) CSS, so this is likely not to be a meaningful concern.

## Syntax

This proposal defines a new production, `MinMaxExpression`. This expression
should be parsed in a SassScript context when an expression is expected and the
input stream starts with an identifier with value `min` or `max` (ignoring case)
followed immediately by `(`.

The grammar for this production is:

<x><pre>
**MinMaxExpression** ::= CssMinMax | FunctionExpression
**CssMinMax**        ::= ('min(' | 'max(') CalcValue (',' CalcValue)\* ')'
**CalcValue**        ::= CalcValue (('+' | '-' | '*' | '/') CalcValue)+
&#32;                  | '(' CalcValue ')'
&#32;                  | ('calc(' | 'env(' | 'var(') InterpolatedDeclarationValue ')'
&#32;                  | CssMinMax
&#32;                  | Interpolation
&#32;                  | Number
</pre></x>

If a `MinMaxExpression` is parsed as a `CssMinMax`, it should return an unquoted
interpolated string expression that would be identical to the source text
according to CSS semantics for all possible interpolated strings. If it's parsed
as a `FunctionExpression`, it should be returned as a function expression.
Parsing a `CssMinMax` takes precedence over parsing a `FunctionExpression` in
cases where either would apply.

> Note that in practice *all* `CssMinMax` productions would also be valid
> `FunctionExpression`s. However, any `CssMinMax` that's likely to be used in
> practice would produce a `FunctionExpression` that would fail at runtime.

# Mixin API

## Types

### `SassMixin`

The JS API representation of a Sass mixin.

#### `internal`

The [private `internal` field] refers to a Sass mixin.

[private `internal` field]: index.d.ts.md#internal

# `@mixin`, `@include`, and `@content`

## `@mixin`

### Syntax

No whitespace is allowed between the `Identifier` and the `ArgumentDeclaration`
in `MixinRule`.

### Semantics

To execute a `@mixin` rule `rule`:

* Let `name` be the value of `rule`'s `Identifier`.

* Let `parent` be the [current scope].

  [current scope]: ../spec.md#scope

* Let `mixin` be a [mixin] named `name` which accepts a content block if `rule`
  contains a `@content` rule. To execute this mixin with `args`:

  [mixin]: ../types/mixins.md

  * With the current scope set to an empty [scope] with `parent` as its parent:

    * Evaluate `args` with `rule`'s `ArgumentDeclaration`.

    * Execute each statement in `rule`.

  [scope]: ../spec.md#scope

## `@include`

[NamespacedIdentifier]: ../modules.md#syntax

No whitespace is allowed between the `NamespacedIdentifier` and the
`ArgumentInvocation` in `IncludeRule`.

### Semantics

To execute an `@include` rule `rule`:

* Let `name` be `rule`'s `NamespacedIdentifier`.

* Let `mixin` be the result of [resolving a mixin] named `name`. If this returns
  null, throw an error.

  [resolving a mixin]: ../modules.md#resolving-a-member

* Execute `mixin` with `rule`'s `ArgumentInvocation`.

## `@content`

The `@content` rule runs a block of styles provided by the user who invoked the
current mixin.

### Syntax

<x><pre>
**ContentRule** ::= '@content' ArgumentInvocation?
</pre></x>

As with all statements, a `ContentRule` must be separated from other statements
with a semicolon.

### Semantics

To execute a `@content` rule `content` within a mixin that's invoked with
an `@include` rule `include`:

> `@content` rules are syntactically guaranteed to only appear in mixin bodies,
> and mixins must be invoked using `@include`, so `include` is guaranted to
> exist.

* Let `invocation` be `content`'s `ArgumentInvocation`, or an invocation with no
  arguments if `content` has no `ArgumentInvocation`.

  > This means that `@content` and `@content()` are interpreted identically.

* Let `arguments` be the result of applying `invocation` to `declaration`.

  > This means `arguments` is a mapping from variable names to values. If
  > `invocation` isn't a valid invocation of `declaration`, this will throw an
  > error that should be surfaced to the user.

* If `include` has no `ContentBlock`, do nothing.

  > Exiting here rather than earlier means that `@content(value)` is an error if
  > `include` has no content block.

* Otherwise, let `scope` be a new scope that's a child of `include`'s scope.

* For each pair `variable` and `value` in `arguments`:

  * Set `variable` to `value` in `scope`.

* Execute `include`'s `ContentBlock` statements in `scope`.

# Mixins

## Types

The value type known as a "mixin" is a procedure that takes an
`ArgumentInvocation` `args` and returns nothing. Each mixin has a string name
and a boolean that indicates whether or not it accepts a content block.

> The specific details of executing this procedure differ depending on where and
> how the mixin is defined. A mixin will typically add nodes to the CSS
> stylesheet.

### Operations

A mixin follows the default behavior of all SassScript operations, except that
equality is defined as below.

#### Equality

Mixins use reference equality: two mixin values are equal only if they refer to
the exact same instance of the same procedure.

> If the same file were to be imported multiple times, Sass would create a new
> mixin value for each `@mixin` rule each time the file is imported. Because a
> new mixin value has been created, although the name, body, and source span of
> a given mixin from the file would be the same between imports, the values
> would not be equal because they refer to different instances. Mixins
> pre-defined by the Sass language are instatiated at most once during the
> entire evaluation of a program.
>
> As an example, if we declare two mixins
### Serialization

To serialize a mixin value:

* If the value is not being inspected, throw an error.

* Otherwise, emit `'get-mixin("'`, then the mixin's name, then `'")'`.

## Draft 10

* Update the timeline for the deprecation and removal of `@import`.

## Draft 9

* Don't add imported module members to the global scope for a nested import.

## Draft 8

* Remove `adjust-hue()` from the `sass:color` module. `color.adjust($hue: ...)`
  should be used instead.

## Draft 7

* Change the syntax for namespaced variables from `$namespace.name` to
  `namespace.$name`.

* Make `module-variables()` and `module-functions()` normalize underscores to
  hyphens.

* Update the release timeline.

## Draft 6

* Require `ForwardRule`'s `AsClause` to come before `ShowClose` or `HideClause`,
  rather than after. This ensures that the clause with unbounded length comes
  last if both are present.

* Imported forwarded members now take precedence over members that were defined
  in the local file prior to the `@import`.

* Modules can now extend CSS from modules they forward but do not use.

* Only allow variables defined at the top level of a stylesheet to be configured
  with `@use ... with`.

* Allow variables imported by a stylesheet to be configured with `@use ...
  with`.

* Move `keywords()` from `sass:map` to `sass:meta`.

* Add `extend()` to `sass:selector`. This is the same as the global
  `selector-extend()` function.

* The `sass:color` functions `grayscale()`, `invert()`, `alpha()`, and
  `opacity()` no longer allow non-color arguments.

* Make `get-function()` throw an error if `$module` and `$css` are both passed.

* Describe how to resolve built-in global functions and mixins.

## Draft 5

* Drop the `lighten()`, `darken()`, `saturate()`, `desaturate()`, `opacify()`,
  and `transparentize()` functions from the `color` module. The use of these
  functions is discouraged, and they're just shorthands for the `color.adjust()`
  function so including them isn't necessary to allow migration.

* Give files with the suffix `".css"` lower precedence than `".sass"` and
  `".scss"` files even in `@use`. This accommodates the use-case of `@use`ing a
  file that's also being compiled in-place to a CSS file.

* Add a `$module` parameter to `get-function()`.

* Load CSS from modules used by imported files.

* Clarify the behavior of the first law of extend when multiple modules extend
  the same selector.

* Remove missing outdated entries from the table of contents.

## Draft 4.2

* Add "static analysis" as a low-level goal.

* Ensure that plain CSS imports always appear at the beginning of the generated
  CSS.

* Other than plain CSS imports, always emit the CSS for a given module
  (including comments) to the same location, rather than splitting it up if a
  comment appeared above a `@use`.

* Forbid diamond extensions from interacting with one another. That is, if two
  modules use the same upstream modules but don't use one another, ensure that
  they cannot extend one another's selectors.

* Explicitly indicate that only selectors explicitly written by hand are exempt
  from being optimized away when resolving extensions.

* Always add `!global` variables to a module's variable set, even if those
  variable declarations aren't evaluated.

* Explicitly define that `*-exists()` functions should throw an error for
  conflicting member names from global modules.

* Explicitly define how members are resolved locally versus globally.

* Fix some faulty logic around resolving namespaceless members. If a member is
  defined in both the import context and a global module that's now an error.

* Syntactically forbid namespaced references to private identifiers (as in
  `foo.-bar`). This is never valid, so making it a syntax error rather than just
  a runtime error ensures that the user will be notified as eagerly as possible.

* Fix the logic for import-only files so that `@import "foo.scss"` doesn't try
  to load `foo.scss.import` and `@import "foo"` doesn't try to load
  `foo.import/index.scss`.

* Rename configuration variables when they're passed to a forwarded module with
  an `AsClause`.

* Only allow top-level members to shadow forwarded members.

* Add an imported file's members to the current module.

* Make config resolution part of evaluating a `!default` variable assignment
  rather than part of resolving any variable.

* Clean up the way "Forwarding Modules" and "Importing Files" are invoked.

* Fix a few broken links.

## Draft 4.1

* Make the release timeline more concrete.

* Fix a broken link in the table of contents.

## Draft 4

* Allow `@forward "module" as prefix-*` to add a prefix to forwarded module.

* Rename `math.unitless()` to `math.is-unitless()`, to match
  `list.is-bracketed()` and make it clear that it doesn't remove units from a
  number.

* Rename `math.comparable()` to `math.compatible()`, to make it clear that it
  also tests for compatibility for addition and subtraction.

* Add the missing `content-exists()` function.

* Move `meta.unique-id()` to `string.unique-id()`.

* Add "code splitting" as a non-goal.

## Draft 3

* Limit extensions to affecting only modules transitively used by the module in
  which the `@extend` appears.

* Replace module mixins with a built-in `load-css()` mixin that dynamically
  includes the CSS for a module with a given URL.

* Add support for configuring modules using a new `with` clause.

* Update the `module-variables()` and `module-functions()` functions to return
  maps from names to values, rather than just lists of names.

* Remove the `module-mixins()` function until Sass supports first-class mixins.

* Add support for `_file.import.scss` as a file that only `@import`s will see.

* Change the syntax for a `@use` rule without a namespace to `@use "..." as *`.

* Initialize modules' variables with the values as declared in those modules.

* Allow comments to be emitted before dependencies' CSS.

* Show or hide variables with their `$` prefixes in `@forward`.

* Define a source file as an AST plus a canonical URL. This means that built-in
  modules are no longer source files, which seems more reasonable.

* Clarify that `@forward` includes the forwarded module's CSS tree.

* Pass configuration for a module to any modules it `@forward`s.

* Forbid whitespace in various member-reference productions.

* Explicitly indicate that extensions are dynamically scoped.

* Explicitly indicate which parts of a module are immutable.

* Explicitly describe how variable declarations are resolved.

* Explicitly describe how a configuration affects file evaluation.

* Explicitly mention that variable declarations are allowed before `@use`.

* Loading a module with configuration variables it doesn't expose is now an
  error.

* Don't make nested mixin and function declarations part of a module's API.

* Re-organize "Resolving Extensions" to make its behavior clearer.

* Link to the existing import spec rather than redefining terms.

## Draft 2.1

* Make sure nested `@import`s preserve the parent selector/at-rule context of
  the current stylesheet.

* Removed the low-level "using CSS files" goal, since this is now covered by
  [the CSS Imports proposal][].

  [the CSS Imports proposal]: ../accepted/css-imports.md

* Add "Context-independent modules" and "Increased strictness" as non-goals.

* Add a couple FAQs.

* Made the requirements for valid module URLs more explicit.

* Merged the "Using Modules" section into the "Loading Modules" algorithm.

* Added a separate section for "Determining Prefixes".

* Make the import context mandatory everywhere, to simplify logic.
  Implementations are still free to allocate them lazily, though.

* Consistently put non-normative asides in block quotes.

* Refer to "namespaces" rather than "prefixes".

* Refer to "URLs" rather than "URIs", per [the URL spec][].

* Refer to "at-rules" rather than "directives".

* Refer to "style rules" rather than "CSS rules".

* Format and structure algorithms consistently with more recent proposals.

* Other small non-semantic changes.

## Draft 2

* The namespace separator is now a period rather than a hyphen.

* Placeholder selectors are no longer considered members of modules. They are
  still allowed to be marked private, however.

* Be explicit about how URIs are canonicalized and thus compared.

* Allow `@forward` and `@use` to be intermingled.

* Allow `@extend` to affect downstream modules as well as upstream ones.
  Downstream modules inherently share the same semantics for selector names, and
  extensions are an aspect of those semantics.

* Don't allow module mixin arguments to be passed by position.

* To `@forward` a module mixin, use the module's prefix rather than its URI.

* Modules now export *all* variables that have global definitions, even if those
  definitions weren't executed. This preserves the invariant that modules'
  member sets are statically knowable.

* Add new functions for module introspection.

* Add a `$module` parameter to `global-variable-exists()`, `function-exists()`,
  and `mixin-exists()`.

## Draft 1

* Initial draft.

# The Next-Generation Sass Module System: Draft 10

This repository houses a proposal for the `@use` rule and associated module
system. This is a *living proposal*: it's intended to evolve over time, and is
hosted on GitHub to encourage community collaboration and contributions. Any
suggestions or issues can be brought up and discussed on [the issue
tracker][issues].

Although this document describes some imperative processes when describing the
semantics of the module system, these aren't meant to prescribe a specific
implementation. Individual implementations are free to implement this feature
however they want as long as the end result is the same. However, there are
specific design decisions that were made with implementation efficiency in
mind—these will be called out explicitly in non-normative block-quoted asides.

## Background

> This section is non-normative.

The new `@use` at-rule is intended to supercede Sass's `@import` rule as the
standard way of sharing styles across Sass files. `@import` is the simplest
possible form of re-use: it does little more than directly include the target
file in the source file. This has caused numerous problems in practice:
including the same file more than once slows down compilation and produces
redundant output; users must manually namespace everything in their libraries;
there's no encapsulation to allow them to keep implementation details hidden;
and it's very difficult for either humans or tools to tell where a given
variable, mixin, or function comes from.

The new module system is intended to address these shortcomings (among others)
and bring Sass's modularity into line with the best practices as demonstrated by
other modern languages. As such, the semantics of `@use` are heavily based on
other languages' module systems, with Python and Dart being particularly strong
influences.

## Goals

> This section is non-normative.

### High-Level

These are the philosophical design goals for the module system as a whole. While
they don't uniquely specify a system, they do represent the underlying
motivations behind many of the lower-level design decisions.

* **Locality**. The module system should make it possible to understand a Sass
  file by looking only at that file. An important aspect of this is that names
  in the file should be resolved based on the contents of the file rather than
  the global state of the compilation. This also applies to authoring: an author
  should be able to be confident that a name is safe to use as long as it
  doesn't conflict with any name visible in the file.

* **Encapsulation**. The module system should allow authors, particularly
  library authors, to choose what API they expose. They should be able to define
  entities for internal use without making those entities available for external
  users to access or modify. The organization of a library's implementation into
  files should be flexible enough to change without changing the user-visible
  API.

* **Configuration**. Sass is unusual among languages in that its design leads to
  the use of files whose entire purpose is to produce side effects—specifically,
  to emit CSS. There's also a broader class of libraries that may not emit CSS
  directly, but do define configuration variables that are used in computations,
  including computation of other top-level variables' values. The module system
  should allow the user to flexibly use and configure modules with side-effects.

### Low-Level

These are goals that are based less on philosophy than on practicality. For the
most part, they're derived from user feedback that we've collected about
`@import` over the years.

* **Import once**. Because `@import` is a literal textual inclusion, multiple
  `@import`s of the same Sass file within the scope of a compilation will
  compile and run that file multiple times. At best this hurts compilation time
  for little benefit, and it can also contribute to bloated CSS output when the
  styles themselves are duplicated. The new module system should only compile a
  file once.

* **Backwards compatibility**. We want to make it as easy as possible for people
  to migrate to the new module system, and that means making it work in
  conjunction with existing stylesheets that use `@import`. Existing stylesheets
  that only use `@import` should have identical importing behavior to earlier
  versions of Sass, and stylesheets should be able to change parts to `@use`
  without changing the whole thing at once.

* **Static analysis**. We want to make it possible for tools that consume Sass
  files to understand where every variable, mixin, and function reference
  points. In service of this, we want to ensure that every module has a "static
  shape"—the set of variables, mixins, and functions it exposes, as well as
  mixin and function signatures—that's entirely independent of how that module
  might be executed.

### Non-Goals

These are potential goals that we have explicitly decided to avoid pursuing as
part of this proposal for various reasons. Some of them may be on the table for
future work, but we don't consider them to be blocking the module system.

* **Dynamic imports**. Allowing the path to a module to be defined dynamically,
  whether by including variables or including it in a conditional block, moves
  away from being declarative. In addition to making stylesheets harder to read,
  this makes any sort of static analysis more difficult (and actually impossible
  in the general case). It also limits the possibility of future implementation
  optimizations.

* **Importing multiple files at once**. In addition to the long-standing reason
  that this hasn't been supported—that it opens authors up to sneaky and
  difficult-to-debug ordering bugs—this violates the principle of locality by
  obfuscating which files are imported and thus where names come from.

* **Extend-only imports**. The idea of importing a file so that the CSS it
  generates isn't emitted unless it's `@extend`ed is cool, but it's also a lot
  of extra work. This is the most likely feature to end up in a future release,
  but it's not central enough to include in the initial module system.

* **Context-independent modules**. It's tempting to try to make the loaded form
  of a module, including the CSS it generates and the resolved values of all its
  variables, totally independent of the entrypoint that cause it to be loaded.
  This would make it possible to share loaded modules across multiple
  compilations and potentially even serialize them to the filesystem for
  incremental compilation.

  However, it's not feasible in practice. Modules that generate CSS almost
  always do so based on some configuration, which may be changed by different
  entrypoints rendering caching useless. What's more, multiple modules may
  depend on the same shared module, and one may modify its configuration before
  the other uses it. Forbidding this case in general would effectively amount to
  forbidding modules from generating CSS based on variables.

  Fortunately, implementations have a lot of leeway to cache information that
  the can statically determine to be context-independent, including source trees
  and potentially even constant-folded variable values and CSS trees. Full
  context independence isn't likely to provide much value in addition to that.

* **Increased strictness**. Large teams with many people often want stricter
  rules around how Sass stylesheets are written, to enforce best practices and
  quickly catch mistakes. It's tempting to use a new module system as a lever to
  push strictness further; for example, we could make it harder to have partials
  directly generate CSS, or we could decline to move functions we'd prefer
  people avoid to the new built-in modules.

  As tempting as it is, though, we want to make all existing use-cases as easy
  as possible in the new system, *even if we think they should be avoided*. This
  module system is already a major departure from the existing behavior, and
  will require a substantial amount of work from Sass users to support. We want
  to make this transition as easy as possible, and part of that is avoiding
  adding any unnecessary hoops users have to jump through to get their existing
  stylesheets working in the new module system.

  Once `@use` is thoroughly adopted in the ecosystem, we can start thinking
  about increased strictness in the form of lints or TypeScript-style
  `--strict-*` flags.

* **Code splitting**. The ability to split monolithic CSS into separate chunks
  that can be served lazily is important for maintaining quick load times for
  very large applications. However, it's orthogonal to the problems that this
  module system is trying to solve. This system is primarily concerned with
  scoping Sass APIs (mixins, functions, and placeholders) rather than declaring
  dependencies between chunks of generated CSS.

  We believe that this module system can work in concert with external
  code-splitting systems. For example, the module system can be used to load
  libraries that are used to style individual components, each of which is
  compiled to its own CSS file. These CSS files could then declare dependencies
  on one another using special comments or custom at-rules and be stitched
  together by a code-splitting post-processor.

## Summary

> This section is non-normative.

This proposal adds two at-rules, `@use` and `@forward`, which may only appear at
the top level of stylesheets before any rules (other than `@charset`). Together,
they're intended to completely replace `@import`, which will eventually be
deprecated and even more eventually removed from the language.

### `@use`

`@use` makes CSS, variables, mixins, and functions from another stylesheet
accessible in the current stylesheet. By default, variables, mixins, and
functions are available in a namespace based on the basename of the URL.

In addition to namespacing, there are a few important differences between `@use`
and `@import`:

* `@use` only executes a stylesheet and includes its CSS once, no matter how
  many times that stylesheet is used.
* `@use` only makes names available in the current stylesheet, as opposed to
  globally.
* Members whose names begin with `-` or `_` are private to the current
  stylesheet with `@use`.
* If a stylesheet includes `@extend`, that extension is only applied to
  stylesheets it imports, not stylesheets that import it.

Note that placeholder selectors are *not* namespaced, but they *do* respect
privacy.

#### Controlling Namespaces

Although a `@use` rule's default namespace is determined by the basename of its
URL, it can also be set explicitly using `as`.

The special construct `as *` can also be used to include everything in the
top-level namespace. Note that if multiple modules expose members with the same
name and are used with `as *`, Sass will produce an error.

#### Configuring Libraries

With `@import`, libraries are often configured by setting global variables that
override `!default` variables defined by those libraries. Because variables are
no longer global with `@use`, it supports a more explicit way of configuring
libraries: the `with` clause.

```scss
@use "bootstrap" with (
  $paragraph-margin-bottom: 1.2rem
);
```

This sets bootstrap's `$paragraph-margin-bottom` variable to `1.2rem` before
evaluating it. The `with` clause only allows variables defined in (or forwarded
by) the module being imported, and only if they're defined with `!default`, so
users are protected against typos.

### `@forward`

The `@forward` rule includes another module's variables, mixins, and functions
as part of the API exposed by the current module, without making them visible to
code within the current module. It allows library authors to be able to split up
their library among many different source files without sacrificing locality
within those files. Unlike `@use`, forward doesn't add any namespaces to names.

```scss
// bootstrap.scss
@forward "functions";
@forward "variables";
@forward "mixins";
```

#### Visibility Controls

A `@forward` rule can choose to show only specific names:

```scss
@forward "functions" show color-yiq;
```

It can also hide names that are intended to be library-private:

```scss
@forward "functions" hide assert-ascending;
```

#### Extra Prefixing

If you forward a child module through an all-in-one module, you may want to add
some manual namespacing to that module. You can do what with the `as` clause,
which adds a prefix to every member name that's forwarded:

```scss
// material/_index.scss
@forward "theme" as theme-*;
```

This way users can use the all-in-one module with well-scoped names for theme
variables:

```scss
@use "material" with ($theme-primary: blue);
```

or they can use the child module with simpler names:

```scss
@use "material/theme" with ($primary: blue);
```

### `@import` Compatibility

The Sass ecosystem won't switch to `@use` overnight, so in the meantime it needs
to interoperate well with `@import`. This is supported in both directions:

* When a file that contains `@import`s is `@use`d, everything in its global
  namespace is treated as a single module. This module's members are then
  referred to using its namespace as normal.

* When a file that contains `@use`s is `@import`ed, everything in its public API
  is added to the importing stylesheet's global scope. This allows a library to
  control what specific names it exports, even for users who `@import` it rather
  than `@use` it.

In order to allow libraries to maintain their existing `@import`-oriented API,
with explicit namespacing where necessary, this proposal also adds support for
files that are only visible to `@import`, not to `@use`. They're written
`"file.import.scss"`, and imported when the user writes `@import "file"`.

### Built-In Modules

The new module system will also add seven built-in modules: `math`, `color`,
`string`, `list`, `map`, `selector`, and `meta`. These will hold all the
existing built-in Sass functions. Because these modules will (typically) be
imported with a namespace, it will be much easier to use Sass functions without
running into conflicts with plain CSS functions.

This in turn will make it much safer for Sass to add new functions. We expect to
add a number of convenience functions to these modules in the future.

#### `meta.load-css()`

This proposal also adds a new built-in mixin, `meta.load-css($url, $with: ())`.
This mixin dynamically loads the module with the given URL and includes its CSS
(although its functions, variables, and mixins are not made available). This is
a replacement for nested imports, and it helps address some use-cases of dynamic
imports without many of the problems that would arise if new members could be
loaded dynamically.

## Frequently Asked Questions

> This section is non-normative.

* **Why this privacy model?** We considered a number of models for declaring
  members to be private, including a JS-like model where only members that were
  explicitly exported from a module were visible and a C#-like model with an
  explicit `@private` keyword. These models involve a lot more boilerplate,
  though, and they work particularly poorly for placeholder selectors where
  privacy may be mixed within a single style rule. Name-based privacy also
  provides a degree of compatibility with conventions libraries are already
  using.

* **Can I make a member library-private?** There's no language-level notion of a
  "library", so library-privacy isn't built in either. However, members used by
  one module aren't automatically visible to downstream modules. If a module
  isn't [`@forward`ed](#forwarding-modules) through a library's main stylesheet,
  it won't be visible to downstream consumers and thus is effectively
  library-private.

  As a convention, we recommend that libraries write library-private stylesheets
  that aren't intended to be used directly by their users in a directory named
  `src`.

* **How do I make my library configurable?** If you have a large library made up
  of many source files that all share some core `!default`-based configuration,
  we recommend that you define that configuration in a file that gets forwarded
  from your library's entrypoint and used by your library's files. For example:

  ```scss
  // bootstrap.scss
  @forward "variables";
  @use "reboot";
  ```

  ```scss
  // User's stylesheet
  @use "bootstrap" with (
    $paragraph-margin-bottom: 1.2rem
  );
  ```

## Definitions

### Member

A *member* is a Sass construct that's defined either by the user or the
implementation and is identified by a Sass identifier. This currently includes
variables, mixins, and functions (but *not* placeholder selectors). Each member
type has its own namespace, so for example the mixin `name` doesn't conflict
with the function `name` or the variable `$name`. All members have definitions
associated with them, whose specific structure depends on the type of the given
member.

### Extension

An *extension* is an object that represents a single `@extend` rule. It contains
two selectors: the *extender* is the selector for the rule that contains the
`@extend`, and the *extendee* is the selector that comes after the `@extend`.
For example:

An extension may be applied to a selector to produce a new selector. This
process is outside the scope of this document, and remains unchanged from
previous versions of Sass.

### CSS Tree

A *CSS tree* is an abstract CSS syntax tree. It has multiple top-level CSS
statements like at-rules or style rules. The ordering of these statements is
significant.

A CSS tree cannot contain any Sass-specific constructs, with the notable
exception of placeholder selectors. These are allowed so that modules' CSS may
be `@extend`ed.

An *empty CSS tree* contains no statements.

### Configuration

A *configuration* is a map from variable names to SassScript values. It's used
when [executing](#executing-files) a [source file](#source-file) to customize
its execution. An *empty configuration* contains no entries.

### Module

A *module* is a collection of [members](#member) and [extensions](#extension),
as well as a [CSS tree](#css-tree) (although that tree may be empty).
User-defined modules have an associated [source file](#source-file) as well.
Each module may have only one member of a given type and name (for example, a
module may not have two variables named `$name`).

A given module can be produced by [executing](#executing-files) the [source
file](#source-file) identified by the module's canonical URL with a
[configuration](#configuration).

### Module Graph

Modules also track their `@use` and `@forward` at-rules, which point to other
modules. In this sense, modules can be construed as a [directed acyclic graph][]
where the vertices are modules and the edges are `@use` rules and/or `@forward`
rules. We call this the *module graph*.

The module graph is not allowed to contain cycles because they make it
impossible to guarantee that all dependencies of a module are available before
that module is loaded. Although the names and APIs of a module's members can be
determined without [executing](#executing-files) it, Sass allows code to be
evaluated while loading a module, so those members may not behave correctly when
invoked before the module is executed.

### Source File

A *source file* is a Sass abstract syntax tree along with its canonical URL.
Each canonical URL is associated with zero or one source files.

A source file can be [executed](#executing-files) with a
[configuration](#configuration) to produce a [module](#module).

> The names (and mixin and function signatures) of this module's members are
> static, and can be determined without executing the file. This means that all
> modules for a given source file have the same member names regardless of the
> context in which those modules are loaded.

> Note that [built-in modules](#built-in-modules) *do not* have source files
> associated with them.

### Entrypoint

The *entrypoint* of a compilation is the [source file](#source-file) that was
initially passed to the implementation. Similarly, the *entrypoint module* is
the [module](#module) loaded from that source file with an empty configuration.
The entrypoint module is the root of the [module graph](#module-graph).

### Import Context

An *import context* is a collection of members, indexed by their types and
names. It's used to ensure that the previous global-namespace behavior is
preserved when `@import`s are used.

An import context is mutable throughout its entire lifetime, unlike a module
whose CSS and function/mixin definitions don't change once it's been fully
created. This allows it to behave as a shared namespace for a connected group of
imports.

> Note that an import context never includes members made visible by `@use`,
> even if a file with `@use` rules is imported.

## Syntax

### `@use`

The new at-rule will be called `@use`. The grammar for this rule is as follows:

<x><pre>
**UseRule**         ::= '@use' QuotedString AsClause? WithClause?
**AsClause**        ::= 'as' ('\*' | Identifier)
**WithClause**      ::= 'with' '('
&#32;                     KeywordArgument (',' KeywordArgument)\* ','?
&#32;                   ')'
**KeywordArgument** ::= '$' Identifier ':' Expression
</pre></x>

`@use` rules must be at the top level of the document, and must come before any
rules other than `@charset` or `@forward`. The `QuotedString`'s contents, known
as the rule's *URL*, must be a [valid URL string][] (for non-[special][special
URL scheme] base URL). No whitespace is allowed after `$` in `KeywordArgument`.

> Because each `@use` rule affects the namespace of the entire [source
> file](#source-file) that contains it, whereas most other Sass constructs are
> purely imperative, keeping it at the top of the file helps reduce confusion.
>
> Variable declarations aren't rules, and so *are* valid before or between
> `@use` and `@forward` rules. This makes it possible to define intermediate
> variables when passing configuration to a `WithClause`.
>
> ```scss
> @use "sass:color";
>
> $base-color: #abc;
> @use "library" with (
>   $base-color: $base-color,
>   $secondary-color: color.scale($base-color, $lightness: -10%),
> );
> ```

A `@use` rule's *namespace* is determined using [this
algorithm](#determining-namespaces). If the algorithm for determining a
namespace fails for a `@use` rule, that rule is invalid. If it returns `null`,
that rule is called *global*. A namespace is used to identify the used
[module](#module)'s members within the current [source file](#source-file).

### `@forward`

This proposal introduces an additional new at-rule, called `@forward`. The
grammar for this rule is as follows:

<x><pre>
**ForwardRule** ::= '@forward' QuotedString AsClause? (ShowClause | HideClause)?
**AsClause**    ::= 'as' Identifier '*'
**ShowClause**  ::= 'show' MemberName (',' MemberName)*
**HideClause**  ::= 'hide' MemberName (',' MemberName)*
**MemberName**  ::= '$'? Identifier
</pre></x>

`@forward` rules must be at the top level of the document, and must come before
any rules other than `@charset` or `@use`. If they have a `QuotedString`, its
contents, known as the rule's *URL*, must be a [valid URL string][] (for
non-[special][special URL scheme] base URL). No whitespace is allowed after `$`
in `MemberName`, or before `*` in `AsClause`.

### Member References

This proposal updates the syntax for referring to members. For functions and
mixins, this update affects only calls, not definitions. Variables, on the other
hand, may use this syntax for either assignment or reference.

<x><pre>
**PublicIdentifier**     ::= [\<ident-token>][] that doesn't begin with '-' or '_'
**Variable**             ::= '$' Identifier | Identifier '.$' PublicIdentifier
**NamespacedIdentifier** ::= Identifier | Identifier '.' PublicIdentifier
**FunctionCall**         ::= NamespacedIdentifier ArgumentInvocation
**Include**              ::= '@include' NamespacedIdentifier ArgumentInvocation?
</pre></x>

    No whitespace is allowed before or after the `'.'` in `NamespacedIdentifier`,
before or after the `'.$'` in `VariableIdentifier`, after the `$` in
`VariableIdentifier`, or between the `NamespacedIdentifier` and the
`ArgumentInvocation` in `FunctionCall` or `Include`.

> The dot-separated syntax (`namespace.name`) was chosen in preference to a
> hyphenated syntax (for example `namespace-name`) because it makes the
> difference between module-based namespaces and manually-separated identifiers
> very clear. It also matches the conventions of many other languages. We're
> [reasonably confident][Tab comment] that the syntax will not conflict with
> future CSS syntax additions.
>

    ## Procedures

The following procedures are not directly tied to the semantics of any single
construct. Instead, they're used as components of multiple constructs'
semantics. They can be thought of as re-usable functions.

### Determining Namespaces

This algorithm takes a `@use` rule `rule`, and returns either a string or an
identifier.

> This algorithm is context-independent, so a namespace for a `@use` rule can be
> determined without reference to anything outside the syntax of that rule.

* If `rule` has an `'as'` clause `as`:

  * If `as` has an identifier, return it.

  * Otherwise, return `null`. The rule is global.

* Let `path` be the `rule`'s URL's [path][URL path].
    
* Let `basename` be the text after the final `/` in `path`, or the entire `path`
  if `path` doesn't contain `/`.

* Let `module-name` be the text before the first `.` in `path`, or the entire
  `path` if `path` doesn't contain `.`.

* If `module-name` isn't a Sass identifier, throw an error.

* Return `module-name`.

### Loading Modules

This describes the general process for loading a module. It's used as part of
various other semantics described below. To load a module with a given URL `url`
and [configuration](#configuration) `config`:

* If `url`'s scheme is `sass`:

  * If `config` is not empty, throw an error.

  * If a [built-in module](#built-in-modules) exists with the exact given URL,
    return it.

  * Otherwise, throw an error.

* Let `file` be the [source file](#source-file) result of [loading][loading an
  import] `url`.
    
* If `file` is null, throw an error.

* If `file` has already been [executed](#executing-files):

  * If `config` is not empty, throw an error.

  * Otherwise, return the module that execution produced.

  > This fulfills the "import once" low-level goal.

* If `file` is currently being executed, throw an error.

  > This disallows circular `@use`s, which ensures that modules can't be used
  > until they're fully initialized.

* Otherwise, return the result of [executing](#executing-files) `file` with
  `config` and a new [import context](#import-context).

> For simplicity, this proposal creates an import context for every module.
> Implementations are encouraged to avoid eagerly allocating resources for
> imports, though, to make use-cases only involving `@use` more efficient.

### Resolving Extensions

The module system also scopes the resolution of the `@extend` rule. This helps
satisfy locality, making selector extension more predictable than its global
behavior under `@import`.

Extension is scoped to CSS in [modules](#module) *transitively used or forwarded
by* the module in which the `@extend` appears. This transitivity is necessary
because CSS is not considered a [member](#member) of a module, and can't be
controlled as explicitly as members can.

> We considered having extension also affect modules that were *downstream* of
> the `@extend`, on the theory that they had a similar semantic notion of the
> selector in question. However, because this didn't affect other modules
> imported by the downstream stylesheet, it created a problem for the downstream
> author. It should generally be safe to take a bunch of style rules from one
> module and split them into multiple modules that are all imported by that
> module, but doing so could cause those styles to stop being affected by
> upstream extensions.
>
> Extending downstream stylesheets also meant that the semantics of a downstream
> author's styles are affected by the specific extensions used in an upstream
> stylesheet. For example,
>  ```scss
  // _variables.scss
  $paragraph-margin-bottom: 1rem !default;
  ```
>
> That could be a drawback or a benefit, but it's more likely that upstream
> authors think of themselves as distributing a chunk of styles rather than an
> API consisting of things they've extended.

We define a general process for resolving extensions for a given module
`starting-module`. This process returns a [CSS tree](#css-tree) that includes
CSS for *all* modules transitively used or forwarded by `starting-module`.

* Let `new-selectors` be an empty map from style rules to selectors. For the
  purposes of this map, style rules are compared using *reference equality*,
  meaning that style rules at different points in the CSS tree are always
  considered different even if their contents are the same.

* Let `new-extensions` be an empty map from modules to sets of extensions.

* Let `extended` be the subgraph of the [module graph](#module-graph) containing
  modules that are transitively reachable from `starting-module`.

* For each module `domestic` in `extended`, in reverse [topological][] order:

  * Let `downstream` be the set of modules that use or forward `domestic`.

    > We considered having extension *not* affect forwarded modules that weren't
    > also used. This would have matched the visibility of module members, but
    > it would also be the only place where `@forward` and `@use` behave
    > differently with regards to CSS, which creates confusion and
    > implementation complexity. There's also no clear use case for it, so we
    > went with the simpler route of making forwarded CSS visible to `@extend`.

  * For each style rule `rule` in `domestic`'s CSS:

    * Let `selector` be the result of applying `domestic`'s extensions to
      `rule`'s selector.

    * Let `selector-lists` be an empty set of selector lists.

    * For each module `foreign` in `downstream`:

      * Let `extended-selector` be the result of applying
        `new-extensions[foreign]` to `selector`.

        > `new-extensions[foreign]` is guaranteed to be populated at this point
        > because `extended` is traversed in reverse topological order, which
        > means that `foreign`'s own extensions will already have been resolved
        > by the time we start working on modules upstream of it.

      * Add `selector` to `selector-lists`.

    * Set `new-selectors[rule]` to a selector that matches the union of all
      elements matched by selectors in `selector-lists`. This selector must obey
      [the specificity laws of extend][] relative to the selectors from which it
      was generated. For the purposes of the first law of extend, "the original
      extendee" is considered only to refer to selectors that appear in
      `domestic`'s CSS, *not* selectors that were added by other modules'
      extensions.

      > Implementations are expected to trim redundant selectors from
      > `selector-lists` as much as possible. For the purposes of the first law
      > of extend, "the original extendee" is *only* the selectors in `rule`'s
      > selector. The new complex selectors in `selector` generated from
      > `domestic`'s extensions don't count as "original", and may be optimized
      > away.

    * For every extension `extension` whose extender appears in `rule`'s
      selector:

      * For every complex selector `complex` in `new-selectors[rule]`:

        * Add a copy of `extension` with its extender replaced by `complex` to
          `new-extensions[domestic]`.

  [the specificity laws of extend]: ../spec/at-rules/extend.md#specificity

* Let `css` be an empty CSS tree.

* Define a recursive procedure, "traversing", which takes a module `domestic`:

  * If `domestic` has already been traversed, do nothing.

  * Otherwise, traverse every module `@use`d or `@forward`ed by `domestic`, in
    the order their `@use` or `@forward` rules appear in `domestic`'s source.

    > Because this traverses modules depth-first, it emits CSS in reverse
    > topological order.

  * Let `initial-imports` be the longest initial subsequence of top-level
    statements in `domestic`'s CSS that contains only comments and `@import`
    rules *and* that ends with an `@import` rule.

  * Insert a copy of `initial-imports` in `css` after the last `@import` rule, or
    at the beginning of `css` if it doesn't contain any `@import` rules.

  * For each top-level statement `statement` in `domestic`'s CSS tree after
    `initial-imports`:

    * If `statement` is an `@import` rule, insert a copy of `statement` in `css`
      after the last `@import` rule, or at the beginning of `css` if it doesn't
      contain any `@import` rules.

    * Otherwise, add a copy of `statement` to the end of `css`, with any style
      rules' selectors replaced with the corresponding selectors in
      `new-selectors`.

* Return `css`.

    ### Resolving a `file:` URL

This algorithm is intended to replace [the existing algorithm][] for resolving a
`file:` URL to add support for `@import`-only files, and to allow imports that
include a literal `.css` extension. This algorithm takes a URL, `url`, whose
scheme must be `file` and returns either another URL that's guaranteed to point
to a file on disk or null.

This algorithm takes a URL, `url`, whose scheme must be `file` and returns
either another URL that's guaranteed to point to a file on disk or null.

* If `url` ends in `.scss`, `.sass`, or `.css`:

  * If this algorithm is being run for an `@import`:

    * Let `suffix` be the trailing `.scss`, `.sass`, `.css` in `url`, and
      `prefix` the portion of `url` before `suffix`.

    * If the result of [resolving `prefix` + `".import"` + `suffix` for
      partials][resolving for partials] is not null, return it.

  * Otherwise, return the result of [resolving `url` for partials][resolving for
    partials].

  > `@import`s whose URLs explicitly end in `.css` will have been treated as
  > plain CSS `@import`s before this algorithm even runs, so `url` will only end
  > in `.css` for `@use` rules.

* If this algorithm is being run for an `@import`:

  * Let `sass` be the result of [resolving `url` + `".import.sass"` for
    partials][resolving for partials].

  * Let `scss` be the result of [resolving `url` + `".import.scss"` for
    partials][resolving for partials].

  * If neither `sass` nor `scss` are null, throw an error.

  * Otherwise, if exactly one of `sass` and `scss` is null, return the other
    one.

  * Otherwise, if the result of [resolving `url` + `".import.css"` for
    partials][resolving for partials] is not null, return it.

* Otherwise, let `sass` be the result of [resolving `url` + `".sass"` for
  partials][resolving for partials].

* Let `scss` be the result of [resolving `url` + `".scss"` for
  partials][resolving for partials].

* If neither `sass` nor `scss` are null, throw an error.

* Otherwise, if exactly one of `sass` and `scss` is null, return the other
  one.

* Otherwise, return the result of [resolving `url` + `".css"` for
  partials][resolving for partials]. .

> This allows a library to define two parallel entrypoints, one
> (`_file.import.scss`) that's visible to `@import` and one (`_file.scss`)
> that's visible to `@use`. This will allow it to maintain
> backwards-compatibility even as it switches to supporting a `@use`-based API.
>
> The major design question here is whether the file for `@use` or `@import`
> should be the special case. The main benefit to `_file.use.scss` would be that
> users don't need to use a version of Sass that supports `@use` to get the
> import-only stylesheet, but in practice it's likely that most library authors
> will want to use `@use` or other new Sass features internally anyway.
>
> On the other hand, there are several benefits to `_file.import.scss`:
>
> * It makes the recommended entrypoint is the more obvious one.
>
> * It inherently limits the lifetime of language support for the extra
>   entrypoint: once imports are removed from the language, import-only files
>   will naturally die as well.
>

> When resolving for `@use`, this algorithm treats a `.css` file is treated with
> the same priority as a `.scss` and `.sass` file.
>
> The only reason a `.css` file was ever treated as secondary was that CSS
> imports were added later on, and backwards-compatibility needed to be
> maintained for `@import`. `@use` allows us to make CSS more consistent with
> the other extensions, at a very low risk of migration friction.

## Semantics

### Compilation Process

First, let's look at the large-scale process that occurs when compiling a Sass
[entrypoint](#entrypoint) with the canonical URL `url` to CSS.

* Let `module` be the result of [loading](#loading-modules) `url` with the empty
  configuration.

  > Note that this transitively loads any referenced modules, producing a
  > [module graph](#module-graph).

* Let `css` be the result of [resolving extensions](#resolving-extensions) for
  `module`.

* Convert `css` to a CSS string. This is the result of the compilation.

### Executing Files

Many of the details of executing a [source file](#source-file) are out of scope
for this specification. However, certain constructs have relevant new semantics
that are covered below. This procedure should be understood as modifying and
expanding upon the existing execution process rather than being a comprehensive
replacement.

Given a source file `file`, a [configuration](#configuration) `config`, and an
[import context](#import-context) `import`:

* If this file isn't being executed for a `@forward` rule:

  * For every variable name `name` in `config`:

    * If neither `file` nor any source file for a module transitively forwarded
      or imported by `file` contains a variable declaration named `name` with a
      `!default` flag at the root of the stylesheet, throw an error.

      > Although forwarded modules are not fully loaded at this point, it's
      > still possible to statically determine where those modules are located
      > and whether they contain variables with default declarations.
      >
      > Implementations may choose to verify this lazily, after `file` has been
      > executed.

* Let `module` be an empty module with the same URL as `file`.

* Let `uses` be an empty map from `@use` rules to [modules](#module).

* When a `@use` rule `rule` is encountered:

  * If `rule` has a namespace that's the same as another `@use` rule's namespace
    in `file`, throw an error.

  * Let `rule-config` be the empty configuration.

  * If `rule` has a `WithClause`:

    * For each `KeywordArgument` `argument` in this clause:

      * Let `value` be the result of evaluating `argument`'s expression.

        > If the expression refers to a module that's used below `rule`, that's
        > an error.

      * Add a variable to `rule-config` with the same name as `argument`'s identifier
        and with `value` as its value.

  * Let `module` be the result of [loading](#loading-modules) the module with
    `rule`'s URL and `rule-config`.

  * Associate `rule` with `module` in `uses`.

* When a `@forward` rule `rule` is encountered:

  * If `rule` has an `AsClause` with identifier `prefix`:

    * Let `rule-config` be an empty configuration.

    * For each variable `variable` in `config`:

      * If `variable`'s name begins with `prefix`:

        * Let `suffix` be the portion of `variable`'s name after `prefix`.

        * Add a variable to `rule-config` with the name `suffix` and with the
          same value as `variable`.

  * Otherwise, let `rule-config` be `config`.

  * Let `forwarded` be the result of [loading](#loading-modules) the module with
    `rule`'s URL and `rule-config`.

  * [Forward `forwarded`](#forwarding-modules) with `file` through `module`.

* When an `@import` rule `rule` is encountered:

  * Let `file` be the result of [loading][loading an import] `rule`'s URL.

  * If `file` is `null`, throw an error.

  * [Import `file`](#importing-files) into `import` and `module`.
  
* When an `@extend` rule is encountered, add its extension to `module`.

  > Note that this adds the extension to the module being evaluated, not the
  > module in which the `@extend` lexically appears. This means that `@extend`s
  > are effectively dynamically scoped, not lexically scoped. This design allows
  > extensions generated by mixins to affect rules also generated by mixins.

* When a style rule or a plain CSS at-rule is encountered:

  * Let `css` be the result of executing the rule as normal.

  * Remove any [complex selectors][] containing a placeholder selector that
    begins with `-` or `_` from `css`.

  * Remove any style rules that now have no selector from `css`.

  * Append `css` to `module`'s CSS.

* When a variable declaration `declaration` is encountered:

  > This algorithm is intended to replace [the existing algorithm][old
  > assigning-to-a-variable] for assigning to a variable.

  [old assigning-to-a-variable]: ../spec/variables.md#executing-a-variable-declaration

  * Let `name` be `declaration`'s [`Variable`](#member-references)'s name.

  * If `name` is a [namespaced identifier](#member-references) *and*
    `declaration` has a `!global` flag, throw an error.

  * Otherwise, if `declaration` is outside of any block of statements, *or*
    `declaration` has a `!global` flag, *or* `name` is a namespaced identifier:

    * Let `resolved` be the result of [resolving a variable named
      `name`](#resolving-members) using `file`, `uses`, and `import`.

    * If `declaration` has a `!default` flag, `resolved` isn't null, *and*
     `resolved`'s value isn't `null`, do nothing.

    * Otherwise, if `resolved` is a variable in another module:

      * Evaluate `declaration`'s value and set `resolved`'s value to the result.

    * Otherwise:

      * If `declaration` is outside of any block of statements, it has a
        `!default` flag, *and* `config` contains a variable named `name` whose
        value is not `null`:

        * Let `value` be the value of `config`'s variable named `name`.

      * Otherwise, let `value` be the result of evaluating `declaration`'s
        value.

      * If `name` *doesn't* begin with `-` or `_`, add a variable with name
        `name` and value `value` to `module`.

        > This overrides the previous definition, if one exists.

      * Add a variable with name `name` and value `value` to `import`.

        > This also overrides the previous definition.

  * Otherwise, if `declaration` is within one or more blocks associated with
    `@if`, `@each`, `@for`, and/or `@while` rules *and no other blocks*:

    * Let `resolved` be the result of [resolving a variable named
      `name`](#resolving-members) using `file`, `uses`, and `import`.

    * If `resolved` is not `null`:

      * If `declaration` has a `!default` flag and `resolved`'s value isn't
        `null`, do nothing.

      * Otherwise, let `value` be the result of evaluating `declaration`'s
        value.

      * If `name` *doesn't* begin with `-` or `_`, add a variable with name
        `name` and value `value` to `module`.

        > This overrides the previous definition, if one exists.

      * Add a variable with name `name` and value `value` to `import`.

        > This also overrides the previous definition.

  * Otherwise, if no block containing `declaration` has a [scope][] with a
    variable named `name`, set the innermost block's scope's variable `name` to
    `value`.

  * Otherwise, let `scope` be the scope of the innermost block such that `scope`
    already has a variable named `name`. Set `scope`'s variable `name` to `value`.

  [scope]: ../spec/spec.md#scope

* When a top-level mixin or function declaration `declaration` is encountered:

  > Mixins and functions defined within rules are never part of a module's API.

  * If `declaration`'s name *doesn't* begin with `-` or `_`, add `declaration` to
    `module`.

    > This overrides the previous definition, if one exists.

  * Add `declaration` to `import`.

    > This happens regardless of whether or not it begins with `-` or `_`.

* When a member use `member` is encountered:

  * Let `scope` be the [scope][] of the innermost block containing `member` such
    that `scope` has a member of `member`'s name and type, or `null` if no such
    scope exists.

  * If `scope` is not `null`, return `scope`'s member of `member`'s name and
    type.

  * Otherwise, return the result of [resolving `member`](#resolving-members)
    using `file`, `uses`, and `import`. If this returns null, throw an error.

* Finally:

  * For each variable declaration `variable` with a `!global` flag in `file`,
    whether or not it was evaluated:

    * If `variable`'s name *doesn't* begin with `-` or `_` and `variable` is not
      yet in `module`, set `variable` to `null` in `module`.

      > This isn't necessary for implementations that follow the most recent
      > [variables spec][] and don't allow `!global` assignments to variables
      > that don't yet exist. However, at time of writing, all existing
      > implementations are in the process of deprecating the old `!global`
      > behavior, which allowed `!global` declarations to create new
      > variables.
      >
      > Setting all `!global` variables to `null` if they weren't otherwise set
      > guarantees [static analysis][] by ensuring that the set of variables a
      > module exposes doesn't depend on how it was executed.

  * Return `module`. Its functions, mixins, and CSS are now immutable.

  [variables spec]: ../spec/variables.md
  [static analysis]: #low-level

> Note that members that begin with `-` or `_` (which Sass considers equivalent)
> are considered private. Private members are not added to the module's member
> set, but they are visible from within the module itself. This follows Python's
> and Dart's privacy models, and bears some similarity to CSS's use of leading
> hyphens to indicate experimental vendor features.
>
> For backwards-compatibility, privacy does not apply across `@import` boundaries.

> This proposal follows Python and diverges from Dart in that `@use` imports
> modules with a namespace by default. There are two reasons for this. First, it
> seems to be the case that language ecosystems with similar module systems
> either namespace all imports by convention, or namespace almost none. Because
> Sass is not object-oriented and doesn't have the built-in namespacing that
> classes provide many other languages, its APIs tend to be much broader at the
> top level and thus at higher risk for name conflict. Namespacing by default
> tilts the balance towards always namespacing, which mitigates this risk.
>
> Second, a default namespace scheme drastically reduces the potential for
> inconsistency in namespace choice. If the namespace is left entirely up to the
> user, different people may choose to namespace `strings.scss` as `strings`,
> `string`, `str`, or `strs`. This taxes the reusability of code and knowledge,
> and mitigating it is a benefit.

> ```scss
> // This has the default namespace "susy".
> @use "susy";
>
> // This has the explicit namespace "bbn".
> @use "bourbon" as bbn;
>
> // This has no namespace.
> @use "compass" as *;
>

### Resolving Members

The main function of the module system is to control how [member](#member) names
are resolved across files—that is, to find the definition corresponding to a
given name. Given a source file `file`, a map `uses` from `@use` rules to the
[modules](#module) loaded by those rules, a member to resolve named `name` of
type `type`, and an [import context](#import-context) `import`:

> Note that this procedure only covers non-local member resolution. Local
> members that are scoped to individual blocks are covered in [Executing
> Files](#executing-files).

* If `name` is a [namespaced identifier](#member-references)
  `namespace.raw-name`:

  * Let `use` be the `@use` rule in `uses` whose namespace is `namespace`. If
    there is no such rule, throw an error.

    > Unlike other identifiers in Sass, module namespaces *do not* treat `-` and
    > `_` as equivalent. This equivalence only exists for
    > backwards-compatibility, and since modules are an entirely new construct
    > it's not considered necessary.

  * If `use` hasn't been evaluated yet, throw an error.

  * Otherwise, let `module` be the module in `uses` associated with `use`.

  * Return the member of `module` with type `type` and name `raw-name`. If there
    is no such member, throw an error.

* If `type` is not "variable" and `file` contains a top-level definition of a
  member of type `type` named `name`:

  > A top-level variable definition will set the module's variable value rather
  > than defining a new variable local to this module.

  * If `import` contains a member `member` of type `type` named `name`, return
    it.

    > This includes member definitions within the current module.

  * Otherwise, return `null`.

    > This ensures that it's an error to refer to a local member before it's
    > defined, even if a member with the same name is defined in a loaded
    > module. It also allows us to guarantee that the referent to a member
    > doesn't change due to definitions later in the file.

* Let `member-uses` be the set of modules in `uses` whose `@use` rules are
  global, and which contain members of type `type` named `name`.

* Otherwise, if `import` contains a member `member` of type `type` named `name`:

  * If `member-uses` is not empty, throw an error.

  * Otherwise, return `member`.

* Otherwise, if `member-uses` contains more than one module, throw an error.

  > This ensures that, if a new version of a library produces a conflicting
  > name, it causes an immediate error.

* Otherwise, if `member-uses` contains a single module, return the member of
  type `type` named `name` in that module.

* Otherwise, if the implementation defines a global member `member` of type
  `type` named `name`, return that member.

  > This includes the global functions and mixins defined as part of the Sass
  > spec, and may also include other members defined through the
  > implementation's host language API.

* Otherwise, return null.

### Forwarding Modules

The [`@forward`](#forward-1) rule forwards another [module](#module)'s public
API as though it were part of the current module's.

> Note that `@forward` *does not* make any APIs available to the current module;
> that is purely the domain of `@use`. It *does* include the forwarded module's
> CSS tree, but it's not visible to `@extend` without also using the module.

This algorithm takes an immutable module `forwarded`, a [source
file](#source-file) `file`, and a mutable module `module`.
  
* For every member `member` in `forwarded`:

  * Let `name` be `member`'s name.
  
  * If `rule` has an `AsClause` `as`, prepend `as`'s identifier to `name` (after
    the `$` if `member` is a variable).

  * If there's a member defined at the top level of `file` named `name` with the
    same type as `member`, do nothing.

    > Giving local definitions precedence ensures that a module continues to
    > expose the same API if a forwarded module changes to include a conflicting
    > member.

  * Otherwise, if `rule` has a `show` clause that doesn't include `name`
    (including `$` for variables), do nothing.

    > It's not possible to show/hide a mixin without showing/hiding the
    > equivalent function, or to do the reverse. This is unlikely to be a
    > problem in practice, though, and adding support for it isn't worth the
    > extra syntactic complexity it would require.

  * Otherwise, if `rule` has a `hide` clause that does include `name` (including
    `$` for variables), do nothing.

  * Otherwise, if another `@forward` rule's module has a member named `name`
    with the same type as `member`, throw an error.

    > Failing here ensures that, in the absence of an obvious member that takes
    > precedence, conflicts are detected as soon as possible.

  * Otherwise, add `member` to `module` with the name `name`.

    > It's possible for the same member to be added to a given module multiple
    > times if it's forwarded with different prefixes. All of these names refer
    > to the same logical member, so for example if a variable gets set that
    > change will appear for all of its names.
    >
    > It's also possible for a module's members to have multiple prefixes added,
    > if they're forwarded with prefixes multiple times.

> This forwards all members by default to reduce the churn and potential for
> errors when a new member gets added to a forwarded module. It's likely that
> most libraries will already break up their definitions into many smaller
> modules which will all be forwarded, which makes the API definition explicit
> enough without requiring additional explicitness here.
>
> ```scss
> // _susy.scss would forward its component files so users would see its full
> // API with a single @use, but the definitions don't have to live in a single
> // file.
>
> @forward "susy/grids";
> @forward "susy/box-sizing";
> @forward "susy/content";
>
> // You can show or hide members that are only meant to be used within the
> // library. You could also choose not to forward this module at all and only
> // use it from internal modules.
> @forward "susy/settings" hide susy-defaults;
> ```

### Importing Files

For a substantial amount of time, `@use` will coexist with the old `@import`
rule in order to ease the burden of migration. This means that we need to define
how the two rules interact.

This algorithm takes a [source file](#source-file) `file`, an [import
context](#import-context) `import`, and a mutable [module](#module) `module`.

* If `file` is currently being executed, throw an error.

* Let `imported` be the result of [executing](#executing-files) `file` with the
  empty configuration and `import` as its import context, except that if the
  `@import` rule is nested within at-rules and/or style rules, that context is
  preserved when executing `file`.

  > Note that this execution can mutate `import`.

* Let `css` be the result of [resolving extensions](#resolving-extensions) for
  `imported`, except that if the `@import` rule is nested within at-rules and/or
  style rules, that context is added to CSS that comes from modules loaded by
  `imported`.

  > This creates an entirely separate CSS tree with an entirely separate
  > `@extend` context than normal `@use`s of these modules. This means their CSS
  > may be duplicated, and they may be extended differently.

* Add `css` to `module`'s CSS.

* Add `imported`'s [extensions](#extension) to `module`.

* If the `@import` rule is nested within at-rules and/or style rules, add each
  member in `imported` to the local [scope][].

* Otherwise, add each member in `imported` to `import` and `module`.

  > Members defined directly in `imported` will have already been added to
  > `import` in the course of its execution. This only adds members that
  > `imported` forwards.
  >
  > Members from `imported` override members of the same name and type that have
  > already been added to `import` and `module`.

> When a stylesheet contains only `@import`s without any `@use`s, the `@import`s
> are intended to work exactly as they did in previous Sass versions. Any
> difference should be considered a bug in this specification.

> This definition allows files that include `@use` to be imported. Doing so
> includes those modules' CSS as well as any members they define or forward.
> This makes it possible for users to continue using `@import` even when their
> dependencies switch to `@use`, which conversely makes it safer for libraries
> to switch to `@use`.
>
> It also allows files that use `@import` to be used as modules. Doing so treats
> them as though all CSS and members were included in the module itself.

## Built-In Modules

The new module system provides an opportunity to bring more locality and
organization to the set of built-in functions that comprise Sass's core library.
These functions currently reside in the same global namespace as everything
else, which makes it difficult to add new functions without risking conflict
with either user code or future CSS functions (which has [happened in
practice][issue 631]).


We'll move all current built-in functions to built-in [modules](#module), except
for those functions that are intentionally compatible with plain CSS functions.
These modules are identified by URLs that begin with "sass:". This scheme was
chosen to avoid conflicting with plausible filenames while still being
relatively concise.

The existing built-in functions `adjust-hue()`, `lighten()`, `darken()`,
`saturate()`, `desaturate()`, `opacify()`, `fade-in()`, `transparentize()`, and
`fade-out()` will not be added to any module. Instead, functions with the same
names will be added to the `sass:color` module that will always emit errors
suggesting that the user use `color.adjust()` instead.

> These functions are shorthands for `color.adjust()`. However, `color.adjust()`
> generally produces less useful results than `color.scale()`, so having
> shorthands for it tends to mislead users. The automated module migrator will
> migrate uses of these functions to literal `color.adjust()` calls, and the
> documentation will encourage users to use `color.scale()` instead.
>
> Once the module system is firmly in place, we may add new `color.lighten()`
> *et al* functions that are shorthands for `color.scale()` instead.

The `grayscale()`, `invert()`, `alpha()`, and `opacity()` functions in
`sass:color` will only accept color arguments, unlike their global counterparts.

> These global functions need to accept non-color arguments for compatibility
> with CSS functions of the same names. Since module namespacing eliminates the
> ambiguity between built-in Sass functions and plain CSS functions, this
> compatibility is no longer necessary.

### New Functions

The module system brings with it the need for additional introspection
abilities. To that end, several new built-in functions will be defined in
the `sass:meta` module.

#### `module-variables()`

The `module-variables()` function takes a `$module` parameter, which must be a
string that matches the namespace of a `@use` rule in the current source file.
It returns a map from variable names (with all `_`s converted to `-`s) defined
in the module loaded by that rule (as quoted strings, without `$`) to the
current values of those variables.

> Variable names are normalized to use hyphens so that callers can safely work
> with underscore-separated libraries using this function the same as they can
> when referring to variables directly.

Note that (like the existing `*-defined()` functions), this function's behavior
depends on the lexical context in which it's invoked.

#### `module-functions()`

The `module-functions()` function takes a `$module` parameter, which must be a
string that matches the namespace of a `@use` rule in the current source file.
It returns a map from function names (with all `_`s converted to `-`s) defined
in the module loaded by that rule (as quoted strings) to function values that
can be used to invoke those functions.

> Function names are normalized to use hyphens so that callers can safely work
> with underscore-separated libraries using this function the same as they can
> when calling functions directly.

Note that (like the existing `*-defined()` functions), this function's behavior
depends on the lexical context in which it's invoked.

#### `load-css()`

The `load-css()` mixin takes a `$url` parameter, which must be a string, and an
optional `$with` parameter, which must be either a map with string keys or null.
When this mixin is invoked:

* Let `config` be a configuration whose variable names and values are given by
  `$with` if `$with` is passed and non-null, or the empty configuration
  otherwise.

* Let `module` be the result of [loading](#loading-modules) `$url` with
  `config`. The URL is loaded as though it appeared in a `@use` rule in the
  stylesheet where `@include load-css()` was written.

  > This means that `load-css()` doesn't see import-only stylesheets, and that
  > URLs are resolved relative to the file that contains the `@include` call
  > even if it's invoked from another mixin.

* Let `css` be the result of [resolving extensions](#resolving-extensions) for
  `module`.

  > This means that, if a module loaded by `load-css()` shares some dependencies
  > with the entrypoint module, those dependencies' CSS will be included twice.

* Treat `css` as though it were the contents of the mixin.

> The `load-css()` function is primarily intended to satisfy the use-cases that
> are currently handled using nested imports. It clearly also goes some way
> towards dynamic imports, which is listed as a non-goal. It's considered
> acceptable because it doesn't dynamically alter the names available to
> modules.

> There are a couple important things to note here. First, *every time*
> `load-css()` is included, its module's CSS is emitted, which means that the
> CSS may be emitted multiple times. This behavior makes sense in context, and
> is unlikely to surprise anyone, but it's good to note nonetheless as an
> exception to the import-once goal.
>
> Second

### New Features For Existing Functions

Several functions will get additional features in the new module-system world.

The `global-variable-exists()`, `function-exists()`, `mixin-exists()`, and
`get-function()` functions will all take an optional `$module` parameter. This
parameter must be a string or `null`, and it must match the namespace of a
`@use` rule in the current module. If it's not `null`, the function returns
whether the module loaded by that rule has a member with the given name and
type, or in the case of `get-function()`, it returns the function with the given
name from that module.

If the `$module` parameter is `null`, or when the `variable-exists()` function
is called, these functions will look for members defined so far in the current
module or import context, members of any modules loaded by global `@use` rules,
or global built-in definitions. If multiple global `@use` rules define a member
of the given name and type, these functions will throw an error.

> We considered having the functions return `true` in the case of a conflicting
> member, but eventually decided that such a case was likely unexpected and
> throwing an error would help the user notice more quickly.

The `get-function()` function will throw an error if the `$module` parameter is
non-`null` *and* the `$css` parameter is truthy.

## Timeline

Our target dates for implementing and launching the module system are as
follows:

* **1 March 2019**: Support for `@use` without configuration or core libraries
  landed in a Dart Sass branch, with specs in a sass-spec branch.

* **1 August 2019**: Full support for this spec landed in a Dart Sass branch, with
  specs in a sass-spec branch.

* **1 September 2019**: Alpha release for Dart Sass module system support.

* **1 October 2019**: Stable release of Dart Sass module system support.

Although it would be desirable to have both Dart Sass and LibSass launch support
for the module system simultaneously, this hasn't proven to be logistically
feasible. As of August 2019, LibSass has not yet begun implementing the module
system, and there are no concrete plans for it to do so.

The Sass team wants to allow for a large amount of time when `@use` and
`@import` can coexist, to help the ecosystem smoothly migrate to the new system.
However, doing away with `@import` entirely is the ultimate goal for simplicity,
performance, and CSS compatibility. As such, we plan to gradually turn down
support for `@import` on the following timeline:

* ~~One year after both implementations launch support for the module system
  *or* two years after Dart Sass launches support for the module system,
  whichever comes sooner (**1 October 2021** at latest): Deprecate `@import` as
  well as global core library function calls that could be made through
  modules.~~

* ~~One year after this deprecation goes into effect (**1 October 2022** at
  latest): Drop support for `@import` and most global functions entirely. This
  will involve a major version release for all implementations.~~

~~This means that there will be at least two full years when `@import` and `@use`
are both usable at once, and likely closer to three years in practice.~~

**July 2022**: In light of the fact that LibSass was deprecated before ever
adding support for the new module system, the timeline for deprecating and
removing `@import` has been pushed back. We now intend to wait until 80% of
users are using Dart Sass (measured by npm downloads) before deprecating
`@import`, and wait at least a year after that and likely more before removing
it entirely.

**March 2023**: As week of Mar 06 to Mar 12, the npm downloads of the sass and
node-sass packages are 11,700,729 and 2,831,234 respectively, meaning we have
reached 80.5% adoption rate for Dart Sass, which is above the target for making
the deprecation `@import` current.

# Modules

## Definitions

### Member

A *member* is a Sass construct that's defined either by the user or the
implementation and is identified by a Sass identifier. This currently includes
[variables](variables.md), mixins, and functions (but *not* placeholder
selectors). All members have definitions associated with them, whose specific
structure depends on the type of the given member.

Two members are considered identical if they have the same name, type, source
location, and were defined in or forwarded from the same original module.

> Each member type has its own namespace in Sass, so for example the mixin
> `name` doesn't conflict with the function `name` or the variable `$name`.

### CSS Tree

A *CSS tree* is an abstract CSS syntax tree. It has multiple top-level CSS
statements like at-rules or style rules. The ordering of these statements is
significant. A CSS tree cannot contain any Sass-specific constructs, with the
notable exception of placeholder selectors.

An *empty CSS tree* contains no statements.

### Configuration

A *configuration* is a map from [variable](variables.md) names to SassScript
values and an opaque ID. An *empty configuration* contains no entries.

A new *configuration* ID is unique unless otherwise specified.

### Module

A *module* is a collection of various properties:

* A set of [members](#member) that contains at most one member of any given type
  and name.

  > For example, a module may not have two variables named `$name`, although it
  > may contain a function and a mixin with the same name or two functions with
  > different names.

  > The names (and mixin and function signatures) of a module's members are
  > static, and can be determined without executing its associated source file.
  > This means that any possible module for a given source file has the same
  > member names and signatures regardless of the context in which those modules
  > are loaded.

* A set of [extensions][].

  [extensions]: at-rules/extend.md#extension

* A [CSS tree](#css-tree).

  > This tree is empty for [built-in modules](#built-in-module) and user-defined
  > modules that only define variables, functions, and mixins without including
  > any plain CSS rules.

* A list of references to other modules, known as the module's *dependencies*,
  in the same order as their [`@use` rules][] and/or [`@forward` rules][] appear
  in the module's source file. If a dependency is referred to from multiple
  rules, its order is determined by the first such rule.

  > Modules without a source file never have dependencies. Each dependency is
  > guaranteed to correspond to at least one `@use` rule or `@forward` rule.

  [`@use` rules]: at-rules/use.md
  [`@forward` rules]: at-rules/forward.md

* An optional [source file][].

  > Note that [built-in modules](#built-in-module) *do not* have source files
  > associated with them.

  [source file]: syntax.md#source-file

* An absolute URL, known as the module's *canonical URL*. If the module has a
  source file, this must be the same as the source file's canonical URL.

Once a user-defined module has been returned by [Executing a File][], it is
immutable except for its variable values. [Built-in modules](#built-in-module)
are always immutable.

[Executing a File]: spec.md#executing-a-file

### Module Graph

The set of [modules](#module) loaded in the course of processing a stylesheet
can be construed as a [directed acyclic graph][] where the vertices are modules
and the edges are [`@use` rules][] and/or [`@forward` rules][]. We call this the
*module graph*.


The module graph is not allowed to contain cycles because they make it
impossible to guarantee that all dependencies of a module are available before
that module is loaded. Although the names and APIs of a dependency's members can
be determined without [executing][] it, Sass allows code to be executed during
load, so those members may not behave correctly when invoked before the
dependency is executed.

[executing]: spec.md#executing-a-file

### Import Context

An *import context* is a set of [members](#member) that contains at most one
member of any given type and name. It's always mutable.

> Import contexts serve as glue between the old [`@import` rule][] and the
> module system. It serves as a shared global namespace for stylesheets loaded
> using `@import` rules, while also preventing global names from leaking into or
> out of stylesheets loaded using [`@use` rules][] and/or [`@forward` rules][].

[`@import` rule]: at-rules/import.md

### Built-In Module

A *built-in module* is a module defined either by the Sass specification or by
the host environment of the Sass compilation in some implementation-specific
way. Modules defined by the Sass specification all have the scheme `sass:` and
are all described in [the `built-in-modules` directory][]. Modules defined
outside the Sass compilation may not use the scheme `sass:`.

[the `built-in-modules` directory]: built-in-modules

Built-in modules may contain mixins, variables, or functions, but they may never
contain CSS or extensions.

### Importer

An *importer* is a function that takes a string that may be either a relative or
absolute URL and returns three values: a string (the text of a stylesheet), a
syntax ("indented", "scss", or "css"), and an absolute URL (that
stylesheet's canonical URL). It may also return null to indicate that the
importer doesn't recognize the URL in question or cannot find a corresponding
stylesheet. If the URL is recognized but invalid, it should throw an error
rather than returning null. What constitutes "recognized" or "invalid" is left
up to the importer.

The details of an importer's behavior is typically defined by the end user in an
implementation-specific way. However, all importers must adhere to the following
contract:

* When the URL returned by an importer is passed back to that importer, it must
  return the same result.

* The importer must return the same result for all URLs that refer to the same
  file, although what specifically constitutes "the same file" is left up to the
  importer.

> Importers are represented as a single function in the spec to simplify the
> writing of algorithms, but implementations are encouraged to have users
> instead define two separate functions: a `canonicalize()` function that
> converts an input string into a canonical URL, and a `load()` function that
> loads the contents of a canonical URL. This allows implementations to avoid
> the overhead of reloading the same file over and over.

### Filesystem Importer

A *filesystem importer* is an [importer](#importer) with an associated absolute
`file:` URL named `base`. When a filesystem importer is invoked with a string
named `string`:

* Let `url` be the result of [parsing `string` as a URL][parsing a URL] with
  `base` as the base URL. If this returns a failure, throw that failure.

* If `url`'s scheme is not `file`, return null.

* Let `resolved` be the result of [resolving `url`](#resolving-a-file-url).

* If `resolved` is null, return null.

* Let `text` be the contents of the file at `resolved`.

* Let `syntax` be:
  * "scss" if `url` ends in `.scss`.
  * "indented" if `url` ends in `.sass`.
  * "css" if `url` ends in `.css`.

  > The algorithm for [resolving a `file:` URL](#resolving-a-file-url)
  > guarantees that `url` will have one of these extensions.

* Return `text`, `syntax`, and `resolved`.

### Global Importer List

The *global importer list* is a list of importers that's set for the entire
duration of a Sass compilation.

### Basename

The *basename* of a URL is the final component of that URL's path.

### Dirname

The *dirname* of a URL is the prefix of that URL up to, but not including, the
beginning of its [basename](#basename).

## Syntax

The module system defines the following syntax for referring to names from other
modules:

<x><pre>
**PublicIdentifier**     ::= [\<ident-token>][] that doesn't begin with '-' or '_'
**NamespacedIdentifier** ::= [\<ident-token>][] | [\<ident-token>][] '.' PublicIdentifier
</pre></x>

No whitespace is allowed before or after the `'.'` in `NamespacedIdentifier`.

## Procedures

### Loading a Module

This algorithm takes a string `argument` and [configuration](#configuration)
`config` and returns a [module](#module):

* If `argument` is a valid URL with scheme `sass`:

  * If `config` is not empty, throw an error.

  * If a [built-in module](#built-in-module) exists with the exact given URL,
    return it.

  * Otherwise, throw an error.

* Let `file` be the result of [loading the file](#loading-a-source-file) at
  `argument`.

* If `file` is null, throw an error.

* If `file` has already been [executed] by the [Loading a Module] procedure:

  [executed]: spec.md#executing-a-file

  * If `config` is not empty and has a different ID than the configuration that
    was passed the first time `file` was executed by the [Loading a Module]
    procedure, throw an error.

    > An ID may be reused in a new configuration via [`@forward ... with`].

  * Otherwise, return the module that execution produced.

  [Loading a Module]: #loading-a-module

[`@forward ... with`]: at-rules/forward.md#semantics

* If `file` is currently being executed, throw an error.

  > This disallows circular `@use`s, which ensures that modules can't be used
  > until they're fully initialized.

* Otherwise, return the result of [executing][] `file` with `config` and a new
  [import context](#import-context).

  > For simplicity, the spec creates an import context for every module.
  > Implementations are encouraged to avoid eagerly allocating resources for
  > imports, though, to make use-cases only involving `@use` more efficient.

### Loading a Source File

This algorithm takes a string, `argument`, and returns either a [source file] or
null.

* If `argument` is a relative URL:

  * Let `resolved` be the result of [parsing `argument` as a URL][parsing a URL]
    with the [current source file]'s canonical URL as the base URL.

  * Let `result` be the result of passing `resolved` to the current source
    file's [importer](#importer).

  * If `result` is not null:

    * Let `ast` be the result of [parsing] `result`'s text as `result`'s syntax.

    * Return a source file with `ast` as its abstract syntax tree, `result`'s
      URL as its canonical URL, and the current source file's importer as its
      importer.

* For each `importer` in the [global importer list](#global-importer-list):

  * Let `result` be the result of passing `argument` to `importer`.

  * If `result` is not null:

    * Let `ast` be the result of [parsing] `result`'s text as `result`'s syntax.

    * Return a source file with `ast` as its abstract syntax tree, `result`'s
      URL as its canonical URL, and `importer` as its importer.

* Return null.

[current source file]: spec.md#current-source-file
[parsing]: syntax.md#parsing-text

### Resolving a `file:` URL

This algorithm takes a URL, `url`, whose scheme must be `file` and returns
either another URL that's guaranteed to point to a file on disk or null.

* Let `resolved` be the result of [resolving `url` for extensions][resolving for
  extensions].

* If `resolved` is not null, return it. Otherwise:

* Let `index` be `url` + `"/index"`

* Return the result of [resolving `index` for extensions][resolving for
  extensions].

[resolving for extensions]: #resolving-a-file-url-for-extensions

### Resolving a `file:` URL for Extensions

This algorithm takes a URL, `url`, whose scheme must be `file` and returns
either another URL that's guaranteed to point to a file on disk or null.

* If `url` ends in `.scss`, `.sass`, or `.css`:

  * If this algorithm is being run for an `@import`:

    * Let `suffix` be the trailing `.scss`, `.sass`, `.css` in `url`, and
      `prefix` the portion of `url` before `suffix`.

    * If the result of [resolving `prefix` + `".import"` + `suffix` for
      partials][resolving for partials] is not null, return it.

  * Otherwise, return the result of [resolving `url` for partials][resolving for
    partials].

  > `@import`s whose URLs explicitly end in `.css` will have been treated as
  > plain CSS `@import`s before this algorithm even runs, so `url` will only end
  > in `.css` for `@use` rules.

* If this algorithm is being run for an `@import`:

  * Let `sass` be the result of [resolving `url` + `".import.sass"` for
    partials][resolving for partials].

  * Let `scss` be the result of [resolving `url` + `".import.scss"` for
    partials][resolving for partials].

  * If neither `sass` nor `scss` are null, throw an error.

  * Otherwise, if exactly one of `sass` and `scss` is null, return the other
    one.

  * Otherwise, if the result of [resolving `url` + `".import.css"` for
    partials][resolving for partials] is not null, return it.

* Let `sass` be the result of [resolving `url` + `".sass"` for
  partials][resolving for partials].

* Let `scss` be the result of [resolving `url` + `".scss"` for
  partials][resolving for partials].

* If neither `sass` nor `scss` are null, throw an error.

* Otherwise, if exactly one of `sass` and `scss` is null, return the other
  one.

* Otherwise, return the result of [resolving `url` + `".css"` for
  partials][resolving for partials]. .

[resolving for partials]: #resolving-a-file-url-for-partials

### Resolving a `file:` URL for Partials

This algorithm takes a URL, `url`, whose scheme must be `file` and returns
either another URL that's guaranteed to point to a file on disk or null.

* If `url`'s [basename](#basename) begins with `"_"`:

  * If a file exists on disk at `url`, return `url`.

    Otherwise return null.

* Let `partial` be [`dirname(url)`](#dirname) + `"_"` +
  [`basename(url)`](#basename).

* If a file exists on disk at both `url` and `partial`, throw an error.

* If a file exists on disk at `url`, return `url`.

* If a file exists on disk at `partial`, return `partial`.

* Return null.

### Resolving a Member

This algorithm takes a [member](#member) name `name` and a member type `type`,
and returns a member of type `type` or null.

* If `name` is a plain `Identifier` or a `Variable` that's not a
  `NamespacedVariable`:

  * Let `scope` be the [current scope] or its innermost parent such that `scope`
    has a member of type `type` named `name`, or null if no such scope exists.

  * If `scope` is not null, return `scope`'s value of type `type` named `name`.

  [current scope]: spec.md#scope

* If `name` is a [`NamespacedIdentifier`](#syntax) of the form
  `namespace.raw-name` or a [`Variable`][] of the form `namespace.$raw-name`:

  [`Variable`]: variables.md#syntax

  * Let `use` be the [`@use` rule][] in the [current source file][] whose
    namespace is `namespace`. If there isn't exactly one such rule, throw an
    error.

    > Unlike other identifiers in Sass, module namespaces *do not* treat `-` and
    > `_` as equivalent.

  * If `use` hasn't been executed yet, throw an error.

  * Otherwise, let `module` be [`use`'s module][].

  * Return the member of `module` with type `type` and name `raw-name`. If there
    is no such member, throw an error.

  [`@use` rule]: at-rules/use.md
  [`use`'s module]: at-rules/use.md#a-use-rules-module

* If `type` is not "variable" and the current source file contains a top-level
  definition of a member of type `type` named `name`:

  > Local function and mixin definitions shadow those from global `@use` rules,
  > so that an upstream package adding a member is less likely to break its
  > downstream dependencies. We exclude variables from this because a top-level
  > variable definition will set the module's variable value rather than
  > defining a new variable local to this module.

  * If the [current import context][] contains a member `member` of type `type`
    named `name`, return it.

    > This includes member definitions within the current module.

  * Otherwise, return null.

    > It's an error to refer to a local member before it's defined, even if a
    > member with the same name is defined in a loaded module. The referent to a
    > member is guaranteed not to change due to definitions later in the file.

  [current import context]: spec.md#current-import-context

* Let `members` be the set of [unique][] members of type `type` named `name` in
  [modules of][] the global `@use` rules.

  [unique]: #member
  [modules of]: at-rules/use.md#a-use-rules-module

* If the current import context contains a member `member` of type `type` named
  `name`:

  * If `members` is not empty, throw an error.

  * Otherwise, return `member`.

* Otherwise, if `members` contains more than one member, throw an error.

  > This ensures that, if a new version of a library produces a conflicting
  > name, it causes an immediate error.

* Otherwise, if `modules` contains a single module, return the member of
  type `type` named `name` in that module.

* Otherwise, if the implementation defines a global member `member` of type
  `type` named `name`, return that member.

  > This includes the global functions and mixins defined as part of the Sass
  > spec, and may also include other members defined through the
  > implementation's host language API.

* Otherwise, return null.

## Draft 2.2

* For consistency, all functions that have cases for `-0` also have cases for
  `0`. This includes `sqrt()`, `sin()`, `tan()`, `asin()`, and `atan()`.

* `hypot()`'s arguments are named `$numbers` for consistency.

## Draft 2.1

* atan2()'s arguments must all have compatible units, or all be unitless.

## Draft 2

* Variables
  * `$e` and `$pi` have 1 more digit of precision after the decimal.
  * Variables from built-in modules cannot be modified.

* `Infinity` and `-Infinity`:
  * If any argument to `hypot()` equals `-Infinity`, it returns `Infinity`.
  * The `$exponent == Infinity` case in `pow()` also holds for
    `$exponent == -Infinity`.
  * The `$number == Infinity` cases in `cos()`, `sin()`, and `tan()` also hold
    for `$number == -Infinity`.

* Input units:
  * `clamp()`'s arguments must all have compatible units, or all be unitless.
  * `log()` does not error unless the input has units, and instead delegates
    edge cases to division.

* Output units:
  * For `acos()`, `asin()`, and `atan()`, and `atan2()`, all of their outputs
    are numbers in `deg`.

## Draft 1.1

* Added Background and Summary sections.

## Draft 1

* Initial draft.

# More Math Functions: Draft 2.2

*[(Issue)](https://github.com/sass/sass/issues/851)*

This proposal adds the following members to the built-in `sass:math` module.

## Table of Contents

* [Background](#background)
* [Summary](#summary)
* [Semantics](#semantics)
  * [Built-in Module Variables](#built-in-module-variables)
* [Variables](#variables)
  * [`$e`](#e)
  * [`$pi`](#pi)
* [Functions](#functions)
  * [`clamp()`](#clamp)
  * [`hypot()`](#hypot)
  * [Exponentiation](#exponentiation)
    * [`log()`](#log)
    * [`pow()`](#pow)
    * [`sqrt()`](#sqrt)
  * [Trigonometry](#trigonometry)
    * [`cos()`](#cos)
    * [`sin()`](#sin)
    * [`tan()`](#tan)
    * [`acos()`](#acos)
    * [`asin()`](#asin)
    * [`atan()`](#atan)
    * [`atan2()`](#atan2)
      * [Edge cases](#edge-cases)

## Background

> This section is non-normative.

Sass recently implemented a module system with a new built-in `sass:math`
module. The demand for built-in math functions can now be fulfilled safely by
implementing them inside this module. None of these new functions will be made
available on the global namespace.

## Summary

> This section is non-normative.

This proposal defines Sassified versions of all the mathematical functions in
the [CSS Values and Units 4 Draft][], as well as logarithms and the constants
`e` and `pi`. Each function is basically equivalent to its mathematical form,
with stricter unit handling. Proper unit handling prevents these functions from
creating meaningless units. For instance, consider `(1px)^(1/3)`—what does
the unit `px^(1/3)` mean?

[CSS Values and Units 4 Draft]: https://drafts.csswg.org/css-values-4/#math

To avoid issues like this, the exponential functions—`log()`, `pow()`, `sqrt()`—
accept only a unitless number as input, and output a unitless number.

The trig functions—`cos()`, `sin()`, `tan()`—accept a SassScript number with a
unit, as long as that unit is an [angle][] type. If the input is a unitless
number, it is treated as though it were in `rad`. These functions output a
unitless number.

[angle]: https://drafts.csswg.org/css-values-4/#angles

The inverse trig functions—`acos()`, `asin()`, `atan()`—accept a unitless number
and output a SassScript number in `deg`. `atan2()` is similar, but it accepts
two unitless numbers.

`clamp()` accepts three SassScript numbers with [compatible][] units: the
minimum value, preferred value, and maximum value. This function "clamps" the
preferred value in between the minimum and maximum values, while preserving
their units appropriately. For example, `clamp(1in, 15cm, 12in)` outputs `15cm`,
whereas `clamp(1in, 1cm, 12in)` outputs `1in`.

[compatible]: ../spec/built-in-modules/math.md#compatible

`hypot()` accepts `n` SassScript numbers with compatible units, and outputs the
length of the `n`-dimensional vector that has components equal to each of the
inputs. Since the inputs' units may all be different, the output takes the unit
of the first input.

## Semantics

### Built-in Module Variables

Variables defined in built-in modules are not modifiable. As such, this proposal
modifies the semantics of [Executing a Variable Declaration][] within the
[Variables spec][] to read as follows:

[Executing a Variable Declaration]: ../spec/variables.md#executing-a-variable-declaration
[Variables spec]: ../spec/variables.md

To execute a `VariableDeclaration` `declaration`:

* Let `value` be the result of evaluating `declaration`'s `Expression`.

* Let `name` be `declaration`'s `Variable`.

* **Let `resolved` be the result of [resolving a variable][] named `name`.**

[resolving a variable]: ../spec/modules.md#resolving-a-member

* If `name` is a `NamespacedVariable` and `declaration` has a `!global` flag,
  throw an error.

* **Otherwise, if `resolved` is a variable from a built-in module, throw an
  error.**

* Otherwise, if `declaration` is outside of any block of statements, *or*
  `declaration` has a `!global` flag, *or* `name` is a `NamespacedVariable`:

  * ~~Let `resolved` be the result of [resolving a variable][] named `name` using
    `file`, `uses`, and `import`.~~

  (...)

* Otherwise, if `declaration` is within one or more blocks associated with
  `@if`, `@each`, `@for`, and/or `@while` rules *and no other blocks*:

  * ~~Let `resolved` be the result of [resolving a variable][] named `name`.~~

  (...)

* ~~Otherwise, if no block containing `declaration` has a [scope][] with a
  variable named `name`, set the innermost block's scope's variable `name` to
  `value`.~~

[scope]: ../spec/spec.md#scope

* **Otherwise, if `resolved` is null, get the innermost block containing
  `declaration` and set its scope's variable `name` to `value`.**

* ~~Otherwise, let `scope` be the scope of the innermost block such that `scope`
  already has a variable named `name`.~~

* **Otherwise, set `resolved`'s value to `value`.**

## Variables

### `$e`

Equal to the value of the mathematical constant `e` with a precision of 10
digits after the decimal point: `2.7182818285`.

### `$pi`

Equal to the value of the mathematical constant `pi` with a precision of 10
digits after the decimal point: `3.1415926536`.

## Functions

### `clamp()`

```
clamp($min, $number, $max)
```

* If the units of `$min`, `$number`, and `$max` are not compatible with each
  other, throw an error.
* If some arguments have units and some do not, throw an error.
* If `$min >= $max`, return `$min`.
* If `$number <= $min`, return `$min`.
* If `$number >= $max`, return `$max`.
* Return `$number`.

### `hypot()`

```
hypot($numbers...)
```

* If all numbers are not compatible with each other, throw an error.
* If some numbers have units and some do not, throw an error.
* If all numbers are unitless, the return value is unitless.
* Otherwise, the return value takes the unit of the leftmost number.
* If any number equals `Infinity` or `-Infinity`, return `Infinity`.
* Return the square root of the sum of the squares of each number.

### Exponentiation

#### `log()`

```
log($number, $base: null)
```

* If `$number` has units, throw an error.
* If `$base` is null:
  * If `$number < 0`, return `NaN` as a unitless number.
  * If `$number == 0`, return `-Infinity` as a unitless number.
  * If `$number == Infinity`, return `Infinity` as a unitless number.
  * Return the [natural log][] of `$number`, as a unitless number.
* Otherwise, return the natural log of `$number` divided by the natural log of
  `$base`, as a unitless number.

[natural log]: https://en.wikipedia.org/wiki/Natural_logarithm

#### `pow()`

```
pow($base, $exponent)
```

* If `$base` or `$exponent` has units, throw an error.

* If `$exponent == 0`, return `1` as a unitless number.

* Otherwise, if `$exponent == Infinity` or `$exponent == -Infinity`:
  * If `$base == 1` or `$base == -1`, return `NaN` as a unitless number.
  * If `$base < -1` or `$base > 1` and if `$exponent > 0`, *or* if `$base > -1`
    and `$base < 1` and `$exponent < 0`, return `Infinity` as a
    unitless number.
  * Return `0` as a unitless number.

* Otherwise:
  * If `$base < 0` and `$exponent` is not an integer, return `NaN` as a unitless
    number.

  * If `$base == 0` and `$exponent < 0`, or if `$base == Infinity` and
    `$exponent > 0`, return `Infinity` as a unitless number.

  * If `$base == -0` and `$exponent < 0`, or if `$base == -Infinity` and
    `$exponent > 0`:
    * If `$exponent` is an odd integer, return `-Infinity` as a unitless number.
    * Return `Infinity` as a unitless number.

  * If `$base == 0` and `$exponent > 0`, or if `$base == Infinity` and
    `$exponent < 0`, return `0` as a unitless number.

  * If `$base == -0` and `$exponent > 0`, or if `$base == -Infinity` and
    `$exponent < 0`:
    * If `$exponent` is an odd integer, return `-0` as a unitless number.
    * Return `0` as a unitless number.

  * Return `$base` raised to the power of `$exponent`, as a unitless number.

#### `sqrt()`

```
sqrt($number)
```

* If `$number` has units, throw an error.
* If `$number < 0`, return `NaN` as a unitless number.
* If `$number == -0`, return `-0` as a unitless number.
* If `$number == 0`, return `0` as a unitless number.
* If `$number == Infinity`, return `Infinity` as a unitless number.
* Return the square root of `$number`, as a unitless number.

### Trigonometry

#### `cos()`

```
cos($number)
```

* If `$number` has units but is not an angle, throw an error.
* If `$number` is unitless, treat it as though its unit were `rad`.
* If `$number == Infinity` or `$number == -Infinity`, return `NaN` as a unitless
  number.
* Return the [cosine][] of `$number`, as a unitless number.

[cosine]: https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions

#### `sin()`

```
sin($number)
```

* If `$number` has units but is not an angle, throw an error.
* If `$number` is unitless, treat it as though its unit were `rad`.
* If `$number == Infinity` or `$number == -Infinity`, return `NaN` as a unitless
  number.
* If `$number == -0`, return `-0` as a unitless number.
* If `$number == 0`, return `0` as a unitless number.
* Return the [sine][] of `$number`, as a unitless number.

[sine]: https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions

#### `tan()`

```
tan($number)
```

* If `$number` has units but is not an angle, throw an error.
* If `$number` is unitless, treat it as though its unit were `rad`.
* If `$number == Infinity` or `$number == -Infinity`, return `NaN` as a unitless
  number.
* If `$number == -0`, return `-0` as a unitless number.
* If `$number == 0`, return `0` as a unitless number.
* If `$number` is equivalent to `90deg +/- 360deg * n`, where `n` is any
  integer, return `Infinity` as a unitless number.
* If `$number` is equivalent to `-90deg +/- 360deg * n`, where `n` is any
  integer, return `-Infinity` as a unitless number.
* Return the [tangent][] of `$number`, as a unitless number.

[tangent]: https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions

#### `acos()`

```
acos($number)
```

* If `$number` has units, throw an error.
* If `$number < -1` or `$number > 1`, return `NaN` as a number in `deg`.
* If `$number == 1`, return `0deg`.
* Return the [arccosine][] of `$number`, as a number in `deg`.

[arccosine]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties

#### `asin()`

```
asin($number)
```

* If `$number` has units, throw an error.
* If `$number < -1` or `$number > 1`, return `NaN` as a number in `deg`.
* If `$number == -0`, return `-0deg`.
* If `$number == 0`, return `0deg`.
* Return the [arcsine][] of `$number`, as a number in `deg`.

[arcsine]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties

#### `atan()`

```
atan($number)
```

* If `$number` has units, throw an error.
* If `$number == -0`, return `-0deg`.
* If `$number == 0`, return `0deg`.
* If `$number == -Infinity`, return `-90deg`.
* If `$number == Infinity`, return `90deg`.
* Return the [arctangent][] of `$number`, as a number in `deg`.

[arctangent]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties

#### `atan2()`

> `atan2($y, $x)` is distinct from `atan($y / $x)` because it preserves the
> quadrant of the point in question. For example, `atan2(1, -1)` corresponds to
> the point `(-1, 1)` and returns `135deg`. In contrast, `atan(1 / -1)` and
> `atan(-1 / 1)` resolve first to `atan(-1)`, so both return `-45deg`.

```
atan2($y, $x)
```

* If `$y` and `$x` are not compatible, throw an error.
* If `$y` has units and `$x` does not, or vice-versa, throw an error.
* If the inputs match one of the following edge cases, return the provided
  number. Otherwise, return the [2-argument arctangent][] of `$y` and `$x`, as a
  number in `deg`.

[2-argument arctangent]: https://en.wikipedia.org/wiki/Atan2

##### Edge cases

<table>
  <thead>
    <tr>
      <td colspan="2"></td>
      <th colspan="6" style="text-align: center">X</th>
    </tr>
    <tr>
      <td colspan="2"></td>
      <th>−Infinity</th>
      <th>-finite</th>
      <th>-0</th>
      <th>0</th>
      <th>finite</th>
      <th>Infinity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="6">Y</th>
      <th>−Infinity</th>
      <td>-135deg</td>
      <td>-90deg</td>
      <td>-90deg</td>
      <td>-90deg</td>
      <td>-90deg</td>
      <td>-45deg</td>
    </tr>
    <tr>
      <th>-finite</th>
      <td>-180deg</td>
      <td></td>
      <td>-90deg</td>
      <td>-90deg</td>
      <td></td>
      <td>-0deg</td>
    </tr>
    <tr>
      <th>-0</th>
      <td>-180deg</td>
      <td>-180deg</td>
      <td>-180deg</td>
      <td>-0deg</td>
      <td>-0deg</td>
      <td>-0deg</td>
    </tr>
    <tr>
      <th>0</th>
      <td>180deg</td>
      <td>180deg</td>
      <td>180deg</td>
      <td>0deg</td>
      <td>0deg</td>
      <td>0deg</td>
    </tr>
    <tr>
      <th>finite</th>
      <td>180deg</td>
      <td></td>
      <td>90deg</td>
      <td>90deg</td>
      <td></td>
      <td>0deg</td>
    </tr>
    <tr>
      <th>Infinity</th>
      <td>135deg</td>
      <td>90deg</td>
      <td>90deg</td>
      <td>90deg</td>
      <td>90deg</td>
      <td>45deg</td>
    </tr>
  </tbody>
</table>
    
**N**

## Draft 1.1

* Changes `map.deep-remove()` to support passing a single key.

# Nested Map Functions: Draft 1.0

This proposal updates the built-in `sass:map` module to better support merging,
setting, and getting elements from nested maps.

## Background

> This section is non-normative.

Variables have always been a key feature of the Sass language. But these days,
design systems and component libraries form the basis of most CSS projects --
with well organized *design tokens* as the foundation. While Individual token
variables can be quite useful, the ability to group tokens into structured and
meaningful relationships is essential for creating resilient systems.

There are many ways to group tokens. The popular [Style Dictionary] recommends a
deep nesting of *category*, *type*, *item*, *sub-item*, and *state*. Other
taxonomies also include concepts like *theme*, or even *operating system*. Most
of the existing tools rely on YAML or JSON objects to achieve that nested
structure, at the expense of other important information. YAML and JSON are not
design languages, and do not understand fundamental CSS concepts like color or
length.

With Sass, we don't have to make that tradeoff. We already support nestable map
structures, and the ability to interact with them programmatically -- adding or
removing properties, accessing values, and looping over entire structures. But
current built-in functions don't provide much support for managing nested maps.
Projects often build their own tooling.

The results are inconsistent across projects, difficult to re-use, and often
slow to compile. Implementing core support for nested maps could change all that.

## Summary

> This section is non-normative.

This proposal updates existing map functions with better support for inspection
and manipulation of nested maps, as well as adding new functions to the
`sass:map` module. For existing legacy functions (`get()`, `has-key()`,
`merge()`) the new behavior will be accessible through both the `sass:map`
module, and global legacy names (`map-get()`, `map-has-key()`, `map-merge()`).
New functions (`set()`, `deep-merge()`) will only be available inside the
`sass:map` module.

The `has-key()` and `get()` functions both accept multiple `$keys...`:

```scss
@use 'sass:map';

$nav: (
  'bg': 'gray',
  'color': (
    'hover': (
      'search': yellow,
      'home': red,
      'filter': blue,
    ),
  ),
);

$has-search: map.has-key($nav, 'color', 'hover', 'search'); // true
$search-hover: map.get($nav, 'color', 'hover', 'search'); // yellow
```

The `merge()` function now accepts multiple `$keys...` between the two maps
being merged. The keys form a path to the nested location in `$map1` where
`$map2` should be merged. For example, we update the hover colors in our `$nav`
map above:

```scss
@use 'sass:map';

$new-hover: (
  'search': green,
  'logo': orange,
);

$nav: map.merge($nav, 'color', 'hover', $new-hover);

// $nav: (
//   'bg': 'gray',
//   'color': (
//     'hover': (
//       'search': green,
//       'home': red,
//       'filter': blue,
//       'logo': orange,
//     ),
//   ),
// );
```

This proposal also adds a `set()` function to `sass:map`, with a similar syntax,
returning a map with any nested key set to a specific value. To achieve the
same output as our merge example, we can set each key individually:

```scss
@use 'sass:map';

$nav: map.set($nav, 'color', 'hover', 'search', green);
$nav: map.set($nav, 'color', 'hover', 'logo', orange);
```

And finally, a new `deep-merge()` function in the `sass:map` module allows
merging two or more nested maps. This works much like the existing `merge()`
function, but when both maps have a nested-map at the same key, those nested
maps are also merged:

```scss
@use 'sass:map';

$nav: (
  'bg': 'gray',
  'color': (
    'hover': (
      'search': yellow,
      'home': red,
      'filter': blue,
    ),
  ),
);

$update: (
  'bg': white,
  'color': (
    'hover': (
      'search': green,
      'logo': orange,
    )
  )
);

$nav: map.deep-merge($nav, $update);

// $nav: (
//   'bg': white,
//   'color': (
//     'hover': (
//       'search': green,
//       'home': red,
//       'filter': blue,
//       'logo': orange,
//     ),
//   ),
// );
```

## Functions

All new and modified functions are part of the `sass:map` built-in module.

### `get()`

This proposal updates the signature and behavior of the existing `get()`
function.

> This also affects the global `map-get()` function.

```
get($map, $key, $keys...)
```

> Intuitively, `get($map, $key1, $key2, $key3)` is equivalent to
> `get(get(get($map, $key1), $key2), $key3)` with the exception that if any
> intermediate value isn't a map or doesn't have the given key the whole
> function returns `null` rather than throwing an error.

* If `$map` is not a map, throw an error.

* Let `child` be `$map`.

* Let `keys` be a list containing `$key` followed by the elements of `$keys`.

* For each element `key` in `keys`:

  * If `child` is not a map, return `null`.

  * If `child` contains a key that's `==` to `key`, set `child` to the value
    associated with that key. Otherwise, return `null`.

* Return `child`.

### `has-key()`

This proposal updates the signature and behavior of the existing `get()`
function.

> This also affects the global `map-has-key()` function.

```
has-key($map, $key, $keys...)
```

> Intuitively, `has-key($map, $key1, $key2, $key3)` is equivalent to
> `has-key(get(get($map, $key1), $key2), $key3)` with the exception that if any
> intermediate value isn't a map or doesn't have the given key the whole
> function returns `false` rather than throwing an error.

* If `$map` is not a map, throw an error.

* Let `child` be `$map`.

* Let `keys` be a list containing `$key` followed by the elements of `$keys`.

* For each element `key` in `keys`:

  * If `child` is not a map, return `false`.

  * If `child` contains a key that's `==` to `key`, set `child` to the value
    associated with that key. Otherwise, return `false`.

* Return `true`.

### `set()`

> Note: For consistency with other functions whose multi-key overloads were
> added after their single-key versions, `set()` is defined to have a separate
> single-key overload and multi-key overload.

* ```
  set($map, $key, $value)
  ```

  > Intuitively, `set($map, $key, $value)` is equivalent to `merge($map, ($key: $value))`.

  * If `$map` is not a map, throw an error.

  * Let `map` be a copy of `$map`.

  * If `map` has a key that's `==` to `$key`, remove it and its associated value.

  * Associate `$key` with `$value` in `map`.

  * Return `map`.

* ```
  set($map, $args...)
  ```

  > Intuitively, `set($map, $key1, $key2, $value)` is equivalent to `set($map,
  > $key1, set(get($map, $key1), $key2, $value))` with the exception that if any
  > intermediate value isn't set or isn't a map it's replaced with a map.

  * If `$map` is not a map, throw an error.

  * If `$args` has fewer than three elements, throw an error.

  * Let `map` be a copy of `$map`.

  * Let `key` be the first element of `$args`.

  * Let `remaining` be the slice of all elements in `$args` except the first.

  * If `map` has a key that's `==` to `key`:

    * Remove that key and its associated value from `map`.

    * Let `child` be the value that was associated with that key if that value
      is a map, or an empty map otherwise.

  * Otherwise:

    * Let `child` be an empty map.

  * Let `new-child` be the result of calling `set()` with `child` as the first
    argument and the elements of `remaining` as the remaining arguments.

  * Associate `key` with `new-child` in `map`.

  * Return `map`.

### `merge()`

This proposal adds a new overload to the existing `merge()` function with lower
priority than the existing signature.

> This means that the new overload is only called if the existing signature
> doesn't match.

This proposal adds a new overload to the existing `merge()` function:

```
merge($map1, $args...)
```

> Intuitively, `map.merge($map1, $keys..., $map2)` is equivalent to
> `map.set($map1, $keys..., map.merge(map.get($map1, $keys...), $map2))`.

* If `$args` is empty, return `$map1`.

* Let `map2` be the last element of `$args`.

* If either `$map1` or `map2` is not a map, throw an error.

* If `$args` has fewer than two elements, throw an error.

* Let `keys` be a slice of all elements in `$args` except the last.

* Let `sub` be the result of calling `get()` with `$map1` as the first
  argument and the contents of `keys` as the remaining arguments.

* If `sub` is a map:

  * Let `sub-merged` be the result of calling `merge()` with `sub` and `map2` as
    arguments.

* Otherwise:

  * Let `sub-merged` be `map2`.

* Return the result of calling `set()` with `$map1` as the first argument,
  followed by the contents of `keys` as separate arguments, followed by
  `sub-merged`.

### `deep-merge()`

```
deep-merge($map1, $map2)
```

* If `$map1` and `$map2` are not maps, throw an error.

* Let `merged` be a copy of `$map1`.

* For each `new-key`/`new-value` pair in `$map2`:

  * If `merged` has a key `old-key` that's `==` to `new-key`:

    * Let `old-value` be the value associated with `old-key` in `merged`.

    * Remove `old-key`/`old-value` from `merged`.

    * If both `old-value` and `new-value` are maps, set `new-value` to the
      result of calling `deep-merge()` with `old-value` and `new-value`.

  * Associate `new-key` with `new-value` in `merged`.

* Return `merged`.

### `deep-remove()`

```
deep-remove($map, $key, $keys...)
```

> Note: This is explicitly *not* an override of `remove()`, because `remove()`
> already accepts a variable number of arguments as a way of removing multiple
> keys from the same map. This proposal adds a new function rather than adjust
> the existing behavior to avoid backwards-compatibility pain.

> Intuitively, `map.deep-remove($map, $keys..., $last-key)` is equivalent to
> `map.set($map, $keys..., map.remove(map.get($map, $keys...), $last-key)`.

* If `$map` isn't a map, throw an error.

* If `$keys` has no elements:

  * Return the result of calling `map.remove($map, $key)`.

* Otherwise:

  * Let `last-key` be the last element of `$keys`.

  * Let `other-keys` be a list containing `$key` followed by all elements in
    `$keys` except the last.

  * Let `sub` be the result of calling `get()` with `$map` as the first
    argument and the contents of `other-keys` as the remaining arguments.

  * If `sub` is a map with a key `old-key` that's `==` to `last-key`:

    * Set `sub` to a copy of itself.

    * Remove `old-key` and its associated value from `sub`.

    * Return the result of calling `set()` with `$map` as the first argument,
      followed by the contents of `other-keys` as separate arguments, followed
      by `sub`.

  * Otherwise:

    * Return `$map`.

## Draft 3.1

* Add `name` and `otherName` parameters to `SassNumber.convert*()` and
  `SassNumber.coerce*()` methods so that they can provide additional debugging
  information.

## Draft 3

* Add a `toString()` method to `Value`.

## Draft 2.1

* Add `name` parameters to `Value.sassIndexToListIndex()` and
  `SassString.sassIndexToStringIndex()`.

## Draft 2

* Add `name` parameters to `assert*()` methods so that they can provide
  additional debugging information.

* `Value.assertMap()` now returns an empty `SassMap` when called on an empty list.

* Renamed `Value.asMap()` to `Value.tryMap()` to help distinguish it from the
  `asList` getter.

* `Value.hashCode()` now returns a number to match the behavior expected by the
  `immutable` package.

* Removed `SassFunction.signature` since this couldn't be implemented for
  built-in functions.

* Added `SassMap.tryMap()` to override `Value.tryMap()` and declare statically
  that it never returns `null`.

* Make `Value` explicitly implement the `immutable` package's `ValueType`
  interface.

## Draft 1

* Initial draft.

## Draft 3

* Use `"indented"` instead of `"sass"` to refer to the indented syntax.

## Draft 2.1

* Minor adjustments to link up with updates in the main spec.

## Draft 2

* Rename `CompileResult.includedUrls` to `CompileResult.loadedUrls`. This is
  better differentiated from the concept of `@include`ing mixins, and better
  aligned with the concept of loading modules.

## Draft 1

* Initial draft.

## Draft 1.1

* Add a section on canonicalizing relative URLs to the summary.

## Draft 1

* Initial draft.

## Types

### `SassNumber`

The JS API representation of a Sass number.

#### `internal`

The [private `internal` field] refers to [a Sass number].

[private `internal` field]: index.d.ts.md#internal
[a Sass number]: ../../types/number.md

#### Constructor

Creates a Sass number:

* If the second argument is undefined:

  * Set `internal` to a Sass number with a value of `value`.

* Otherwise, if the second argument is a string:

  * Set `internal` to a Sass number with a value of `value` and that string as
    its single numerator unit.

* Otherwise,

  * Let `options` be the second argument.

  * Set `internal` to a Sass number with a value of `value`,
    `options.numeratorUnits` as its numerator units (if passed), and
    `options.denominatorUnits` as its denominator units (if passed).

#### `value`

Returns [`internal`]'s value.

[`internal`]: #internal

```ts
get value(): number;
```

#### `isInt`

Whether [`internal`] is an [integer].

[integer]: ../../types/number.md#integer

```ts
get isInt(): boolean;
```

#### `asInt`

Returns [`internal`]'s [integer value] if it has one, or null if it doesn't.

[integer value]: ../../types/number.md#integer

```ts
get asInt(): number | null;
```

#### `numeratorUnits`

Returns [`internal`]'s numerator units.

```ts
get numeratorUnits(): List<string>;
```

#### `denominatorUnits`

Returns [`internal`]'s denominator units.

```ts
get denominatorUnits(): List<string>;
```

#### `hasUnits`

Whether [`internal`] has numerator or denominator units.

```ts
get hasUnits(): boolean;
```

#### `assertInt`

Returns [`internal`]'s [integer value] if it has one, and throws an error if it
doesn't.

> The `name` parameter may be used for error reporting.

```ts
assertInt(name?: string): number;
```

#### `assertInRange`

Asserts that [`internal`]'s value is within the specified range:

* If `internal`'s value is greater than `min` and less than `max`, return it.
* Otherwise, if `internal`'s value [fuzzy equals] `min`, return `min`.
* Otherwise, if `internal`'s value fuzzy equals `max`, return `max`.
* Otherwise, throw an error.

[fuzzy equals]: ../../types/number.md#fuzzy-equality

> The `name` parameter may be used for error reporting.

```ts
assertInRange(min: number, max: number, name?: string): number;
```

#### `assertUnitless`

Returns `this` if [`internal`] has no numerator or denominator units, and throws
an error otherwise.

> The `name` parameter may be used for error reporting.

```ts
assertNoUnits(name?: string): SassNumber;
```

#### `assertUnit`

Asserts the type of [`internal`]'s unit:

* If `internal` has any denominator units, or if `unit` is not `internal`'s
  only numerator unit, throw an error.
* Otherwise, return `this`.

> The `name` parameter may be used for error reporting.

```ts
assertUnit(unit: string, name?: string): SassNumber;
```

#### `hasUnit`

Returns whether `unit` is [`internal`]'s only numerator unit and `internal` has no
denominator units.

```ts
hasUnit(unit: string): boolean;
```

#### `compatibleWithUnit`

Whether `internal` is [compatible] with `unit`.

[compatible]: ../../types/number.md#compatible-units

```ts
compatibleWithUnit(unit: string): boolean;
```

* If `converter` is not [compatible] with `internal`, throw an error.

* Set `converter` to the result of [simplifying] `converter`.

  [simplifying]: ../../types/number.md#simplifying-a-number

* Return a new `SassNumber` with `internal` set to the result of the
  SassScript expression `converter + internal`.

> The `name` parameter may be used for error reporting.

```ts
convert(
  newNumerators: string[] | List<string>,
  newDenominators: string[] | List<string>,
  name?: string
): SassNumber;
```

#### `convertToMatch`

Return the result of `convert(other.numeratorUnits, other.denominatorUnits)`.

> The `name` and `otherName` parameters may be used for error reporting.

```ts
convertToMatch(
  other: SassNumber,
  name?: string,
  otherName?: string
): SassNumber;
```

#### `convertValue`

Return the result of `convert(newNumerators, newDenominators).value`.

> The `name` parameter may be used for error reporting.

```ts
convertValue(
  newNumerators: string[] | List<string>,
  newDenominators: string[] | List<string>,
  name?: string
): number;
```

#### `convertValueToMatch`

Returns the result of `convertToMatch(other).value`.

> The `name` and `otherName` parameters may be used for error reporting.

```ts
convertValueToMatch(
  other: SassNumber,
  name?: string,
  otherName?: string
): number;
```

#### `coerce`

Creates a new copy of `this` with its units converted to those represented
by `newNumerators` and `newDenominators`:

* If `newNumerators` and `newDenominators` are both empty, return the result of
  `new SassNumber(this.value)`.
  
* Return the result of `convert(newNumerators, newDenominators)`.

> The `name` parameter may be used for error reporting.

```ts
coerce(
  newNumerators: string[] | List<string>,
  newDenominators: string[] | List<string>,
  name?: string
): SassNumber;
```

#### `coerceToMatch`

Return the result of `coerce(other.numeratorUnits, other.denominatorUnits)`.

> The `name` and `otherName` parameters may be used for error reporting.

```ts
coerceToMatch(
  other: SassNumber,
  name?: string,
  otherName?: string
): SassNumber;
```

#### `coerce`

Return the result of `coerce(newNumerators, newDenominators).value`.

> The `name` parameter may be used for error reporting.

```ts
coerceValue(
  newNumerators: string[] | List<string>,
  newDenominators: string[] | List<string>,
  name?: string
): number;
```

#### `coerceValueToMatch`

Returns the value of the result of `coerceToMatch(other)`.

> The `name` and `otherName` parameters may be used for error reporting.

```ts
coerceValueToMatch(
  other: SassNumber,
  name?: string,
  otherName?: string
): number;
```

```ts
} // SassNumber
```

### Double

A *double* is a floating-point datum representable in a format with

* `b = 2`
* `p = 53`
* `emax = 1023`

as defined by [IEEE 754 2019], §3.2-3.3.

> This is the standard 64-bit floating point representation, defined as
> `binary64` in [IEEE 754 2019], §3.6.

### Degenerate Number

The doubles `Infinity`, `-Infinity`, and `NaN` are *degenerate*.

A number is *degenerate* if its value is degenerate.

### Conversion Factors

Certain units have conversion factors that define how they can be converted to
and used with other related units. A conversion factor is itself a Sass number.
The following conversion factors are defined:

* `px`: 1 `px`
* `cm`: 96/2.54 `px`
* `mm`: 96/25.4 `px`
* `Q`: 96/101.6 `px`
* `in`: 96 `px`
* `pc`: 16 `px`
* `pt`: 4/3 `px`

* `deg`: 1 `deg`
* `grad`: 9/10 `deg`
* `rad`: 180/π `deg`
* `turn` 360 `deg`

* `ms`: 1 `ms`
* `s`: 1000 `ms`

* `Hz`: 1 `Hz`
* `kHz`: 1000 `Hz`

* `dppx`: 1 `dppx`
* `dpi`: 1/96 `dppx`
* `dpcm`: 2.54/96 `dppx`

### Set of Units

A *set of units* is structure with:

* A list of strings called "numerator units".
* A list of strings called "denominator units".

When not otherwise specified, a single unit refers to numerator units containing
only that unit and empty denominator units.

### Compatible Units

Two numbers' units are said to be *compatible* if both:

* There's a one-to-one mapping between those numbers' numerator units such that
  each pair of units is either identical, or both units have a [conversion
  factor] and those two conversion factors have the same unit. This mapping is
  known as the numbers' *numerator compatibility map*.

* There's the same type of mapping between those numbers' denominator units.
  This mapping is known as the numbers' *denominator compatibility map*.

[conversion factor]: #conversion-factors

Similarly, a number is *compatible with* a [set of units] if it's compatible
with a number that has those units; and two sets of units are *compatible* if a
number with one set is compatible with a number with the other.

[set of units]: #set-of-units

### Possibly-Compatible Units

Two units are *possibly-compatible* with one another if and only if either both
units appear in the same row in the following table, or either unit doesn't
appear in the following table. Units are matched case-insensitively to determine
possible-compatibility.

> This is intended to be kept in sync with the unit types in [CSS Values and
> Units]. Note that all unknown units are possibly-compatible with all other
> units; this preserves forwards-compatibility with new units that are
> introduced in browsers over time.

| Type           | Units                                                                                        |
| -------------- | -------------------------------------------------------------------------------------------- |
| `<length>`     | `em`, `ex`, `ch`, `rem`, `vw`, `vh`, `vmin`, `vmax`, `cm`, `mm`, `Q`, `in`, `pt`, `pc`, `px` |
| `<angle>`      | `deg`, `grad`, `rad`, `turn`                                                                 |
| `<time>`       | `s`, `ms`                                                                                    |
| `<frequency>`  | `Hz`, `kHz`                                                                                  |
| `<resolution>` | `dpi`, `dpcm`, `dppx`                                                                        |

### Possibly-Compatible Numbers

Two numbers are *possibly-compatible* if there's a one-to-one mapping between
their numerator units, and another such mapping between their denominator units,
such that each pair of units is [possibly-compatible](#possibly-compatible-units).
Two numbers are *definitely-incompatible* if they are not possibly-compatible.

> The definition of definite-incompatibility captures the notion of numbers that
> can be determined at build time to be incompatible with one another, and thus
> erroneous to ever combine. This allows us to eagerly produce error messages
> for certain incompatible units rather than serving them to the browser where
> they're much more difficult to debug.
>
> For example, `1px` is possibly-compatible with `2em`. Unitless numbers are
> only possibly-compatible with other unitless numbers. In theory, this
> definition defines a notion of possible-compatiblity for numbers with more
> complex units, but in practice these numbers are already flagged as errors
> prior to any possible-compatibility checks.

### Known Units

A number has *known units* unless it has unit `%`.

> This is relevant for calculations, because in plain CSS they resolve
> percentages before doing their operations. This means that any non-linear
> operations involving percentages must be passed through to plain CSS rather
> than handled by Sass.
>
> More complex units involving percentages are allowed because any non-linear
> function will throw for complex units anyway.

### Exact Equality

Two [doubles] are said to be *exactly equal* if they are equal according to the
`compareQuietEqual` predicate as defined by [IEEE 754 2019], §5.11.

[doubles]: #double

> This is as opposed to [fuzzy equality].
>
> [fuzzy equality]: #fuzzy-equality

### Fuzzy Equality

Two [doubles] are said to be *fuzzy equal* to one another if either:

* They are equal according to the `compareQuietEqual` predicate as defined
  by [IEEE 754 2019], §5.11.

* They are both finite numbers and the mathematical numbers they represent
  produce the same value when rounded to the nearest 1e⁻¹¹ (with ties away from
  zero).

### Integer

A SassScript number `n` is said to be an *integer* if there exists a
mathematical integer `m` with an exact [double] representation and `n`'s value
[fuzzy equals] that double.

If `m` exists, we say that `n`'s *integer value* is the double that represents
`m`.

[double]: #double
[fuzzy equals]: #fuzzy-equality

> To avoid ambiguity, specification text will generally use the term
> "mathematical integer" when referring to the abstract mathematical objects.

### Potentially Slash-Separated Number

A Sass number may be *potentially slash-separated*. If it is, it is associated
with two additional Sass numbers, the *original numerator* and the *original
denominator*. A number that is not potentially slash-separated is known as
*slash-free*.

A potentially slash-separated number is created when a `ProductExpression` with
a `/` operator is evaluated and each operand is *syntactically* one of the
following:

* a `Number`,
* a [`FunctionCall`], or
* a `ProductExpression` that can itself create potentially slash-separated
  numbers.
  
[`FunctionCall`]: ../functions.md#functioncall

If the result of evaluating the `ProductExpression` is a number, that number is
potentially slash-separated if all of the following are true:

* the results of evaluating both operands were numbers, and
* if either operand was a `FunctionCall`, it was [evaluated as a calculation]
  and its name was not `"abs"`, `"max"`, `"min"`, or `"round"`.

  [evaluated as a calculation]: calculation.md#evaluating-a-functioncall-as-a-calculation

If both of these are true, the first operand is the original numerator of the
potentially slash-separated number returned by the `/` operator, and the second
is the original denominator.

## Types

The value type known as a *number* has three components:

* A [double] called its "value".
* A list of strings called *numerator units*.
* A list of strings called *denominator units*.

Several shorthands exist when referring to numbers:

* A number's *units* refers to the [set of units] containing its numerator units
  and denominator units.

* A number is *unitless* if its numerator and denominator units are both empty.

* A number is *in a given unit* (such as "in `px`") if it has that unit as its
  single numerator unit and has no denominator units.

### Operations

#### Equality

Let `n1` and `n2` be two numbers. To determine `n1 == n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2`. If this
  throws an error, return false.

  [matching units]: #matching-two-numbers-units

* Return true if `c1`'s value [fuzzy equals] `c2`'s and false otherwise.

#### Greater Than or Equal To

Let `n1` and `n2` be two numbers. To determine `n1 >= n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* Return true if `c1`'s value [fuzzy equals] `c2`'s, or if
  `compareQuietGreaterEqual(c1.value, c2.value)` returns `true` as defined by
  [IEEE 754 2019], §5.11. Return false otherwise.

#### Less Than or Equal To

Let `n1` and `n2` be two numbers. To determine `n1 <= n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* Return true if `c1`'s value [fuzzy equals] `c2`'s, or if
  `compareQuietLessEqual(c1.value, c2.value)` returns `true` as defined by [IEEE
  754 2019], §5.11. Return false otherwise.

#### Greater Than

Let `n1` and `n2` be two numbers. To determine `n1 > n2`, return `n1 >= n2 and
n1 != n2`.

#### Less Than

Let `n1` and `n2` be two numbers. To determine `n1 < n2`, return `n1 <= n2 and
n1 != n2`.

#### Addition

Let `n1` and `n2` be two numbers. To determine `n1 + n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* Return a number whose value is the result of `addition(c1.value, c2.value)` as defined by
  [IEEE 754 2019], §5.4.1; and whose units are the same as `c1`'s.

#### Subtraction

Let `n1` and `n2` be two numbers. To determine `n1 - n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* Return a number whose value is the result of `subtraction(c1.value, c2.value)`
  as defined by [IEEE 754 2019], §5.4.1; and whose units are the same as `c1`'s.

#### Multiplication

Let `n1` and `n2` be two numbers. To determine `n1 * n2`:

* Let `product` be a number whose value is the result of
  `multiplication(n1.value, n2.value)` as defined by [IEEE 754 2019], §5.4.1;
  whose numerator units are the concatenation of `n1`'s and `n2`'s numerator
  units; and whose denominator units are the concatenation of `n1`'s and `n2`'s
  denominator units.

* Return the result of [simplifying] `product`.

  [simplifying]: #simplifying-a-number

#### Modulo

Let `n1` and `n2` be two numbers. To determine `n1 % n2`:

* Let `c1` and `c2` be the result of [matching units] for `n1` and `n2` allowing
  unitless.

* If `c2` is infinity and has a different sign than `c1` (including
  oppositely-signed zero), return NaN with the same units as `c1`.

  > This matches the behavior of CSS's `mod()` function.

* Let `remainder` be a number whose value is the result of `remainder(c1.value,
  c2.value)` as defined by [IEEE 754 2019], §5.3.1; and whose units are the same
  as `c1`'s.

* If `c2`'s value is less than 0 and `remainder`'s value isn't [exactly equal]
  to `0`, return `remainder - c2`.

  [exactly equal]: #exact-equality

  > This is known as [floored division]. It differs from the standard IEEE 754
  > specification, but matches the behavior of CSS's `mod()` function.
  >
  > Note: These comparisons are not the same as `c2 < 0` or `remainder == 0`,
  > because they don't do fuzzy equality.

* Otherwise, return `remainder`.

#### Negation

Let `number` be a number. To determine `-number`, return a number whose value is
the result of `negate(number)` as defined by [IEEE 754 2019], §5.5.1; and whose
units are the same as `number`'s.

### Serialization

To serialize a number to CSS:

* If the number has more than one numerator unit, or more than zero denominator
  units, throw an error.

* If the number is degenerate, [convert it to a calculation] then serialize that
  to CSS.

  [convert it to a calculation]: #converting-a-number-to-a-calculation

* Otherwise:

  * Emit a string that can be parsed as a [`<number-token>`] with the
    same value as the number.

  * If the number has a numerator unit, emit that unit.

## Procedures

### Converting a Number to a Unit

This algorithm takes a SassScript number `number` and a [set of units] `units`.
It returns a number with the given units. It's written "convert `number` to
`units`" or "convert `number` to `units` allowing unitless".

* If `number` is unitless and this procedure allows unitless, return
  `number` with `units`.

* Otherwise, if `number`'s units aren't [compatible with] `units`, throw an
  error.

  [compatible with]: #compatible-units

* Let `value` be `number`'s value.

* For each pair of units `u1`, `u2` in the [numerator compatibility
  map] between `number` and `units` such that `u1 != u2`:

  [numerator compatibility map]: #compatible-units

  * Let `v1` and `v2` be the values of `u1` and `u2`'s [conversion factors].

  * Set `value` to `division(multiplication(value, v1), v2)` as defined by
    [IEEE 754 2019], §5.4.1.

  [conversion factors]: #conversion-factors

* For each pair of units `u1`, `u2` in the [denominator compatibility map]
  between `number` and `units` such that `u1 != u2`:

  [denominator compatibility map]: #compatible-units

  * Let `v1` and `v2` be the values of `u1` and `u2`'s [conversion factors].

  * Set `value` to `division(multiplication(value, v2), v1)` as defined by
    [IEEE 754 2019], §5.4.1.

* Return a number with value `value` and units `units`.

### Matching Two Numbers' Units

This algorithm takes two SassScript numbers `n1` and `n2` and returns two
numbers. It's written "match units for `n1` and `n2`" or "match units for `n1`
and `n2` allowing unitless".

* If `n1` is unitless and this procedure allows unitless, return `n1`
  with the same units as `n2` and `n2`.

* Otherwise, if `n2` is unitless and this procedure allows unitless, return `n1`
  and `n2` with the same units as `n1`.

* Return `n1` and the result of [converting `n2` to `n1`'s units].

  [converting `n2` to `n1`'s units]: #converting-a-number-to-a-unit

### Simplifying a Number

This algorithm takes a SassScript number `number` and returns an equivalent
number with simplified units.

* Let `mapping` be a one-to-one mapping between `number`'s numerator units and
  its denominator units such that each pair of units is either identical, or
  both units have a [conversion factor] and those two conversion factors have
  the same unit.

* Let `newUnits` be a copy of `number`'s units without any of the units in
  `mapping`.

  > `newUnits` for `1px*px/px` is `px`, because only one of the numerator `px`
  > is included in the mapping.

* Return the result of [converting `number` to `newUnits`].

  [converting `number` to `newUnits`]: #converting-a-number-to-a-unit

### Converting a Number to a Calculation

Given a number `number`, this procedure returns a CSS-compatible calculation
that represents the same numeric value.

* If `number`'s value is `Infinity`, let `value` be an `UnquotedString` whose
  `value` is `'infinity'`.

* Otherwise, if `number`'s value is `-Infinity`, let `value` be an
  `UnquotedString` whose `value` is `'-infinity'`.

* Otherwise, if `number`'s value is `NaN`, let `value` be an `UnquotedString`
  whose `value` is `'NaN'`.

* Otherwise, let `value` be a `CalculationValue` whose value is `number` without
  units.

* For each unit `unit` in `number`'s numerator units:

  * Set `value` to a `CalculationOperation` with `operator` set to `'*'`, `left`
    set to `value`, and `right` set to a number with value 1 and unit `unit`.

* For each unit `unit` in `number`'s denominator units:

  * Set `value` to a `CalculationOperation` with `operator` set to `'/'`, `left`
    set to `value`, and `right` set to a number with value 1 and unit `unit`.

* Return a `Calculation` with `name` set to `'calc'` and arguments set to
  `[value]`.

> Currently the logic for serializing multiple numerator or denominator units is
> unused, but it's likely to be useful later when determining whether/how to
> serialize numbers with complex units.

**O**

## API Options

> The options object that's passed to the [compile API] to control various
> aspects of Sass compilation.
>
## Types

### `Syntax`

The types of input syntax that the compiler can parse.

> [compile API]: compile.d.ts.md

### `OutputStyle`

The ways in which the compiler can format the emitted CSS. See [`Options.style`]
for details.

[`Options.style`]: #style

### `CustomFunction`

A custom function that can be called from Sass stylesheets.

### `Options`

All of the options for a Sass compilation that are shared between compiling from
a path and by compiling from a string.

#### `alertAscii`

If true, the compiler must use only ASCII characters in the formatted message of
errors and logs that aren't handled by a `logger`. Defaults to false.

```ts
alertAscii?: boolean;
```

#### `alertColor`

If true, the compiler may use terminal colors in the formatted message of errors
and logs that aren't handled by a `logger`. Implementations may choose the
default value for this based on their own heuristics of whether colored output
would be useful or render appropriately. Implementations are not obligated to
use colors even if this is `true`.

> The specific format of colored output can vary from implementation to
> implementation.

```ts
alertColor?: boolean;
```

#### `charset`

If true, the compiler must prepend `@charset "UTF-8";` or U+FEFF (byte-order
marker) if it emits non-ASCII CSS.

If false, the compiler must not prepend these byte sequences.

Defaults to true.

> This is ideal when concatenating CSS or embedding it in HTML `<style>` tags.
> Note that the output will still be UTF-8 regardless of this option.

```ts
charset?: boolean;
```

#### `functions`

Before beginning compilation:

* For each key/value pair `signature`/`function` in this record:

  * If `signature` isn't an [<ident-token>] followed immediately by an
    `ArgumentDeclaration`, throw an error.

  * Let `name` be `signature`'s <ident-token>.

  * If there's already a global function whose name is underscore-insensitively
    equal to `name`, continue to the next key/value pair.

  * Otherwise, add a global function whose signature is `signature`. When this
    function is called:

    * Let `result` be the result of calling the associated `CustomFunction` with
      the given arguments. If this call throws an error, treat it as a Sass
      error thrown by the Sass function.

      > As in the rest of Sass, `_`s and `-`s are considered equivalent when
      > determining which function signatures match.

    * Throw an error if `result` is or transitively contains:

      * An object that's not an instance of the `Value` class.

      * A [`SassFunction`] whose `signature` field isn't a valid Sass function
        signature that could appear after the `@function` directive in a Sass
        stylesheet.

    * Return a copy of `result.internal` with all calculations it transitively
      contains (including the return value itself if it's a calculation)
      replaced with the result of [simplifying] those calculations.
    
```ts
functions?: Record<string, CustomFunction<sync>>;
```

#### `importers`

The list of [custom importers] to use to resolve file loads.

[custom importers]: importer.d.ts.md

#### `loadPaths`

If set, the compiler must use these paths to resolve imports.

```ts
loadPaths?: string[];
```

#### `logger`

A [custom logger] that provides callbacks for the compiler to use in lieu of its
default messaging behavior.

[custom logger]: logger/index.d.ts.md

The compiler must treat an `undefined` logger identically to an object that
doesn't have `warn` or `debug` fields.

```ts
logger?: Logger;
```

#### `quietDeps`

If true, the compiler must not print deprecation warnings for stylesheets that
are transitively loaded through an import path.

Defaults to false.

```ts
quietDeps?: boolean;
```

#### `sourceMap`

If true, the compiler must set [`CompileResult.sourceMap`] to a sourceMap object
that represents the mapping between the generated CSS and the source files.

[`CompileResult.sourceMap`]: compile.d.ts.md#compileresult

Defaults to false.

> Except as otherwise specified, the exact structure of this file and how it
> maps between CSS and Sass is left up to the implementation.

```ts
sourceMap?: boolean;
```

#### `sourceMapIncludeSources`

If true, the compiler must include the full Sass source text in
[`CompileResult.sourceMap`].

Defaults to false.

```ts
sourceMapIncludeSources?: boolean;
```

#### `style`

If present, the compiler must format the emitted CSS in this style.

Implementations may support any subset of `OutputStyle`s, provided that:

* They support the `'expanded'` style.
* They produce CSS that is semantically equivalent regardless of style.
* They throw an error if they receive a value for this option that they do not
  support.

> The specifics of each format can vary from implementation to implementation.
> If an implementation wants to add a new `OutputStyle`, the `OutputStyle` type
> should be expanded in this spec first to ensure that style names and
> TypeScript types remain consistent across implementations.

```ts
style?: OutputStyle;
```

#### `verbose`

If true, the compiler must print every single deprecation warning it encounters
(except for those silenced by [`quietDeps`]).

[`quietDeps`]: #quietdeps

If false, the compiler may choose not to print repeated deprecation warnings.

Defaults to false.

```ts
verbose?: boolean;
```

```ts
} // Options
```

### `StringOptionsWithoutImporter`

> This interface is used for calls to [`compileString()`] and
> [`compileStringAsync()`] that don't pass the `importer` parameter, and so
> don't support relative imports.
>
> [`compileString()`]: compile.d.ts.md#compilestring
> [`compileStringAsync()`]: compile.d.ts.md#compilestringasync

#### `syntax`

The compiler must parse `source` using this syntax. Defaults to `'scss'`.

```ts
syntax?: Syntax;
```

#### `url`

The URL of the stylesheet being parsed.

> When `importer` isn't passed, this is purely advisory and only used for error
> reporting.

```ts
url?: URL;
```

```ts
} // StringOptionsWithoutImporter
```

### `StringOptionsWithImporter`

> This interface is used for calls to [`compileString()`] and
> [`compileStringAsync()`] that *do* pass the `importer` parameter, and so *do*
> support relative imports.

#### `importer`

The [importer] to use to resolve relative imports in the entrypoint.

[importer]: importer.d.ts.md

#### `url`

The canonical URL of the entrypoint.

> This *must* be passed when `importer` is passed, since otherwise there's
> nothing to resolve relative URLs relative to.

```ts
url: URL;
```

```ts
} // StringOptionsWithImporter
```

### `StringOptions`
    
# Ordered Comments: Draft 1.0

## Background

> This section is non-normative

When Sass introduced its new module system, the model of how stylesheets were
compiled changed as well. Instead of every source file adding CSS to one global
output stylesheet, each module produced its own CSS which was then stitched
together using more complex logic. This allowed us to support important features
like only emitting each module's CSS once, `@extend` scoping, and
`meta.load-css()`, but it did have one undesirable consequence: the order of
comments changed.

Because each module had its own separate CSS output, any loud comments that
appeared before or between that module's `@use` or `@forward` rules would end up
all together at the beginning of that module. Because that module's CSS was
always emitted in turn after its dependencies', these comments would appear to
be pushed later in the output than authors expected.

Although comment ordering doesn't affect the semantics of compiled CSS, it can
be confusing and undesirable for users. This is especially true when using
meaningful comments like license headers or postprocessor directives.

## Summary

> This section is non-normative

This proposal adjusts the order that comments are emitted relative to CSS so
that the resulting stylesheet is in essentially the same order it would have
been when using `@import`, without repeating stylesheets that are loaded
multiple times.

### Design Decisions

#### Traversal Order

There are two potential orders that could be chosen for comments. Either would
be better than the current ordering, and either can be better than the other
depending on the user's needs.

The order we propose here is "traversal order", in which comments are emitted in
the same order that they're evaluated. The other plausible ordering is "linked
order", in which comments that appear directly above a `@use` or `@forward` rule
are always emitted before the module loaded by that rule.

These two orderings result in the same output when each module is loaded once,
but once a given module is loaded multiple times with comments around it they
become different. For example:

```scss
// styles.scss
/* before @use */
@use 'upstream';

/* before @forward */
@forward 'upstream';
```

produces the following outputs:`

Linked order makes sense when using comments to annotate information about
dependencies, but it's counterproductive when a user wants to annotate the *end*
of a module, since that comment would be considered linked to the next module
load. Traversal order handles that case better *and* matches the old `@import`
behavior, so we chose to use it instead.

## Procedures

### Resolving a Module's Extensions

Adjust the definition of [Resolving a Module's Extensions] by replacing the
definition of the traversing procedure with the following:

[Resolving a Module's Extensions]: ../spec/at-rules/extend.md#resolving-a-modules-extensions

* Define a mutating recursive procedure, *traversing*, which takes a module
  `domestic`:

  * If `domestic` has already been traversed, do nothing.

  * For each module `upstream` in `domestic`'s dependencies:

    * For each unmarked comment in `domestic`'s CSS, if that comment originally
      appeared before the `@use` or `@forward` rule that loaded `upstream`, add
      a copy of that comment to `css` and then mark it.

    * Traverse `upstream`.

    > Because this traverses modules depth-first, it emits CSS in reverse
    > topological order.

  * Let `initial-imports` be the longest initial subsequence of top-level
    statements in `domestic`'s CSS tree that contains only comments and
    `@import` rules *and* that ends with an `@import` rule.

  * Insert a copy of `initial-imports` in `css` after the longest initial
    subsequence of comments and `@import` rules in `css`.

    > If there are no comments or `@import` rules in `css`, this initial
    > subsequence is empty and `initial-imports` is inserted at the beginning of
    > `css`.

  * For each top-level statement `statement` in `domestic`'s CSS tree after
    `initial-imports`:

    * If `statement` is a marked comment, ignore it.

    * Otherwise, add a copy of `statement` to the end of `css`, with any style
      rules' selectors replaced with the corresponding selectors in
      `new-selectors`.

## Semantics

### `@import`

Replace the line of [the `@import` semantics] that reads:

[the `@import` semantics]: ../spec/at-rules/import.md#semantics

* Add an `@import` with the evaluated modifiers to [the current module]'s
  CSS AST.

  [the current module]: ../spec/spec.md#current-module

with one that reads:

* Add an `@import` with the evaluated modifiers to [the current module]'s CSS
  AST after the longest initial subsequence of comments and `@import` rules.

> This ensures that each module's CSS individually raises plain CSS `@import`s
> to the top, and allows the procedure for combining CSS to be a bit simpler by
> only having to handle leading `@eimport`s.
    
**P**

## Draft 1.3

* Handle empty subpath in "Resolving package exports" subprocedure.

## Draft 1.2

* Export `NodePackageImporter` type, and set `_NodePackageImporterBrand` to
  unknown.

## Draft 1.1

* Throw an error if `nodePackageImporter` is used in the browser or other
  environment without filesystem access.

* Remove specified order in the global import list, as users can specify the
  order within the `importers` option.

* Specify importer ordering for the Legacy API.

## Draft 1

* Initial draft

# Partial Namespaces: Draft 1.0

## Background

> This section is non-normative.

In the new Sass [module system][] as written, the implicit namespace of a `@use`
rule that loads a partial with an explicit leading underscore contains that
underscore. This was unintended and confusing, making the namespace look like a
private identifier and making it different than the same file's namespace
imported without the underscore.

[module system]: ../accepted/module-system.md

## Summary

> This section is non-normative.

The underscore will be stripped from the namespace, so `@use "_styles"` will
have the implicit namespace `styles` rather than `_styles`.

## Procedures

### Determining a `@use` Rule's Namespace

This modifies the existing algorithm for [Determining a `@use` Rule's
Namespace][] to read as follows (new text in bold):

[Determining a `@use` Rule's Namespace]: ../spec/at-rules/use.md#determining-a-use-rules-namespace

* If `rule` has an `'as'` clause `as`:

  * If `as` has an identifier, return it.

  * Otherwise, return `null`. The rule is global.

* Let `path` be the `rule`'s URL's [path][URL path].

* Let `basename` be the text after the final `/` in `path`, or the entire `path`
  if `path` doesn't contain `/`.

* Let `module-name` be the text before the first `.` in `path`, or the entire
  `path` if `path` doesn't contain `.`.

* **If `module-name` begins with `_`, remove the leading `_` and set
  `module-name` to the result.**

* If `module-name` isn't a Sass identifier, throw an error.

* Return `module-name`.

## Deprecation Process

Although this is technically a breaking change, it will be made without a
deprecation process for the following reasons:

* Including a leading underscore in a loaded URL is unnecessary, and very few
  stylesheets do it in practice.

* The module system is still very young and not yet super widely used, so it's
  even more unlikely that leading underscores are used in `@use` statements in
  particular.

* This is a fix for an unintended bug in the spec rather than a change to
  intended behavior that users were expected to rely upon.

## Draft 1.1

* Trigger plain CSS nesting behavior based on the type of a rule's stylesheet,
  rather than the type of the current stylesheet, so that plain CSS behavior is
  preserved for nested `@import` and `meta.load-css()`.

## Draft 1

* Initial draft.

# Plain CSS Nesting: Draft 1

## Background

> This section is non-normative.

Browsers have recently begun implementing the [CSS Nesting] module, which adds
native support for Sass-like nesting. While we can't yet support this directly
in Sass without causing a colossal set of breaking changes (see [the blog] for
details), we can support it in plain CSS files (distinguished with the `.css`
extension).

## Summary

> This section is non-normative.

This proposal adds support for parsing nested rules and the parent selector `&`
in plain CSS contexts. This nesting is not resolved in any way; it's passed
through to the output as-is.

### Design Decisions

#### The `&foo` Syntax

This spec does not include support for the `&foo` syntax in plain CSS nesting.
The future of this syntax is [open for debate] and it can be adequately
represented as `foo&`, so Sass won't support it for now.

## Procedures

### Parsing Text as CSS

This modifies [the existing procedure] for parsing text as CSS.

[the existing procedure]: ../spec/syntax.md#parsing-text-as-css

Adjust the list of productions that should produce errors as follows:

* Remove "A style rule appearing within another style rule".

* Replace "The parent selector `&`, either in a selector or a declaration value"
  with "The parent selector `&` in a declaration value".

* Add "A style rule whose selector contains a trailing combinator."

  > While the [bogus combinators] deprecation is in place, style rules with
  > trailing combinators that *don't* have nested rules will produce warnings.
  > Those with nested rules will produce errors since Sass never parsed them
  > successfully in the first place.

  [bogus combinators]: ../accepted/bogus-combinators.md

Add the following to the list of parsing differences:

* A `ParentSelector` may appear anywhere in a `CompoundSelector`, rather than
  just as the first `SimpleSelector`.

* A `ParentSelector` may not have a `suffix`.

## Semantics

### Style Rules

Replace [the existing semantics for style rules] with:

[the existing semantics for style rules]: ../spec/style-rules.md#semantics

> Differences are highlighted in bold.

To execute a style rule `rule`:

* Let `selector` be the result of evaluating all interpolation in `rule`'s
  selector and parsing the result as a selector list.

* **If `rule`'s stylesheet wasn't [parsed as CSS]**:

  [parsed as CSS]: ../spec/syntax.md#parsing-text-as-css

  > Checking whether `rule`'s stylesheet is CSS ensures that the plain CSS
  > behavior occurs even when plain CSS is evaluated in a Sass context, such as
  > through a nested `@import` or a `meta.load-css()` call.

  * If there is a [current style rule]:

    * If `selector` contains one or more parent selectors, replace them with the
      current style rule's selector and set `selector` to the result.

    * Otherwise, nest `selector` within the current style rule's selector using
      the [descendant combinator] and set `selector` to the result.

  * Otherwise, if `selector` contains one or more parent selectors, throw an
    error.

* Let `css` be a CSS style rule with selector `selector`.

* Execute each child `child` of `rule`.

* If `css` contains any children and `selector` is [bogus], throw an error.

  [bogus]: ../spec/selectors.md#bogus-selector

* Remove any [complex selectors][] containing a placeholder selector that
  begins with `-` or `_` from `css`'s selector.

* Unless `css`'s selector is now empty:

  * **If `rule`'s stylesheet was [parsed as CSS] and there is a [current style
    rule] or a current at-rule, append `css` to whichever of the two exists, or
    the innermost if both exist.**

  * **If there is a current at-rule, append `css` to its children.**
  
    > This was intended to be in the current spec, but was overlooked.

  * Otherwise, append `css` to [the current module]'s CSS.

  [the current module]: ../spec/spec.md#current-module

## Serialization

### Parent Selector

To serialize a parent selector, emit the character `&`.

> A parent selector can only appear in a serialized selector if it was parsed
> from plain CSS, which doesn't allow it to have a suffix.

# Legacy Plugin Context

The shared interface for the `this` keyword for custom importers and custom
functions. The implementation must invoke importers and custom functions with an
appropriate `this`.

## Types

### `LegacyPluginThis`

This class contains a single field, `options`, which contains all its metadata.

#### `context`

The same `LegacyPluginThis` instance that contains the `options` object.

```ts
context: LegacyPluginThis;
```

#### `file`

The [`file` option] passed to the `render()` or `renderSync()` call.

[`file` option]: options.d.ts.md#legacyfileoptions

```ts
file?: string;
```

#### `data`

The [`data` option] passed to the `render()` or `renderSync()` call.

[`data` option]: options.d.ts.md#legacystringoptions

```ts
data?: string;
```

#### `includePaths`

A string that contains the current working directory followed by strings passed
in the `includePaths` option, separated by `";"` on Windows and `":"` elsewhere.

```ts
includePaths: string;
```

#### `precision`

```ts
precision: 10;
```

#### `style`

The integer 1.

> Older implementations returned other values for this, but that behavior is
> deprecated and should not be reproduced by new implementations.

```ts
style: 1;
```

#### `indentType`

The number 1 if the [`indentType` option] was `'tab'`. The number 0 otherwise.

[`indentType` option]: options.d.ts.md#indenttype

```ts
indentType: 1 | 0;
```

#### `indentWidth`

An integer indicating the number of spaces or tabs emitted by the compiler for
each level of indentation.

```ts
indentWidth: number;
```

#### `linefeed`

A value based on the [`linefeed` option] passed to the `render()` or
`renderSync()`:

[`linefeed` option]: options.d.ts.md#linefeed

* If `linefeed` is `"cr"`, this must be `"\r"`.
* If `linefeed` is `"crlf"`, this must be `"\r\n"`.
* If `linefeed` is `"lf"` or `undefined`, this must be `"\n"`.
* If `linefeed` is `"lfcr"`, this must be `"\n\r"`.

```ts
linefeed: '\r' | '\r\n' | '\n' | '\n\r';
```

#### `result`

An object with a single field, `stats`, which contains several subfields.

##### `result.stats.start`

The number of milliseconds since the Unix epoch (1 January 1970 00:00:00 UT) at
the point at which the user called `render()` or `renderSync()`.

```ts
start: number;
```

##### `result.stats.entry`

The [`file` option] passed to the `render()` call, or the string `"data"` if no
file was passed.

```ts
entry: string;
```

```ts
      }; // options.result.stats
    }; // options.result
  }; // options
} // LegacyPluginThis
```

## Draft 2.0

* Expand the proposal to cover the embedded protocol as well.

* Always pass `containingUrl` to `FilesystemImporter`s, since they always return
  `file:` canonical URLs and are never invoked for absolute `file:` URLs.

## Draft 1.1

* Throw an error when an importer returns a canonical URL using its
  non-canonical schemes.

## Draft 1

* Initial draft.

# Containing URL: Draft 2.0

## Background

> This section is non-normative.

Among many other changes, the [new importer API] dropped an importer's ability
to access the URL of the stylesheet that contained the load, known in the legacy
API as the "previous URL". This was an intentional design choice which enforced
the invariant that the same canonical URL always refers to the same file.

However, this restriction makes it difficult for importers to work as expected
in certain contexts. For example, in the Node.js ecosystem JS loads depend on
the structure of the `node_modules` directory closest to the containing file.
The new import API can't match this behavior.

This is particularly problematic for the widely-used Webpack importer, which
expands on the concept of directory-specific load contexts to allow users to do
fine-grained customization of how different files will load their dependencies.
In order to ease migration to the new API for this plugin and its users, and to
better match external ecosystems' load semantics, a solution is needed.

## Summary

> This section is non-normative.

This proposal adds an additional option to the `Importer.canonicalize()` API
that provides the canonical URL of the containing file (the "containing URL").
However, in order to preserve the desired invariants, this option is only
provided when either:

* `Importer.canonicalize()` is being passed a relative URL (which means the URL
  has already been tried as a load relative to the current canonical URL), or

* `Importer.canonicalize()` is passed an absolute URL whose scheme the importer
  has declared as non-canonical.

A "non-canonical" scheme is a new concept introduced by this proposal.
Importers will optionally be able to provide a `nonCanonicalScheme` field which
will declare one or more URL schemes that they'll never return from
`canonicalize()`. (If they do, Sass will throw an error.)

### Design Decisions

#### Invariants

The specific restrictions for this API were put in place to preserve the
following invariants:

1. There must be a one-to-one mapping between canonical URLs and stylesheets.
   This means that even when a user loads a stylesheet using a relative URL,
   that stylesheet must have an absolute canonical URL associated with it *and*
   loading that canonical URL must return the same stylesheet. This means that
   any stylesheet can *always* be unambiguously loaded using its canonical URL.

2. Relative URLs are resolved like paths and HTTP URLs. For example, within
   `scheme:a/b/c.scss`, the URL `../d` should be resolved to `scheme:a/d`.

3. Loads relative to the current stylesheet always take precedence over loads
   from importers, so if `scheme:a/b/x.scss` exists then `@use "x"` within
   `scheme:a/b/c.scss` will always load it.

#### Risks

Providing access to the containing URL puts these invariants at risk in two ways:

1. Access to the containing URL in addition to a canonical URL makes it possible
   for importer authors to handle the same canonical URL differently depending
   in different contexts, violating invariant (1).

2. It's likely that importer authors familiar with the legacy API will
   incorrectly assume that any containing URL that exists is the best way to
   handle relative loads, since the only way to do so in the legacy API was to
   manually resolve them relative to the `prev` parameter. Doing so will almost
   certainly lead to violations of invariant (3) and possibly (2).

#### Alternatives Considered

To mitigate these risks, we need to have *some* restriction on when the
containing URL is available to importers. We considered the following
alternative restrictions before settling on the current one:

##### Unavailable for Pre-Resolved Loads

**Don't provide the containing URL when the `canonicalize()` function is called
for pre-resolved relative loads.** When the user loads a relative URL, the Sass
compiler first resolves that URL against the current canonical URL and passes
the resulting absolute URL to the current importer's `canonicalize()` function.
This invocation would not have access to the containing URL; all other
invocations would, including when Sass passes the relative URL as-is to
`canonicalize()`.

This mitigates risk (2) by ensuring that all relative URL resolution is handled
by the compiler by default. The importer will be invoked with an absolute URL
and no containing URL first for each relative load, which will break for any
importers that naïvely try to use the containing URL in all cases.

This has several drawbacks. First, a badly-behaved importer could work around
this by returning `null` for all relative loads and then manually resolving
relative URLs as part of its load path resolution, thus continuing to violate
invariant (3). Second, this provides no protection against risk (1) since the
stylesheet author may still directly load a canonical URL.

##### Unavailable for Absolute Loads

**Don't provide the containing URL when the `canonicalize()` function is being
called for any absolute URL.** Since relative loads always pass absolute URLs to
their importers first, this is a superset of "Unavailable for Pre-Resolved
Loads". In addition, it protects against risk (1) by ensuring that all absolute
URLs (which are a superset of canonical URLs) are canonicalized without regard
to context.

However, this limits the functionality of importers that use a custom URL scheme
for *non-canonical* URLs. For example, if we choose to support [package imports]
by claiming the `pkg:` scheme as a "built-in package importer", implementations
of this scheme wouldn't be able to do context-sensitive resolution. This would
make the scheme useless for supporting Node-style resolution, a core use-case.
Given that we want to encourage users to use URL schemes rather than relative
URLs, this is a blocking limitation.

Thus we arrive at the actual behavior, which makes the containing URL
unavailable for absolute loads *unless* they have a URL scheme declared
explicitly non-canonical. This supports the `pkg:` use-case while still
protecting against risk (1), since the containing URL is never available for
canonical resolutions.

### `FileImporter`

Replace [the invocation of `findFileUrl`] with:

[the invocation of `findFileUrl`]:../spec/js-api/importer.d.ts.md#fileimporter

* Let `containingUrl` be the canonical URL of the [current source file] if it
  has one, or undefined otherwise.

  [current source file]: ../spec/spec.md#current-source-file

* Let `url` be the result of calling `findFileUrl` with `string`, `fromImport`,
  and `containingUrl`. If it returns a promise, wait for it to complete and use
  its value instead, or rethrow its error if it rejects.

### `Importer`

Replace the first two bullet points for [invoking an importer with a string]
with:

[invoking an importer with a string]: ../spec/js-api/importer.d.ts.md#importer

* Let `fromImport` be `true` if the importer is being run for an `@import` and
  `false` otherwise.

* If `string` is a relative URL, or if it's an absolute URL whose scheme is
  non-canonical for this importer, let `containingUrl` be the canonical URL of
  the [current source file]. Otherwise, or if the current source file has no
  canonical URL, let `containingUrl` be undefined.

* Let `url` be the result of calling `canonicalize` with `string`, `fromImport`,
  and `containingUrl`. If it returns a promise, wait for it to complete and use
  its value instead, or rethrow its error if it rejects.

* If the scheme of `url` is [non-canonical][non-canonical-js] for this importer,
  throw an error.

#### `nonCanonicalScheme`

The set of URL schemes that are considered *non-canonical* for this importer. If
this is a single string, treat it as a list containing that string.

Before beginning compilation, throw an error if any element of this is empty or
contains a character other than a lowercase ASCII letter, an ASCII numeral,
U+002B (`+`), U+002D (`-`), or U+002E (`.`).

> Uppercase letters are normalized to lowercase in the `URL` constructor, so for
> simplicity and efficiency we only allow lowercase here.

```ts
nonCanonicalScheme?: string | string[];
```

```ts
} // Importer
```

## Embedded Protocol

### `Importer`

#### `non_canonical_scheme`

The set of URL schemes that are considered *non-canonical* for this importer.
This must be empty unless `importer.importer_id` is set.

If any element of this contains a character other than a lowercase ASCII letter,
an ASCII numeral, U+002B (`+`), U+002D (`-`), or U+002E (`.`), the compiler must
treat the compilation as failed.

```proto
repeated string non_canonical_scheme = 4;
```

### `CanonicalizeRequest`

#### `containing_url`

The canonical URL of the [current source file] that contained the load to be
canonicalized.

The compiler must set this if and only if `url` is relative or its scheme is
[non-canonical][non-canonical-proto] for the importer being invoked, unless the
current source file has no canonical URL.

[non-canonical-proto]: #non_canonical_scheme

```proto
optional string containing_url = 6;
```

### `CanonicalizeResponse`

#### `url`

If this URL's scheme is [non-canonical][non-canonical-proto] for this importer,
the compiler must treat that as an error thrown by the importer.

### `FileImportRequest`

Replace the sending of `FileImportRequest` with:

* Let `containingUrl` be the canonical URL of the [current source file] if it
  has one, or undefined otherwise.

* Let `response` be the result of sending a `FileImportRequest` with `string` as
  its `url`, `fromImport` as `from_import`, and `containingUrl` as
  `containing_url`.

#### `containing_url`

The canonical URL of the [current source file] that contained the load to be
canonicalized. The compiler must set this unless the current source file has no
canonical URL.

```proto
optional string containing_url = 6;
```

# Package Importer: Draft 1.3

This proposal introduces the semantics for a Package Importer and defines the
`pkg:` URL scheme to indicate Sass package imports in an implementation-agnostic
format. It also defines the semantics for a new built-in Node Package
Importer.

## Background

> This section is non-normative.

Historically, Sass has not specified a standard method for using packages from
dependencies. A number of domain-specific solutions exist using custom importers
or by specifying a load path. This can lead to Sass code being written in a way
that is tied to a specific domain and make it difficult to rely on dependencies.

## Summary

> This section is non-normative.

Sass users often need to use styles from a dependency to customize an existing
theme or access styling utilities.

This proposal defines a `pkg:` URL scheme for usage with `@use` that directs an
implementation to resolve a URL within a dependency. Sass interfaces may provide
one or more implementations that  will resolve the dependency URL using the
resolution standards and conventions for that environment. Once resolved, this
URL will be loaded in the same way as any other `file:` URL.

This proposal also defines a built-in Node importer.

For example, `@use "pkg:bootstrap";` would resolve to the path of a
library-defined export within the `bootstrap` dependency. In Node, that could be
resolved within `node_modules`, using the [Node resolution algorithm].

### Node built-in importer

The built-in Node importer resolves in the following order:

1. `sass`, `style`, or `default` condition in package.json `exports`.

2. If there is not a subpath, then find the root export:

   1. `sass` key at package.json root.

   2. `style` key at package.json root.

   3. `index` file at package root, resolved for file extensions and partials.

3. If there is a subpath, resolve that path relative to the package root, and
   resolve for file extensions and partials.

For library creators, the recommended method is to add a `sass` conditional
export to `package.json`. The `style` condition is an acceptable alternative,
but relying on the `default` condition is discouraged. Notably, the key order
matters, and the importer will resolve to the first value with a key that is
`sass`, `style`, or `default`.


Then, library consumers can use the `pkg:` syntax to get the default export.

```scss
@use 'pkg:library';
```

To better understand and allow for testing against the recommended algorithm, a
[Sass pkg: test] repository has been made with a rudimentary implementation of
the algorithm.

### Design Decisions

#### Using a `pkg:` URL scheme

We could use the `~` popularized by Webpack's `load-sass` format, but this has
been deprecated since 2021. In addition, since this creates a URL that is
syntactically a relative URL, it does not make it clear to the implementation or
the reader where to find the file.

While the Dart Sass implementation allows for the use of the `package:` URL
scheme, a similar standard doesn't exist in Node. We chose the `pkg:` URL scheme
as it clearly communicates to both the user and compiler that the specified files
are from a dependency. The `pkg:` URL scheme also does not have known conflicts
in the ecosystem.

#### No built-in `pkg:` resolver for browsers

Dart Sass will not provide a built-in resolver for browsers to use the `pkg:`
scheme. To support a similar functionality, a user would need to ensure that
files are served, and the loader would need to fetch the URL. In order to follow
the same algorithm for [resolving a file: URL], we would need to make many
fetches. If we instead require the browser version to have a fully resolved URL,
we negate many of this spec's benefits. Users may write their own custom
importers to fit their needs.

[resolving a file: url]: ../spec/modules.md#resolving-a-file-url

#### Available as an opt-in importer

The `pkg:` import loader will be exposed as an opt-in importer as it adds the
potential for unexpected file system interaction to `compileString` and
`compileStringAsync`. Specifically, we want people who invoke Sass compilation
functions to have control over what files get accessed, and there's even a risk
of leaking file contents in error messages.

For the modern API, it will be exported from Sass as a constant value that can
be added to the list of `importers`. This allows for multiple Package Importer
types with user-defined order.

#### Available in legacy API

The built-in Node Package Importer will be added to the legacy API in order to
reduce the barrier to adoption. While the legacy API is deprecated, we
anticipate the implementation to be straightforward.

#### Node Resolution Decisions

The current recommendation for resolving packages in Node is to add
`node_modules` to the load paths. We could add `node_modules` to the load paths
by default, but that lacks clarity to the implementation and the reader. In
addition, a file may have access to multiple `node_modules` directories, and
different files may have access to different `node_modules` directories in the
same compilation.

There are a variety of methods currently in use for specifying a location of the
default Sass export for npm packages. For the most part, packages contain both
JavaScript and styles, and use the `main` or `module` root keys to define the
JavaScript entry point. Some packages use the `"sass"` key at the root of their
`package.json`.

Other packages have adopted [conditional exports], driven by build tools like
[Vite], [Parcel] and [Sass Loader for Webpack] which all resolve Sass paths
using the `"sass"` and the `"style"` custom conditions.

Because use of conditional exports is flexible and recommended for modern
packages, this will be the primary method used for the Node package importer. We
will support both the `"sass"` and the `"style"` conditions, as Sass can also
use the CSS exports exposed through `"style"`. While in practice, `"style"`
tends to be used solely for `css` files, we will support `scss`, `sass` and
`css` files for either `"sass"` or `"style"`.

While conditional exports allows package authors to define specific aliases to internal
files, we will still use the Sass conventions for resolving file paths with
partials, extensions and indices to discover the intended export alias. However,
we will not apply that logic to the destination, and will expect library authors
to map the export to the correct place. In other words, given a `package.json`
with `exports` as below, The Node package importer will resolve a
`@use "pkg:pkgName/variables";` to the destination of the `_variables.scss` export.

Node supports two module resolution algorithms: CommonJS and ECMAScript. While
these are very similar in most cases, there are corner cases that resolve in
different ways. The Node package importer will be implemented based on the
ECMAScript algorithm. This means that the Node package importer will not support
loading from `NODE_PATH` or `GLOBAL_FOLDERS`, as that is only supported in
CommonJS resolution. The Node documentation for [ECMAScript modules] recommends
using symlinks if this behavior is desired.

## Types

### Updated `importers` option

> On implementation, the option key will continue to be `importers`, and this
> type definition will replace the existing type definition for `importers`.
> Here, we are only specifying it as `importers_new_` to allow for declaration
> merging within the spec.

Before the first bullet points in [`compile`] and [`compileString`] in the
Javascript Compile API, insert:

* If any object in `options.importers` is exactly equal to the object
  `nodePackageImporter`:

  * If no filesystem is available, throw an error.

    > This primarily refers to a browser environment, but applies to other
    > sandboxed JavaScript environments as well.

  * Let `pkgImporter` be a [Node Package Importer] with an associated
    `entryPointURL` of `require.main.filename`.

  * Replace `nodePackageImporter` with `pkgImporter` in a copy of
    `options.importers`.

[`compile`]: ../spec/js-api/compile.d.ts.md#compile
[`compileString`]: ../spec/js-api/compile.d.ts.md#compilestring
[Node Package Importer]: #node-package-importer

### Legacy API `pkgImporter`

If set, the compiler will use the specified built-in package importer to resolve
any URL with the `pkg:` scheme. This step will be inserted immediately before
the existing legacy importer logic, and if the package importer returns `null`,
the legacy importer logic will be invoked.

Currently, the only available package importer is `node`, which follows Node
resolution logic to locate Sass files.

Defaults to undefined.

## Semantics

### Package Importers

This proposal defines the requirements for Package Importers written by users or
provided by implementations. It is a type of [Importer] and, in addition to the
standard requirements for importers, it must handle only non-canonical URLs that:

* have the scheme `pkg`, and
* whose path begins with a package name, and
* optionally followed by a path, with path segments separated with a forward
  slash.

The package name will often be the first path segment, but the importer may take
into account any conventions in the environment. For instance, Node supports
scoped package names, which start with `@` followed by 2 path segments. Note
that package names that contain non-alphanumeric characters may be less portable
across different package importers.

Package Importers must reject the following patterns:

* A URL whose path begins with `/`.
* A URL with non-empty/null username, password, host, port, query, or fragment.

[importer]: ../spec/modules.md#importer

### Node Package Importer

The Node Package Importer is an implementation of a [Package Importer] using the
standards and conventions of the Node ecosystem. It has an associated absolute
`file:` URL named `entryPointURL`.

When the Node Package Importer is invoked with a string named `string`:

* If `string` is a relative URL, return null.

* Let `url` be the result of [parsing `string` as a URL][parsing a URL]. If this
  returns a failure, throw that failure.

* If `url`'s scheme is not `pkg:`, return null.

* If `url`'s path begins with a `/` or is empty, throw an error.

* If `url` contains a username, password, host, port, query, or fragment, throw
  an error.

* Let `sourceFile` be the canonical URL of the [current source file] that
  contained the load.

* If `sourceFile`'s scheme is `file:`, let `baseURL` be `sourceFile`.

* Otherwise, let `baseURL` be `entryPointURL`.

* Let `resolved` be the result of [resolving a `pkg:` URL as Node] with `url` and
  `baseURL`.

* If `resolved` is null, return null.

* Let `text` be the contents of the file at `resolved`.

* Let `syntax` be:

  * "scss" if `resolved` ends in `.scss`.

  * "indented" if `resolved` ends in `.sass`.

  * "css" if `resolved` ends in `.css`.

  > The algorithm for [resolving a `pkg:` URL as Node] guarantees that
  > `resolved` will have one of these extensions.

* Return `text`, `syntax`, and `resolved`.

## Procedures

### Node Algorithm for Resolving a `pkg:` URL

This algorithm takes a URL with scheme `pkg:` named `url`, and a URL `baseURL`.
It returns a canonical `file:` URL or null.

* Let `fullPath` be `url`'s path.

* Let `packageName` be the result of [resolving a package name] with `fullPath`,
  and `subpath` be `fullPath` without the `packageName`.

* Let `packageRoot` be the result of [resolving the root directory for a
  package] with `packageName` and `baseURL`.

* If a `package.json` file does not exist at `packageRoot`, throw an error.

* Let `packageManifest` be the result of parsing the `package.json` file at
  `packageRoot` as [JSON].

* Let `resolved` be the result of [resolving package exports] with
  `packageRoot`, `subpath`, and `packageManifest`.

* If `resolved` has the scheme `file:` and an extension of `sass`, `scss` or
  `css`, return it.

* Otherwise, if `resolved` is not null, throw an error.

* If `subpath` is empty, return the result of [resolving package root values].

* Let `resolved` be `subpath` resolved relative to `packageRoot`.

* Return the result of [resolving a `file:` URL] with `resolved`.

### Resolving a package name

This algorithm takes a string, `path`, and returns the portion that identifies
the Node package.

* If `path` starts with `@`, it is a scoped package. Return the first 2 [URL path
  segments], including the separating `/`.

* Otherwise, return the first URL path segment.

### Resolving the root directory for a package

This algorithm takes a string, `packageName`, and an absolute URL `baseURL`, and
returns an absolute URL to the root directory for the most proximate installed
`packageName`.

* Return the result of `PACKAGE_RESOLVE(packageName, baseURL)` as defined in
  the [Node resolution algorithm specification].

### Resolving package exports

This algorithm takes a package.json value `packageManifest`, a directory URL
`packageRoot` and a relative URL path `subpath`. It returns a file URL or null.

* Let `exports` be the value of `packageManifest.exports`.

* If `exports` is undefined, return null.

* If `subpath` is empty, let `subpathVariants` be an array with the string `.`.
  Otherwise, let `subpathVariants` be the result of [Export load paths] with
  `subpath`.

* Let `resolvedPaths` be a list of the results of calling
  `PACKAGE_EXPORTS_RESOLVE(packageRoot, subpathVariant, exports, ["sass",
  "style"])` as defined in the [Node resolution algorithm specification], with
  each `subpathVariants` as `subpathVariant`.

  > The PACKAGE_EXPORTS_RESOLVE algorithm always includes a `default` condition,
  > so one does not have to be passed here.

* If `resolvedPaths` contains more than one resolved URL, throw an error.

* If `resolvedPaths` contains exactly one resolved URL, return it.

* If `subpath` has an extension, return null.

* Let `subpathIndex` be `subpath` + `"/index"`.

* Let `subpathIndexVariants` be the result of [Export load paths] with `subpathIndex`.

* Let `resolvedIndexPaths` be a list of the results of calling
  `PACKAGE_EXPORTS_RESOLVE(packageRoot, subpathVariant, exports, ["sass",
  "style"])` as defined in the [Node resolution algorithm specification], with
  each `subpathIndexVariants` as `subpathVariant`.

* If `resolvedIndexPaths` contains more than one resolved URL, throw an error.

* If `resolvedIndexPaths` contains exactly one resolved URL, return it.

* Return null.

> Where possible in Node, implementations can use [resolve.exports] which
> exposes the Node resolution algorithm, allowing for per-path custom
> conditions, and without needing filesystem access.

### Export Load Paths

This algorithm takes a relative URL path `subpath` and returns a list of
potential subpaths, resolving for partials and file extensions.

* Let `paths` be a list.

* If `subpath` ends in `.scss`, `.sass`, or `.css`:

  * Add `subpath` to `paths`.

* Otherwise, add `subpath` + `.scss`, `subpath` + `.sass`, and `subpath` +
  `.css` to `paths`.

* If `subpath`'s [basename] does not start with `_`, for each `item` in
  `paths`, prepend `"_"` to the basename, and add to `paths`.

* Return `paths`.

[basename]: ../spec/modules.md#basename

## Embedded Protocol

An Importer that resolves `pkg:` URLs using the [Node resolution algorithm]. It
is instantiated with an associated `entry_point_url`.

## Ecosystem Notes

It may be worth adding a [Community Conditions Definition] to the Node
Documentation. [WinterCG] has a [Runtime Keys proposal specification] underway
in standardizing the usage of custom conditions for runtimes, but Sass doesn't
cleanly fit into that specification.

**Q**

**R**

## Draft 1.1

* Replace floating-point wording for simply "number".

* Update integer return value range from `[1, $limit)` to `[1, $limit]`.

## Draft 1

* Initial draft.

# Random With Units: Draft 1.1

This proposal modifies the behavior of the built-in [`math.random()`][random]
function to return a number with matching units to the numeric argument it
received.

[random]: ../spec/built-in-modules/math.md#random

## Table of Contents

* [Background](#background)
* [Summary](#summary)
  * [Design Decisions](#design-decisions)
    * [New Behavior vs New Syntax](#new-behavior-vs-new-syntax)
    * [No Stripping Units Fallback](#no-stripping-units-fallback)
* [Semantics](#semantics)
* [Deprecation Process](#deprecation-process)

## Background

> This section is non-normative.

Sass provides a built-in [`math.random()` function][random] which takes an
optional numeric parameter `$limit` (defaults to `null`).

When `null` is passed it returns a decimal in the range `[0, 1)`. When an
integer greater than zero is passed it returns a number in the range
`[1, $limit)`. Otherwise it throws an error.

However, a numeric integer can include units (e.g. `5px` or `8em`) and the
current behavior [drops the units][issue], which is unexpected for most users.
For example: `math.random(42px) => 28` (there is no `px`).

## Summary

> This section is non-normative.

The built-in `math.random($limit: null)` function will keep the same behavior
for numbers without units, but when given an integer with units it will return a
random integer with matching units.

### Design Decisions

#### New Behavior vs New Syntax

This proposal keeps the existing syntax but changes the semantics, therefore it
is a breaking change.

A backwards compatible alternative was a second optional parameter for units,
e.g. `math.random(42, 'px')`, but it didn't solve the problem when the first
parameter has units, e.g. `math.random(42em, 'px')`.

We decided to update the behavior and follow the [deprecation process].

[deprecation process]: #deprecation-process

#### No Stripping Units Fallback

Sass considers [stripping units an anti-pattern], so we won't provide a fallback
option for the previous unit-stripping behavior. Users are expected to rely on
unit-based arithmetic.

## Semantics

The `math.random()` function can take an optional parameter `$limit` which
defaults to `null`.

* If `$limit` is `null` then return a pseudo-random unitless number whose value
   is in the range `[0, 1)`.

  > Example: `math.random() => 0.1337001337`

* If `$limit` is an **integer** [number] greater than zero:

  * Return a pseudo-random integer in the range `[1, $limit]` with the same
    [units] as `$limit`.

    > Examples:
    >
    > * `math.random(123) => 87`
    > * `math.random(123px) => 43px`
    > * `math.random(500%) => 238%`

* Otherwise throw an error.

## Deprecation Process

Given some users may be relying on the existing Dart Sass implementation which
strips off the units, this will be a breaking change for Dart Sass v1.

We will emit deprecation warnings for any use of `math.random($limit)` where the
`$limit` argument evaluates to a number with units.

**S**

# Selector Module

This built-in module is available from the URL `sass:selector`.

## Procedures

### Parse a Selector From a SassScript Object

This algorithm takes a SassScript object `selector` and returns an abstract
representation of a CSS selector.

* Set `text` to an empty string.

* If `selector` is a list:

  * If `selector` is bracketed and/or slash-separated, throw an error.

  * If `selector` is space-separated:

    * If `selector` contains any non-string elements, throw an error.

    * Set `text` to the concatenation of each element of `selector`, separated
      by spaces.

  * Otherwise, if `selector` is comma-separated:

    * For each element `complex` of `selector`:

      * If `complex` is a list:

        * If `complex` is bracketed or comma-separated, throw an error.

        * Otherwise, if `complex` contains any non-string elements, throw an error.

        * Otherwise, append the concatenation of each element of `selector`, separated
          by spaces, to `text`.

      * Otherwise, if `complex` is not a string, throw an error.

      * Otherwise, append `complex` to text.

      * Append a comma to `text` unless `complex` is the last element of
        `selector`.

* Otherwise, if `selector` is not a string, throw an error.

* Otherwise, set `text` to the contents of `selector`.

* Parse `text` as a selector and return the result.

## Functions

### `append()`

```
append($selectors...)
```

This function is also available as a global function named `selector-append()`.

### `extend()`

```
extend($selector, $extendee, $extender)
```

This function is also available as a global function named `selector-extend()`.

* Let `selector`, `extendee`, and `extender` be the result of [parsing a
  selector from] `$selector`, `$extendee`, and `$extender`, respectively.

  [parsing a selector from]: #parse-a-selector-from-a-sassscript-object

* If any of `selector`, `extendee`, or `extender` is [bogus], throw an error.

  [bogus]: ../selectors.md#bogus-selector

* > Additional semantics have not yet been explicitly written.

### `is-superselector()`

```
is-superselector($super, $sub)
```

This function is also available as a global function named `is-superselector()`.

* Let `super` and `sub` be the result of [parsing a selector from] `$super` and
  `$sub`, respectively.

* If either `super` or `sub` is [bogus], throw an error.

* > Additional semantics have not yet been explicitly written.

### `nest()`

```
nest($selectors...)
```

This function is also available as a global function named `selector-nest()`.

### `parse()`

```
parse($selector)
```

This function is also available as a global function named `selector-parse()`.

### `replace()`

```
replace($selector, $original, $replacement)
```

This function is also available as a global function named `selector-replace()`.

* Let `selector`, `original`, and `replacement` be the result of [parsing a
  selector from] `$selector`, `$original`, and `$replacement`, respectively.

* If any of `selector`, `original`, or `replacement` is [bogus], throw an error.

* > Additional semantics have not yet been explicitly written.

### `simple-selectors()`

```
simple-selectors($selector)
```

This function is also available as a global function named `simple-selectors()`.

### `unify()`

```
unify($selector1, $selector2)
```

This function is also available as a global function named `selector-unify()`.

* Let `selector1` and `selector2` be the result of [parsing a selector from]
  `$selector1` and `$selector2`, respectively.

* If either `selector1` or `selector2` is [bogus], throw an error.

* > Additional semantics have not yet been explicitly written.

# Selectors

## Table of Contents

* [Definitions](#definitions)
  * [Visible Combinator](#visible-combinator)
  * [Complex Selector](#complex-selector)
  * [Complex Selector Component](#complex-selector-component)
  * [Trailing Combinator](#trailing-combinator)
  * [Bogus Selector](#bogus-selector)
* [Syntax](#syntax)
  * [`ComplexSelector`](#complexselector)

## Definitions

### Visible Combinator

A *visible combinator* is any selector [combinator] other than the [descendant
combinator].

### Complex Selector

A *complex selector* is an optional [visible combinator] (its *leading
combinator*) as well as a sequence of [complex selector components]. The
component sequence may be empty only for complex selectors with leading
combinators.

[visible combinator]: #visible-combinator
[complex selector components]: #complex-selector-component

### Complex Selector Component

A *complex selector component* is a compound selector as well as a single
[combinator].

### Trailing Combinator

A [complex selector]'s *trailing combinator* is its final [complex selector
component]'s combinator if it's not a [descendant combinator]. If it *is* a
descendant combinator, the complex selector doesn't have a trailing combinator.

[complex selector]: #complex-selector
[complex selector component]: #complex-selector-component

### Bogus Selector

A [complex selector] is *bogus* if it has a leading or [trailing combinator], or
if any of the simple selectors it transitively contains is a selector pseudo
with a bogus selector, except that `:has()` may contain complex selectors with
leading combinators.

A selector list is *bogus* if any of its complex selectors are bogus.

[trailing combinator]: #trailing-combinator

## Syntax

### `ComplexSelector`

<x><pre>
**ComplexSelector**          ::= [\<combinator>]? ComplexSelectorComponent+
&#32;                          | [\<combinator>]
**ComplexSelectorComponent** ::= CompoundSelector [\<combinator>]?
</pre></x>

# Shared Resources in JavaScript API: Draft 1.1

This proposal adds an API design that allows for sharing resources across
multiple invocations of the Sass compiler's JavaScript API. This will provide
Sass's users with a more efficient way of running Sass compilations across
multiple files.

## Table of Contents

* [Summary](#summary)
  * [Design Decisions](#design-decisions)
    * [Splitting Sync and Async Compilers](#splitting-sync-and-async-compilers)
    * [Limited API interface](#limited-api-interface)
    * [Flexibility for interfaces on process management](#flexibility-for-interfaces-on-process-management)
    * [No shared state](#no-shared-state)
  * [Example](#example)
    * [Sync Compiler](#sync-compiler)
    * [Async Compiler](#async-compiler)
* [API](#api)
  * [Types](#types)
    * [initCompiler()](#initcompiler)
    * [initAsyncCompiler()](#initasynccompiler)
    * [Compiler](#compiler)
      * [`compile()` and `compileString()`](#compile-and-compilestring)
      * [dispose()](#dispose)
    * [Async Compiler](#async-compiler-1)
      * [`compileAsync()` and `compileStringAsync()`](#compileasync-and-compilestringasync)
      * [dispose()](#dispose-1)

## Summary

Currently, the JavaScript API for Sass only accommodates a single compilation
per process. In practice, we have observed build tools are compiling multiple
times in response to a single user action. For instance, Vue.js authors using
Vite will see a Sass compilation for each `<style lang="scss">` tag that appears
in their codebase.

While processes can be spun up and down quickly, the combined time can add up to
a noticeable impact on performance. The embedded client supports long running
processes, and this proposal adds a method for the embedded host to manage the
lifecycle of these processes through a Compiler interface.

### Design Decisions

#### Splitting Sync and Async Compilers

When creating a Compiler, users will need to choose either a compiler that
provides access to synchronous or asynchronous compilation. While providing both
simultaneously from a single Compiler would offer more flexibility, it also adds
significant complexity to the API. In practice, we expect most users will only
want to use one mode, generally in the mode that is the fastest for the
implementation. If synchronous and asynchronous compilations are both needed,
users can create multiple Compilers.

#### Limited API interface

Many build tools allow passing the Sass module as a parameter, which offers
flexibility to users on what implementation of Sass is used. Because users may
still want to use portions of the JavaScript API unrelated to compilation, we
considered having the Compiler interface mirror the top level Sass interface,
which would allow users to replace instances of the imported `sass` class with
an instance of the compiler. However, this adds an additional cost to ongoing
Sass development. The proposed API does not eliminate this as a possibility in
the future.

#### Flexibility for interfaces on process management

In environments without access to a long-running compiler—for instance, the Dart
Sass implementation—the Compiler interface will continue to perform a single
compilation per process.

#### No shared state

This proposal does not change how a single compilation is done, and no state is
shared across compilations. Options and importers must be set for each
compilation. Future enhancements may introduce [shared state], but this proposal
only adds the ability to run multiple compilations on a single process.

This also means that the proposal makes no assertions about whether file content
has changed. It is also up to the user to determine when to start and stop a
long-running compiler process.

### Example

##### `compile()` and `compileString()`

Only synchronous compilation methods [`compile()`] and [`compileString()`] must be
included, and must have with identical semantics to the [Sass interface].

[`compile()`]: ../spec/js-api/compile.d.ts.md#compile
[`compilestring()`]: ../spec/js-api/compile.d.ts.md#compilestring
[Sass interface]: ../spec/js-api/index.d.ts.md

```ts
compile(path: string, options?: Options<'sync'>): CompileResult;
compileString(source: string, options?: StringOptions<'sync'>): CompileResult;
```

##### dispose()

When `dispose` is invoked on a Compiler:

* Any subsequent invocations of `compile` and `compileString` must throw an
  error.

```ts
  dispose(): void;
}
```

#### Async Compiler

An instance of the asynchronous Compiler.

##### `compileAsync()` and `compileStringAsync()`

Only asynchronous compilation methods [`compileAsync()`] and
[`compileStringAsync()`] must be included, and must have with identical
semantics to the [Sass interface].

[`compileasync()`]: ../spec/js-api/compile.d.ts.md#compileasync
[`compilestringasync()`]: ../spec/js-api/compile.d.ts.md#compilestringasync

```ts
compileAsync(
  path: string,
  options?: Options<'async'>
): Promise<CompileResult>;
compileStringAsync(
  source: string,
  options?: StringOptions<'async'>
): Promise<CompileResult>;
```

##### dispose()

When `dispose` is invoked on an Async Compiler:

* Any subsequent invocations of `compileAsync` and `compileStringAsync` must
  throw an error.

* Any compilations that have not yet been settled must be allowed to settle, and
  not be cancelled.

* Resolves a Promise when all compilations have been settled, and disposal is
  complete.

```ts
  dispose(): Promise<void>;
}
```

## Draft 1.1

* Remove unneeded returned/resolved value from `dispose`.

## Draft 1

* Initial draft

## Draft 3.1

* Update to accommodate new calculation parsing logic.

## Draft 3

* Make a potentially slash-separated number slash-free when passing it as an
  argument to a built-in function or mixin.

* Update the timeline.

## Draft 2

* Since the new module system has already launched, replace the top-level
  `slash-list()` and `divide()` functions with `list.slash()` and `math.div()`.

## Draft 1.1

* Require at least two arguments for `slash-list()`.

* Require that selector functions throw errors when passed slash-separated
  lists.

## Draft 1

* Initial draft.

# Forward Slash as a Separator: Draft 3.1

This proposal modifies the `/` character to be used exclusively as a separator,
and lays out a process for deprecating its existing usage as a division
operator.

## Background

> This section is non-normative.

Early on in Sass's history, the decision was made to use `/` as a division
operator, since that was (and is) by far the most common representation across
programming languages. The `/` character was used in very few plain CSS
properties, and for those it was an optional shorthand. So Sass defined [a set
of heuristics][] that defined when `/` would be rendered as a literal slash
versus treated as an operator.

For a long time, these heuristics worked pretty well. In recent years, however,
new additions to CSS such as [CSS Grid][] and [CSS Color Level 4][] have been
using `/` as a separator increasingly often. Using the same character for both
division and slash-separation is becoming more and more annoying to users, and
will likely eventually become untenable.

## Summary

> This section is non-normative.

We will redefine `/` to be *only* a separator. Rather than creating an unquoted
string (as it currently does when at least one operand isn't a number), it will
create a slash-separated list. As such, lists will now have three possible
separators: space, comma, and slash.

Division will instead be written as a function, `math.div()`. Eventually, it
will also be possible to write Sass-compatible division in `calc()` expressions;
however, this is not going to be implemented immediately and is outside the
scope of this proposal.

[the new module system]: module-system.md

This is a major breaking change to existing Sass semantics, so we'll roll it out
in a three-stage process:

1. The first stage won't introduce any breaking changes. It will:

   * Add a `math.div()` function which will work exactly like the `/` operator
     does today, except that it will produce deprecation warnings for any
     non-number arguments.

   * Add slash-separated lists to Sass's object models, *without* a literal
     syntax for creating them. That will come later, since it would otherwise be
     a breaking change.

   * Add a `list.slash()` function that will create slash-separated lists.

   * Produce deprecation warnings for all `/` operations that are interpreted as
     division.

2. The second stage *will* be a breaking change. It will:

   * Make `/` exclusively a list separator.

   * Make `math.div()` throw errors for non-number arguments.

   * Deprecate the `list.slash()` function, since it will now be redundant.

3. The third stage will just remove the `list.slash()` function. This is not a
   priority, and will be delayed until the next major version release.

## Alternatives Considered

> This section is non-normative.

### Different Operator Syntax

One other possible fix would be to change the syntax for division to another
punctuation-based operator. We ended up deciding that anything we chose would be
so different from every other programming language as to be unreadable for
anyone unfamiliar with the language.

In addition, the best candidate operator we found was `~`, as an ASCII character
that wasn't already in use in CSS or Sass value syntax. But `~` is difficult to
type on many non-English keyboard layouts, which makes it only marginally more
efficient to write than a function call for many Sass users.

### First-Class `calc()`

We eventually want to add native Sass support for parsing `calc()` expressions,
resolving them at compile-time if possible, and producing a new Sass value that
can have arithmetic performed on it if necessary. This is known as [first-class
`calc()`][], and it would mean that division could be written unambiguously
using `/` in the context of a `calc()` expression. For example, `$width / 2`
would be instead written `calc($width / 2)`.

[first-class `calc()`]: https://github.com/sass/sass/issues/2186

However, first-class `calc()` is likely to be a very complex feature to design
and implement. Most of the resources available for large-scale language features
are currently focused on [the new module system][], so it's likely that a full
implementation of first-class `calc()` won't land until mid-to-late 2020. And
the full implementation is a prerequisite for even *beginning* the deprecation
cycle for `/`-as-division, which means we probably wouldn't fully support
`/`-as-separator for another three to six months after that point. This is just
too much time to wait on giving users a good solution for writing `/`-separated
properties.

### `math()` Syntax

A possible middle ground between `calc()` and the current syntax would be using
a special `math()` expression as a way of signaling a syntactic context where
`/` is interpreted as division without needing to fully support all the edge
cases of `calc()`. For example, `$width / 2` would be instead written
`math($width / 2)`.

Unfortunately, this is highly likely to confuse users. They may think that
`math()` is necessary for all mathematical operations, when in fact it's only
necessary for division, which would lead to confusing and unnecessary `math()`
expressions popping up all over the place. They may also think it's a Sass
library function or a plain CSS feature, neither of which is true, and look in
the wrong place for documentation.

Worse, once we *did* add support for first-class `calc()`, there would then be
two different ways of wrapping mathematical expressions which had slightly but
meaningfully different semantics. This is a recipe for making users feel
confused and overwhelmed.

## Existing Behavior

To precisely describe when a deprecation warning should be emitted, we must
first describe the existing heuristic behavior.

A Sass number may be *potentially slash-separated*. If it is, it is associated
with two additional Sass numbers, the *original numerator* and the *original
denominator*. A number that is not potentially slash-separated is known as
*slash-free*.

A potentially slash-separated number is created when a `ProductExpression` with
a `/` operator is evaluated and both operands are *syntactically* either literal
`Number`s or `ProductExpression`s that can themselves create potentially
slash-separated numbers. In this case, both operands are guaranteed to be
evaluated as numbers. The first operand is the original numerator of the
potentially slash-separated number returned by the `/` operator, and the second
is the original denominator.

A potentially slash-separated number is converted to a slash-free number when:

* It is the value of a `ParenthesizedExpression`.

  > That is, it's in parentheses, such as in `(1 / 2)`. Note that if it's in a
  > list that's in parentheses, it's *not* converted to a slash-free number.

* It is stored in a Sass variable.

* It is passed into a user-defined function or mixin.

* It is returned by a function.

> Any expressions that normally produce a new number (such as other mathematical
> operations) always produce slash-free numbers, even when their arguments are
> slash-separated.
>
> When a potentially slash-separated number is "converted" to a slash-free
> number, a slash-free copy is made of the original. Sass values are always
> immutable.

When a potentially slash-separated number is converted to CSS, either when
converted to a string via interpolation or when included in a declaration's
value, it is written as the original numerator followed by `/` followed by the
original denominator. If either the original numerator or denominator are
themselves slash-separated, they're also written this way.

## Definitions

### Calculation-Safe Expression

Remove "or `/`" from the definition of a [calculation-safe] `ProductExpression`.
Add "An unbracketed `SlashListExpression` with more than one element, all of
which are calculation-safe" to the list of calculation-safe expressions.

[calculation-safe]: ../spec/types/calculation.md#calculation-safe-expression

## Syntax

> Note that the existing productions being modified have not been defined
> explicitly before this document. The old definitions are listed in
> strikethrough mode to clarify the change.

This proposal modifies the existing `CommaListExpression` production to add
support for slash-separated lists. The new grammar for this production is:

<x><pre>
~~**CommaListExpression** ::= SpaceListExpression (',' SpaceListExpression)*~~
**CommaListExpression** ::= SlashListExpression (',' SlashListExpression)*
**SlashListExpression** ::= SpaceListExpression ('/' SpaceListExpression)*
</pre></x>

> Note that `/` may *not* be used in single-element lists the way `,` is. That
> is, `(foo,)` is valid, but `(foo/)` is not.
>
> This defines `/` to bind tighter than `,` but looser than space-separated
> lists. This was chosen because most common uses of `/` in CSS conceptually
> bind looser than space-separated values. The only exception is the [`font`
> shorthand syntax][], which is used much more rarely will still work (albeit
> with an unintuitive SassScript representation) with a loose-binding `/`.
>
> [`font` shorthand syntax]: https://developer.mozilla.org/en-US/docs/Web/CSS/font

It also modifies the existing `ProductExpression` production to remove `/` as an
operator. The new grammar for this production is:

<x><pre>
~~**ProductExpression** ::= (ProductExpression ('*' | '/' | '%'))? UnaryPlusExpression~~
**ProductExpression** ::= (ProductExpression ('*' | '%'))? UnaryPlusExpression
</pre></x>

When a `SlashListExpression` with one or more `/`s is evaluated, it produces a
list object whose contents are the values of its constituent
`SpaceListExpression`s and whose separator is "slash".

## Procedures

### Evaluating a `FunctionCall` as a Calculation

Replace "evaluating each `Expression`" with "[adjusting slash precedence] in and
then evaluating each `Expression`" in [evaluting a `FunctionCall` as a
calculation].

[adjusting slash precedence]: #adjusting-slash-precedence
[evaluting a `FunctionCall` as a calculation]: ../spec/types/calculation.md#evaluating-a-functioncall-as-a-calculation

### Adjusting Slash Precedence

This algorithm takes a calculation-safe expression `expression` and returns
another calculation-safe expression with the precedence of
`SlashListExpression`s adjusted to match division precedence.

* Return a copy of `expression` except, for each `SlashListExpression`:

  * Let `left` be the first element of the list.

  * For each remaining element `right`:

    * If `left` and `right` are both `SumExpression`s:

      * Let `last-left` be the last operand of `left` and `first-right` the
        first operand of `right`.

      * Set `left` to a `SumExpression` that begins with all operands and
        operators of `left` except `last-left`, followed by a
        `SlashListExpression` with elements `last-left` and `first-right`,
        followed by all operators and operands of `right` except `first-right`.

        > For example, `slash-list(1 + 2, 3 + 4)` becomes `1 + (2 / 3) + 4`.

    * Otherwise, if `left` is a `SumExpression`:

      * Let `last-left` be the last operand of `left`.

      * Set `left` to a `SumExpression` that begins with all operands and
        operators of `left` except `last-left`, followed by a
        `SlashListExpression` with elements `last-left` and `right`.

        > For example, `slash-list(1 + 2, 3)` becomes `1 + (2 / 3)`.

    * Otherwise, if `right` is a `SumExpression` or a `ProductExpression`:

      * Let `first-right` be the first operand of `right`.

      * Set `left` to an expression of the same type as `right` that begins a
        `SlashListExpression` with elements `left` and `first-right`, followed
        by operators and operands of `right` except `first-right`.

        > For example, `slash-list(1, 2 * 3)` becomes `(1 / 2) * 3`.

    * Otherwise, if `left` is a slash-separated list, add `right` to the end.

    * Otherwise, set `left` to a slash-separated list containing `left` and
      `right`.

  * Replace each element in `left` with the result of adjusting slash precedence
    in that element.

  * Replace the `SlashListExpression` with `left` in the returned expression.

### `SlashListExpression`

To evaluate a `SlashListExpression` as a calculation value:

* Let `left` be the result of evaluating the first element of the list as a
  calculation value.

* For each remaining element `element`:

  * Let `right` be the result of evaluating `element` as a calculation value.

  * Set `left` to a `CalcOperation` with operator `"/"`, `left`, and `right`.

* Return `left`.

## Semantics

### Slash-Separated Lists

A new list separator, known as "slash", will be added. The string `"slash"` may
be passed to the `$separator` argument of `append()` and `join()`, and may be
returned by `list.separator()`. When converted to CSS, slash-separated lists
must have exactly one `/` between each adjacent pair of elements.

> Although CSS doesn't currently make use of this syntax, there's nothing
> stopping a list from being both bracketed and slash-separated.

### `math.div()` Function

The `div()` function in the `sass:math` module has the following signature:

```
math.div($number1, $number2)
```

It throws an error if either argument is not a number. If both are numbers, it
returns the same result that the `/` operator did prior to this proposal.

### `list.slash()` Function

The `slash()` function in the `sass:list` module has the following signature:

```
list.slash($elements...)
```

It throws an error if zero or one arguments are passed. It returns an
unbracketed slash-separated list containing the given elements.

### `rgb()` Function

This proposal modifies [the existing behavior][old rgb] of the `rgb($channels)`
overload to be the following:

[old rgb]: ../spec/functions.md#rgb-and-rgba

* If `$channels` is a [special variable string][], return a plain CSS function
  string with the name `"rgb"` and the argument `$channels`.

  [special variable string]: ../spec/functions.md#special-variable-string

* If `$channels` is an unbracketed slash-separated list:

  * If `$channels` doesn't have exactly two elements, throw an error. Otherwise,
    let `rgb` be the first element and `alpha` the second element.

  * If either `rgb` or `alpha` is a special variable string, return a plain CSS
    function string with the name `"rgb"` and the argument `$channels`.

  * If `rgb` is not an unbracketed space-separated list, throw an error.

  * If `rgb` has more than three elements, throw an error.

  * If `rgb` has fewer than three elements:

    * If any element of `rgb` is a [special variable string][], return a
      plain CSS function string with the name `"rgb"` and the argument
      `$channels`.

    * Otherwise, throw an error.

  * Let `red`, `green`, and `blue` be the three elements of `rgb`.

  * Call `rgb()` with `red`, `green`, `blue`, and `alpha` as arguments and
    return the result.

* Otherwise, proceed with the existing definition of the function.

> This ensures that calling (for example) `rgb(0 0 100% / 80%)` will continue to
> work when `/` is parsed as a slash separator. It's important to define this
> runtime behavior in phase 1 so that users manually constructing
> slash-separated lists can use them as expected.

### `hsl()` Function

This proposal modifies [the existing behavior][old hsl] of the `hsl($channels)`
overload to be the following:

[old hsl]: ../spec/functions.md#hsl-and-hsla

* If `$channels` is a [special variable string][], return a plain CSS function
  string with the name `"hsl"` and the argument `$channels`.

* If `$channels` is an unbracketed slash-separated list:

  * If `$channels` doesn't have exactly two elements, throw an error. Otherwise,
    let `hsl` be the first element and `alpha` the second element.

  * If either `hsl` or `alpha` is a special variable string, return a plain CSS
    function string with the name `"hsl"` and the argument `$channels`.

  * If `hsl` is not an unbracketed space-separated list, throw an error.

  * If `hsl` has more than three elements, throw an error.

  * If `hsl` has fewer than three elements:

    * If any element of `hsl` is a [special variable string][], return a
      plain CSS function string with the name `"hsl"` and the argument
      `$channels`.

    * Otherwise, throw an error.

  * Let `hue`, `saturation`, and `lightness` be the three elements of `hsl`.

  * Call `hsl()` with `hue`, `saturation`, `lightness`, and `alpha` as arguments
    and return the result.

* Otherwise, proceed with the existing definition of the function.

### Selector Functions

This proposal modifies [the "Parse a Selector From a SassScript Object"
procedure][] to throw an error whenever it encounters a slash-separated list.

[the "Parse a Selector From a SassScript Object" procedure]: ../spec/built-in-modules/selector.md#parse-a-selector-from-a-sassscript-object

### Slash-Free Numbers

This proposal adds one additional scenario in which [potentially slash-separated
numbers] are converted into [slash-free numbers]:

[potentially slash-separated numbers]: #existing-behavior
[slash-free numbers]: #existing-behavior

* When a number is passed to a built-in function or mixin.

> This change makes built-in functions/mixins consistent with user-defined ones,
> which *do* make their arguments slash-free. It also combines with [Phase
> 1](#phase-1) of the deprecation process to ensure that all uses of
> `/`-as-division will produce warnings.
>
> This could potentially be a breaking change. While most functions that could
> take potentially slash-separated numbers will either ignore the
> slash-separation or return the number and cause it to become slash-free that
> way, it's possible for a user to pass it to a function that puts it in a data
> structure, as in `list.join(1/2, ())` which returns a single-element list
> containing a potentially slash-separated number. However, this breakage is
> considered exceedingly unlikely and it's easy to work around using
> `list.slash()` so we aren't considering it a blocker.

## Deprecation Process

The deprecation process will be divided into three phases:

### Phase 1

This phase will add no breaking changes, and will be implemented as soon as
possible. Its purpose is to notify users that `/`-as-division will eventually be
removed and give them alternatives to migrate to that will continue to work when
`/`'s behavior is changed.

Phase 1 implements none of [the syntactic changes](#syntax) described above. It
implements all [the semantics](#semantics), with the exception that `math.div()`
allows non-number arguments. If either argument is not a number, it emits a
deprecation warning.

> If either argument is not a number, `math.div()` still returns the same result
> as the `/` operator, which in that case will be concatenating the two
> arguments into an unquoted string separated by `/`. This behavior is supported
> for the time being to make it easier to automatically migrate users to
> `math.div()` without causing runtime errors.

While phase 1 will continue to support `/` as a division operator, the use of
the operator in this way will produce a deprecation warning. Specifically, a
deprecation warning is emitted when a [potentially slash-separated
number](#existing-behavior) is converted to a slash-free number, *or* when a `/`
operation returns a [slash-free](#existing-behavior) number.

> In phase 1, we recommend authors write division and slash-separated lists like
> so:
>

### Phase 2

This phase will introduce breaking changes to the language. It implements both
[the syntactic changes](#syntax) and [the semantic changes](#semantics) exactly
described above (so `math.div()` will only accept numbers). In phase 2, the
`list.slash()` function will emit a deprecation warning whenever it's called.

> It's recommended that implementations increment their major version numbers
> with the release of phase 2, in accordance with [semantic versioning][].
>
> [semantic versioning]: https://semver.org/

> In phase 2 and 3, we recommend authors write division and slash-separated
> lists like so:


### Phase 3

This phase will introduce a final breaking change, removing the now-unnecessary
`list.slash()` function.

> It's recommended that implementations increment their major version numbers
> again with the release of phase 3.

## Timeline

* Phase 1 was originally scheduled to be implemented by Dart Sass as soon as the
  proposal was accepted. However, it was delayed considerably in the hope that
  it would also be implemented by LibSass. Since [LibSass is now deprecated],
  we plan to release Phase 1 in Q2 2021.

  [LibSass is now deprecated]: https://sass-lang.com/blog/libsass-is-deprecated

* Phase 2 will be released in Dart Sass 2.0.0. There's no solid release date for
  this yet, and it may or may not be concurrent with the removal of support for
  `@import` depending on how quickly the module system is adopted and how urgent
  the need for a syntactic slash separator becomes.

* Phase 3 will be released in Dart Sass 3.0.0, whenever that ends up happening.
  Removing `list.slash()` is not considered a priority, so this will wait until
  we have additional, more-compelling breaking changes we want to release.

# Source Location

### `SourceLocation`

An interface that represents a location in a text file.

#### `offset`

The 0-based offset of this location within the file it refers to, in terms of
UTF-16 code units.

```ts
offset: number;
```

#### `line`

The number of U+000A LINE FEED characters between the beginning of the file and
`offset`, exclusive.

> In other words, this location's 0-based line.

```ts
line: number;
```

#### `column`

The number of UTF-16 code points between the last U+000A LINE FEED character
before `offset` and `offset`, exclusive.

> In other words, this location's 0-based column.

```ts
column: number;
```

```ts
} // SourceLocation
```

# Source Span

## Types

### `SourceSpan`

An interface that represents a contiguous section ("span") of a text file. This
section may be empty if the `start` and `end` are the same location, in which
case it indicates a single position in the file.

#### `start`

The location of the first character of this span, unless `end` points to the
same character, in which case the span is empty and refers to the point between
this character and the one before it.

```ts
start: SourceLocation;
```

#### `end`

The location of the first character after this span. This must point to a
location after `start`.

```ts
end: SourceLocation;
```

#### `url`

The canonical URL of the file that this span refers to. For files on disk, this
must be a `file://` URL.

This must be `undefined` for files that are passed to the compiler without a
URL. It must not be `undefined` for any files that are importable.

```ts
url?: URL;
```

#### `text`

The text covered by the span. This must be the text between `start.offset`
(inclusive) and `end.offset` (exclusive) of the file referred by this span. Its
length must be `end.offset - start.offset`.

```ts
text: string;
```

#### `context`

Additional source text surrounding this span.

The compiler may choose to omit this. If it's not `undefined`, it must contain
`text`. Furthermore, `text` must begin at column `start.column` of a line in
`context`.

> This usually contains the full lines the span begins and ends on if the span
> itself doesn't cover the full lines, but the specific scope is up to the
> compiler.

```ts
context?: string;
```

```ts
} // SourceSpan
```

# Sass Specification

This directory contains the formal specification for the Sass language.

Sass is a *living specification*, which means that it's actively updated over
time without having distinctions between numbered versions. Different
implementations may support different subsets of the specification, although all
implementations are expected to work towards full support. The *reference
implementation* (currently [Dart Sass][]) will generally support as close to the
full spec as possible.

This specification is incomplete, and is added to *lazily*. This means that
portions of the spec are only written when they're necessary as background for
new language proposals. The Sass team eventually hopes to specify every part of
the language this way.

## Definitions

### Scope

A *scope* is a mutable structure that contains:

* The scope's *variables*: a mapping from identifiers to SassScript values.
* The scope's *mixins*: a mapping from identifiers to mixins.
* The scope's *functions*: a mapping from identifiers to functions.
* The scope's *parent*: a reference to another scope, which may be unset.

One scope at a time is designated the *current scope*. By default, this is the
[global scope](#global-scope).

### Global Scope

The *global scope* is the scope shared among the top level of all Sass files. It
has no parent.

### Current Source File

The *current source file* is the [source file][] that was passed to the
innermost active invocation of [Executing a File](#executing-a-file).

[source file]: syntax.md#source-file

*All current source files* refer to all the source files passed to any active
invocation of Executing a File.

### Current Configuration

The *current configuration* is the [configuration][] that was passed to the
innermost active invocation of [Executing a File](#executing-a-file).

[configuration]: modules.md#configuration

### Current Import Context

The *current import context* is the [import context][] that was passed to the
innermost active invocation of [Executing a File](#executing-a-file).

[import context]: modules.md#import-context

### Current Module

The *current module* is the [module][] that was created by the innermost active
invocation of [Executing a File](#executing-a-file).

[module]: modules.md#module

> Because a module is only made immutable (other than its variables) when
> execution has finished, the current module is always mutable.

## Procedures

### Running in a New Scope

To run a set of steps *in a new scope*:

* Let `parent` be the [current scope].

  [current scope]: #scope

* Return the result of running the given steps with the current scope set to an
  empty scope with `parent` as its parent.

## Semantics

### Compiling a Path

> This an entrypoint to the specification; it's up to each implementation how it
> exposes this to the user.

This algorithm takes a local filesystem path `path`, an optional list of
[importers] `importers`, and an optional list of paths `load-paths`. It returns
a string.

* Let `text` be the result of decoding the binary contents of the file at
  `path`.

* Let `syntax` be:

  * "indented" if `path` ends in `.sass`.
  * "css" if `path` ends in `.css`.
  * "scss" otherwise.

* Let `url` be the absolute `file:` URL corresponding to `path`.

* Let `importer` be a [filesystem importer] with an arbitrary `base`.

  > This importer will only ever be passed absolute URLs, so its base won't
  > matter.

* Return the result of [compiling](#compiling-a-string) `text` with `syntax`,
  `url`, `importer`, `importers`, and `load-paths`.

[importers]: modules.md#importer

### Compiling a String

> This an entrypoint to the specification; it's up to each implementation how it
> exposes this to the user.

This algorithm takes:

* a string `string`,
* a syntax `syntax` ("indented", "scss", or "css"),
* an optional URL `url`,
* an optional [importer] `importer`,
* an optional list of importers `importers`,
* and an optional list of paths `load-paths`.

[importer]: modules.md#importer

It runs as follows:

* Set the [global importer list] to `importers`.

* For each `path` in `load-paths`:

  * Let `base` be the absolute `file:` URL that refers to `path`.

  * Add a [filesystem importer] with base `base` to the global importer list.

* Let `ast` be the result of [parsing] `text` as `syntax`.

* If `url` is null:

  * If `importer` is not null, throw an error.

  * Set `url` to a unique value.

    > This ensures that all source files have a valid URL. When displaying this
    > value, implementations should help users understand the source of the string
    > if possible.

* If `importer` is null:

  * If `url` is a `file:` URL, set `importer` to be a [filesystem importer] with an
    arbitrary `base`.

    > This importer will only ever be passed absolute URLs, so its base won't
    > matter.

  * If `url` is not a `file:` URL, set `importer` to be a function that always
    returns null.

* Let `file` be the [source file][] with `ast`, canonical URL `url`, and
  importer `importer`.

* Let `module` be the result of [executing](#executing-a-file) `file`.

* Let `css` be the result of [resolving `module`'s extensions][].

  [resolving `module`'s extensions]: at-rules/extend.md#resolving-a-modules-extensions

* Return the result of converting `css` to a CSS string.

[filesystem importer]: modules.md#filesystem-importer
[parsing]: syntax.md#parsing-text
[global importer list]: modules.md#global-importer-list

### Executing a File

This algorithm takes a [source file][] `file`, a [configuration][] `config`, an
[import context][] `import`, and returns a [module][].

* Let `module` be an empty module with source file `file`.

* Let `uses` be an empty map from `@use` rules to modules.

* Execute each top-level statement as described in that statement's
  specification.

  > The semantics for executing each statement is defined in that statement's
  > individual specification.

* For each variable declaration `variable` with a `!global` flag in `file`,
  whether or not it was evaluated:

  * If `variable`'s name *doesn't* begin with `-` or `_` and `variable` is not
    yet in `module`, set `variable` to `null` in `module`.

    > This isn't necessary for implementations that follow the most recent
    > [variables spec][] and don't allow `!global` assignments to variables
    > that don't yet exist. However, at time of writing, all existing
    > implementations are in the process of deprecating the old `!global`
    > behavior, which allowed `!global` declarations to create new
    > variables.
    >
    > Setting all `!global` variables to `null` if they weren't otherwise set
    > guarantees the stability of static analysis by ensuring that the set of
    > variables a module exposes doesn't depend on how it was executed.

  [variables spec]: variables.md

* Return `module`. Its functions, mixins, and CSS are now immutable.

# Strict Unary Operators: Draft 1

This proposal forbids the syntax `$a -$b`, which surprises many users by parsing
equivalently to `$a - $b` instead of `$a (-$b)`. It does the same for `+`, which
also has a unary form.

## Background

> This section is non-normative.

Sass is in an awkward syntactic position. On one hand, it's beholden to CSS's
syntax, including the frequent use of space-separated lists of values. On the
other, it wants to provide mathematical operations in a naturalistic way that
matches user expectations from other programming languages and from everyday
mathematical notation.

This is a particular problem when dealing with operators like `-` and `+` that
can be both *binary*, appearing between two operands like `$a - $b` or `$a +
$b`; or *unary*, appearing before a single operand like `-$a` or `-$b`. In most
programming languages it's possible to parse both of these unambiguously with
any combination of whitespace, but in Sass a construct like `$a -$b` could be
reasonably parsed as either the binary operation `$a - $b` or the unary
operation `$a (-$b)`.

In practice, we chose to parse it as the binary operation under the logic that
whitespace shouldn't affect the parsing of operators. This logic is sound in
isolation, but in practice it produces surprising and unpleasant behavior for
users.

## Summary

> This section is non-normative.

We will address the confusion by forbidding the ambiguous case entirely. Any
expression of the form `$a -$b` or `$a +$b` will produce an error that will
suggest the user disambiguate by either writing `$a - $b` or `$a (-$b)`, which
clearly represent the intention to use a binary or unary operator, respectively.
Other constructs such as `($a)-$b` will still be allowed.

As with any breaking change, we will begin by deprecating the old behavior.
Since this isn't a CSS compatibility issue, the breaking change won't land until
the next major revision of each implementation.

## Alternatives Considered

> This section is non-normative.

### Spaces on Both Sides

We considered the possibility of requiring spaces on *both* sides of binary
operators, so that `($a)-$b` would also be forbidden. However, this form is much
more likely to be interpreted as a binary operator by users, and we want to
limit how much behavior we deprecate as much as possible.

## Syntax

This proposal modifies the existing `SumExpression` production to forbid
this particular case:

<x><pre>
**SumExpression** ::= (SumExpression ('+' | '-')¹)? ProductExpression
</pre></x>

1: If there's whitespace before but not after the operator, emit a syntax error.

## Deprecation Process

Before an implementation releases its next major version, it should emit a
deprecation warning instead of a syntax error.

## Draft 1.2

* Throw an error if `$limit` is 0.

## Draft 1.1

* Returns a bracketed list instead of an unbracketed one to be more clear
  about what type of value is being returned.

## Draft 1

* Initial draft.

# `string.split()`: Draft 1.2

This proposal adds `string.split()` to the `sass:string` module.

## Background

> This section is non-normative.

The `sass:string` module contains several functions for manipulating and finding
out information about strings. Currently, though, there is no built-in function
that splits one string into a list of substrings, and authors have been creating
their own versions of functions that achieve this functionality.

## Summary

> This section is non-normative.

This proposal adds the `string.split()` function to the `sass:string` module.
The function takes a string, splits it based on a provided separator, and
returns a bracketed, comma-separated list of substrings.

This could be used to take a string and repurpose parts of it for some other
use. For example, fonts contained in a font stack list could be split into
segments and then used as keys in a new map.

Examples:

```scss
$fonts: "Helvetica Neue, Helvetica, Arial";
string.split($fonts, ', '); // ["Helvetica Neue", "Helvetica", "Arial"]
```

A third argument can set a limit to the the number of splits performed on the
string:

```scss
string.split($fonts, ', ', 1); // ["Helvetica Neue", "Helvetica, Arial"]
```

An empty `$separator` returns all Unicode code points in the original string:

```scss
$font: "Helvetica"
string.split($font, ''); // ["H", "e", "l", "v", "e", "t", "i", "c", "a"]
```

## Semantics

### `split()`

```
split($string, $separator, $limit: null)
```

* If `$string` is not a string, throw an error.

* If `$separator` is not a string, throw an error.

* If `$limit` is a value other than an integer or `null`, throw an error.

* If `$limit` is less than 1, throw an error.

* If `$string` is an empty string, return a list with `$string` as the only
  item.

* Let `split-list` be an empty list.

* If `$limit` is `null`, set `$limit` to the value of calling
  `string.length($string)`.

* Let `split-counter` equal 0.

* While `split-counter <= $limit` and `string.length($string) > 0`:

  * If `split-counter == $limit`:

    * Append `$string` to `split-list`.

    * Set `$string` to an empty string.

  * Otherwise:

    * If `$separator` is an empty string:

      * Let `code-point` be the value of calling `string.slice($string, 1, 1)`.

      * Append `code-point` to `split-list`.

      * Set `$string` to `string.slice($string, 2)`.

      * Increase `split-counter` by 1.

    * Otherwise:

      * Let `index` be the result of calling
        `string.index($string, $separator)`.

      * If `index` is `null`, append `$string` to `split-list` and set `$string`
        to an empty string.

      * Otherwise:

        * Let `current-substring` be the result of calling
          `string.slice($string, 1, index - 1)`.

        * Append `current-substring` to `split-list`.

        * Set `$string` to
          `string.slice($string, index + string.length($separator))`.

        * Increase `split-counter` by 1.

* Return `split-list` as a bracketed, comma-separated list.

# String API

## Types

### `SassString`

The JS API representation of a Sass string.

#### `internal`

The [private `internal` field] refers to a Sass string.

[private `internal` field]: index.d.ts.md#internal

#### `text`

The contents of [`internal`] serialized as UTF-16 code units.

```ts
get text(): string;
```

#### `hasQuotes`

Whether [`internal`] has quotes.

```ts
get hasQuotes(): boolean;
```

#### `sassLength`

The number of Unicode code points in [`internal`]'s contents.

```ts
get sassLength(): number;
```

#### `sassIndexToStringIndex`

Converts the Sass index `sassIndex` to a JS index into `text`:

* If `sassIndex` is not a unitless Sass number, throw an error.

* Let `value` be the value of `sassIndex`. Let `index` be the result of
  `fuzzyAsInt(value)`. If `index === null`, throw an error.

* If `index === 0`, or the absolute value of `index` is greater than the length
  of `sassLength`, throw an error.

* If `index > 0`, let `normalizedIndex = index * 1`.
* Otherwise, if `index < 0`, let `normalizedIndex = sassLength + index`.

* Return the index in `text` of the first code unit of the Unicode code point
  that `normalizedIndex` points to.

  > Sass indices count Unicode code points, whereas JS indices count UTF-16 code
  > units.

> The `name` parameter may be used for error reporting.

```ts
sassIndexToStringIndex(sassIndex: Value, name?: string): number;
```

```ts
} // SassString
```

# String Module

This built-in module is available from the URL `sass:string`.

## Functions

### `index()`

```
index($string, $substring)
```

This function is also available as a global function named `str-index()`.

### `insert()`

```
insert($string, $insert, $index)
```

This function is also available as a global function named `str-insert()`.

### `length()`

```
length($string)
```

This function is also available as a global function named `str-length()`.

### `quote()`

```
quote($string)
```

This function is also available as a global function named `quote()`.

### `slice()`

```
slice($string, $start-at, $end-at: -1)
```

This function is also available as a global function named `str-slice()`.

### `split()`

```
split($string, $separator, $limit: null)
```

* If `$string` is not a string, throw an error.

* If `$separator` is not a string, throw an error.

* If `$limit` is a value other than an integer or `null`, throw an error.

* If `$limit` is less than 1, throw an error.

* If `$string` is an empty string, return a list with `$string` as the only
  item.

* Let `split-list` be an empty list.

* If `$limit` is `null`, set `$limit` to the value of calling
  `string.length($string)`.

* Let `split-counter` equal 0.

* While `split-counter <= $limit` and `string.length($string) > 0`:

  * If `split-counter == $limit`:

    * Append `$string` to `split-list`.

    * Set `$string` to an empty string.


* Otherwise:

    * If `$separator` is an empty string:

      * Let `code-point` be the value of calling `string.slice($string, 1, 1)`.

      * Append `code-point` to `split-list`.

      * Set `$string` to `string.slice($string, 2)`.

      * Increase `split-counter` by 1.

    * Otherwise:

      * Let `index` be the result of calling
        `string.index($string, $separator)`.

      * If `index` is `null`, append `$string` to `split-list` and set `$string`
        to an empty string.

      * Otherwise:

        * Let `current-substring` be the result of calling
          `string.slice($string, 1, index - 1)`.

        * Append `current-substring` to `split-list`.

        * Set `$string` to
          `string.slice($string, index + string.length($separator))`.

        * Increase `split-counter` by 1.

* Return `split-list` as a bracketed, comma-separated list.

### `to-lower-case()`

```
to-lower-case($string)
```

This function is also available as a global function named `to-lower-case()`.

### `to-upper-case()`

```
to-upper-case($string)
```

This function is also available as a global function named `to-upper-case()`.

### `unique-id()`

```
unique-id()
```

This function is also available as a global function named `unique-id()`.

### `unquote()`

```
unquote($string)
```

This function is also available as a global function named `unquote()`.

# Style Rules

## Definitions

### Current Style Rule

The *current style rule* is the CSS style rule that was created by the innermost
[execution of a style rule](#semantics).

## Semantics

To execute a style rule `rule`:

* Let `selector` be the result of evaluating all interpolation in `rule`'s
  selector and parsing the result as a selector list.

* If there is a [current style rule](#current-style-rule):

  * If `selector` contains one or more parent selectors, replace them with the
    current style rule's selector and set `selector` to the result.

  * Otherwise, nest `selector` within the current style rule's selector using
    the [descendant combinator][] and set `selector` to the result.

* Otherwise, if `selector` contains one or more parent selectors, throw an
  error.

* Let `css` be a CSS style rule with selector `selector`.

* Execute each child `child` of `rule`.

* If `css` contains any children and `selector` is [bogus], throw an error.

  [bogus]: selectors.md#bogus-selector

* Remove any [complex selectors][] containing a placeholder selector that
  begins with `-` or `_` from `css`'s selector.

* Unless `css`'s selector is now empty, append `css` to [the current module][]'s
  CSS.

  [the current module]: spec.md#current-module

## Draft 2.1

* Forbid `"and"` or `"or"` tokens at the beginning of `InterpolatedAnyValue` in
  `SupportsAnything`. This makes more explicit the fact that the
  `SupportsCondition` parsing takes precedence.

## Draft 2

* Mark the `InterpolatedAnyValue` productions as optional. According to Tab
  Atkins, this matches the intended (although not the written) syntax of the
  CSS spec.

* Add `Interpolation` as an option for `SupportsInParens`, for
  backwards-compatibility with existing Sass behavior.

## Draft 1

* Initial draft.

# `@supports` `<general-enclosed>`: Draft 2.1

This proposal defines how Sass parses supports queries that use the
[`<general-enclosed>`][] production.

## Table of Contents

* [Background](#background)
* [Summary](#summary)
  * [Design Decisions](#design-decisions)
    * [How Much To Support](#how-much-to-support)
    * [SassScript Injection](#sassscript-injection)
    * [Backwards Compatibility](#backwards-compatibility)
* [Syntax](#syntax)
  * [`SupportsCondition`](#supportscondition)
  * [`InterpolatedAnyValue`](#interpolatedanyvalue)

## Background

> This section is non-normative.

Historically, Sass has supported the `@supports` condition syntax as defined in
[the April 2013 CSS Conditional Rules Level 3 Candidate Recommendation][], with
the addition of supporting raw SassScript expressions in the declaration syntax.
The [Editor's Draft][] (as published October 2019) expands this syntax with a
`<general-enclosed>` production to ensure parser forwards-compatibility with
future CSS, which Sass does not yet support. The [Level 4 Editor's Draft][] (as
of March 2019) further adds a `selector()` function syntax (which is covered by
`<general-enclosed>`), which is [supported by Firefox][] as of version 69.

Sass's current `@supports` rule syntax allows SassScript expressions in place of
either the declaration name or value in `<supports-decl>`. This syntax doesn't
need to be wrapped in interpolation, which means that many expressions that
would be parsed in CSS as `<general-enclosed>` are currently parsed by Sass as
`<supports-decl>`, and even more expressions need arbitrary look-ahead to
determine whether they have a `:` that would distinguish them between
`<supports-decl>` and `<general-enclosed>`.

## Summary

> This section is non-normative.

Sass will parse the `<general-enclosed>` production essentially as defined by
CSS, with the following exceptions:

* SassScript can be injected in the productions using interpolation.

* The `(<ident> <any-value>)` syntax for `<general-enclosed>` may not contain
  top-level `":"` tokens. This preserves backwards-compatibility with existing
  `@supports` rules that use non-interpolated SassScript expressions in
  `<supports-decl>` and may help catch accidental syntax errors.

### Design Decisions

#### How Much To Support

Per Sass's CSS compatibility policy, it must add support for at least the
`selector()` function, since it's been shipped in a browser. Everything else
under `<general-enclosed>` is optional, though, since the spec says "Authors
must not use `<general-enclosed>` in their stylesheets." We could choose to
avoid implementing it entirely and just special-case `selector()`, or we could
choose to implement only the function syntax and ignore the `(<ident>
<any-value>)` syntax.

This proposal covers the full `<general-enclosed>` syntax for the same reason
CSS does: forwards compatibility. Sass has a general policy of loose coupling
with CSS, so that Sass needs as few updates as possible as CSS continues to
evolve. Supporting the full range of potential syntax for `@supports` conditions
now means that we'll need fewer proposals like this in the future as new
conditions are added in practice.

#### SassScript Injection

There are two possible ways to allow SassScript to be injected into the
`<general-enclosed>` production. One is to support it only via interpolation,
allowing the production to otherwise exactly match the CSS syntax; the other is
to allow raw Sass-script values to be used within the parentheses.

The latter option is appealing at first glance. It requires fewer characters,
and matches the parsing of `<supports-decl>`, which allows non-interpolated
expressions on either side of the `":"`. However, it's only CSS-compatible as
long as all the syntax CSS uses in those positions is also a valid SassScript
expression. If not, Sass must continually update its syntax to support new CSS
constructs.

We've been burned by this in the past. Both this proposal and the [media ranges
proposal][] would have been unnecessary (or at least much simpler) if the rules
in questions had only allowed SassScript via interpolation in the first place.
And it's likely that this syntax *will* evolve in ways that aren't
SassScript-compatible, as with the `selector()` function [mentioned above][].

[media ranges proposal]: ../accepted/media-ranges.md
[mentioned above]: #background

Given this, it's much safer to only allow SassScript within interpolation.

#### Backwards Compatibility

The `<general-enclosed>` syntax is very broad, so care is needed to ensure that
adding support for it doesn't break existing Sass stylesheets—particularly those
that are relying on SassScript in `<supports-decl>`. For example, strictly
speaking `(foo + bar: baz)` is valid CSS that parses as `<general-enclosed>`,
but Sass needs to continue to parse it as a declaration containing a SassScript
expression on the left-hand side.

The question then is how to balance backwards-compatibility with CSS
compatibility. In most cases, CSS takes clear precedence, and we could manage
that here by declaring that `<supports-decl>`s that begin with an
`InterpolatedIdentifier` must immediately follow it with a `":"` and allowing
all other syntax to be parsed as `<general-enclosed>`. However, this approach is
not without its downsides. It would require a deprecation period, and it would
parse `<general-enclosed>` in a number of cases (such as `(foo: )` or `(fo o:
bar)`) that are much more likely to be typos.

Fortunately, `<general-enclosed>` is explicitly specified for
forwards-compatibility rather than having CSS semantics in and of itself, so we
have more flexibility to limit compatibility with it in favor of Sass backwards
compatibility. This allows us to limit the syntax we parse as
`<general-enclosed>` to forbid a top-level `":"`, which ensures it's never
ambiguous with a declaration and thus with raw SassScript.

## Syntax

### `SupportsCondition`

<x><pre>
**SupportsCondition**   ::= 'not' SupportsInParens
&#32;                     | SupportsInParens ('and' SupportsInParens)*
&#32;                     | SupportsInParens ('or' SupportsInParens)*
**SupportsInParens**    ::= '(' (SupportsCondition | SupportsDeclaration | SupportsAnything) ')'
&#32;                     | SupportsFunction | Interpolation
**SupportsDeclaration** ::= Expression¹ ':' Expression
**SupportsAnything**    ::= [InterpolatedIdentifier][]² [InterpolatedAnyValue][]³?
**SupportsFunction**    ::= [InterpolatedIdentifier][]⁴ '(' [InterpolatedAnyValue][]? ')'
</pre></x>

[InterpolatedIdentifier]: ../spec/syntax.md#interpolatedidentifier
[InterpolatedAnyValue]: #interpolatedanyvalue

1: This `Expression` may not begin with the identifier `"not"` or the token
`"("`.

2: This `InterpolatedIdentifier` may not be the identifier `"not"`.

3: This `InterpolatedAnyValue` may not contain a top-level `":"`, and it may not
begin with the identifier tokens `"and"` or `"or"`.

4: This `InterpolatedIdentifier` may not be the identifier `"not"`. No
whitespace is allowed between it and the following `"("`.

The identifiers `"not"`, `"and"`, and `"or"` are matched case-insensitively for
the purposes of this production.

> Implementations must perform some amount of lookahead to disambiguate between
> `SupportsDeclaration`, `SupportsAnything`, and `SupportsFunction`. When doing
> so, it may be helpful to note that the contents of a `SupportsInParens` must
> be parsed as a `SupportsDeclaration` if and only if it contains a top-level
> `":"`.

# Syntax

## Definitions

### Source File

A *source file* is a Sass abstract syntax tree along with an absolute URL, known
as that file's *canonical URL*; and an [importer]. A given canonical URL cannot
be associated with more than one source file.

[importer]: modules.md#importer

### Vendor Prefix

Some identifiers have a *vendor prefix*, which is an initial substring beginning
with U+002D HYPHEN-MINUS code point followed by one or more non-U+002D code
points followed by another U+002D. An identifier only has a vendor prefix if the
final U+002D is followed by additional text. This additional text is referred to
as the *unprefixed identifier*.

## Grammar

### `InterpolatedIdentifier`

<x><pre>
**InterpolatedIdentifier** ::= ([\<ident-token>][] | '-'? Interpolation) ([Name][] | Interpolation)*
</pre></x>

[Name]: #name

No whitespace is allowed between components of an `InterpolatedIdentifier`.

### `InterpolatedUrl`

<x><pre>
**InterpolatedUrl**         ::= 'url(' (QuotedString | InterpolatedUnquotedUrlContents) ')'
**InterpolatedUnquotedUrlContents** ::= ([unescaped url contents][] | [escape][] | Interpolation)*
</pre></x>
    
No whitespace is allowed between components of an `InterpolatedUnquotedUrlContents`.

### `Name`

<x><pre>
**Name** ::= ([identifier code point][] | [escape][])+
</pre></x>

### `SpecialFunctionExpression`

> These functions are "special" in the sense that their arguments don't use the
> normal CSS expression-level syntax, and so have to be parsed more broadly than
> a normal SassScript expression.

<x><pre>
**SpecialFunctionExpression** ::= SpecialFunctionName InterpolatedDeclarationValue ')'
**SpecialFunctionName**¹      ::= VendorPrefix? ('element(' | 'expression(')
&#32;                           | VendorPrefix 'calc('
**VendorPrefix**¹             ::= '-' ([identifier-start code point] | [digit]) '-'
</pre></x>

1: Both `SpecialFunctionName` and `VendorPrefix` are matched case-insensitively,
   and neither may contain whitespace.

### `PseudoSelector`

<x><pre>
**PseudoSelector** ::= NormalPseudoSelector
&#32;                | SelectorPseudo
&#32;                | NthSelectorPseudo
**NormalPseudoSelector** ::= ':' ':'? VendorPrefix? [\<ident-token>][]
&#32;                        ('(' [\<declaration-value>] ')')?
**SelectorPseudo** ::= SelectorPseudoName '(' Selector ')'
**NthSelectorPseudo** ::= NthSelectorPseudoName '(' [\<an+b>] 'of'¹ Selector ')'
**SelectorPseudoName** ::= ':' ('not' | 'matches' | 'any' | 'current' | 'has' | 'host' | 'host-context')
&#32;                    | '::slotted'
**NthSelectorPseudoName** ::= ':' ('nth-child' | 'nth-last-child')
</pre></x>

1: The string `of` is matched case-insensitively. In addition, it must be parsed
   as an identifier.

   > In other words, it must have whitespace separating it from other
   > identifiers, so `:nth-child(2nof a)` and `:nth-child(2n ofa)` are both
   > invalid. However, `:nth-child(2of.foo)` is valid.

If a `PseudoSelector` begins with`SelectorPseudoName` or `NthSelectorPseudoName`
followed by a parenthesis, it must be parsed as a `SelectorPseudo` or an
`NthSelectorPseudo` respectively, not as a `NormalPseudoSelector`.

No whitespace is allowed anywhere in a `PseudoSelector` except within
parentheses.

## Procedures

### Parsing Text

This algorithm takes a string `text` and a syntax `syntax` ("indented", "scss",
or "sass"), and returns a Sass abstract syntax tree.

* If `syntax` is "indented", return the result of parsing `text` as the indented
  syntax.

* If `syntax` is "css", return the result of [parsing `text` as
  CSS](#parsing-text-as-css).

* If `syntax` is "scss", return the result of parsing `text` as SCSS.

### Parsing Text as CSS

This algorithm takes a string, `text`, and returns a Sass abstract syntax tree.

> This algorithm is designed with two goals in mind:
>
> 1. CSS imported from Sass should be as compatible with standard CSS as
>    possible. In some cases we err even more towards CSS compatibility than
>    SCSS does, because the CSS being imported is likely not written by someone
>    who knows to avoid things that Sass interprets specially (such as certain
>    `@import` URLs).
>
> 2. We should provide clear and eager feedback to users who accidentally try to
>    use Sass features in CSS imports. We don't allow these features, and we
>    want users to know that through error messages rather than digging through
>    generated CSS only to find that Sass features were passed through
>    unmodified. This is a particular concern because LibSass has historically
>    allowed the use of Sass features in CSS imports.

The algorithm for parsing text as CSS works like parsing text as SCSS, with some
modifications. The following productions should produce errors:

* Any at-rules that are defined in Sass and not in plain CSS. At the time of
  writing, this means:

  * `@at-root`
  * `@content`
  * `@debug`
  * `@each`
  * `@error`
  * `@extend`
  * `@for`
  * `@forward`
  * `@function`
  * `@if`
  * `@include`
  * `@mixin`
  * `@return`
  * `@use`
  * `@warn`
  * `@while`

* An `@import` that contains interpolation in the `url()` or any of its
  `ImportModifier`s.

* An `@import` that appears within a style rule or at-rule.

* An `@import` with more than one argument.

* A declaration followed by an open curly brace (that is, a nested declaration).

* A style rule appearing within another style rule.

* The parent selector `&`, either in a selector or a declaration value.

* Placeholder selectors.

* All built-in functions, *excluding* the following:

  * `rgb()`
  * `rgba()`
  * `hsl()`
  * `hsla()`
  * `grayscale()`
  * `invert()`
  * `alpha()`
  * `opacity()`

  > Note that user-defined functions are *not* forbidden, whether they're
  > defined using `@function` or through a host language API.

* Any function called with keyword arguments or variable-length arguments.

* Interpolation anywhere its contents would be evaluated. At the time of
  writing, this means:

  * At-rule values (including `@media` queries)
  * Declaration names
  * Declaration values
  * Style rule selectors

* All SassScript operations *except for*:

  * `/`
  * `not`
  * `or`
  * `and`

  > Note that although unary `-` is forbidden, the `-` that appears at the
  > beginning of a number literal is part of that literal and thus allowed.

* Parentheses in declaration values that aren't part of a CSS production.

* Map literals.

* The empty list literal `(,)`.

* Uses or declarations of Sass variables.

* `//`-style ("silent") comments.

In addition, some productions should be parsed differently than they would be in
SCSS:

* All functions that don't produce errors should be parsed as plain CSS
  functions, regardless of whether a Sass function with that name is defined.

* All `@import`s that don't produce errors should be parsed as static CSS
  imports.

* The tokens `not`, `or`, `and`, and `null` should be parsed as unquoted
  strings.

  > The `/` operation should be parsed as normal. Because variables,
  > parentheses, functions that return numbers, and all other arithmetic
  > expressions are disallowed, it will always compile to slash-separated values
  > rather than performing division.

### Consuming an Identifier

This algorithm consumes input from a stream of [code points][] and returns a
string.

This production has the same grammar as [`<ident-token>`][].

* Let `string` be an empty string.

* If the stream starts with `--`, consume it and append it to `string`.

* Otherwise:

  * If the stream starts with `-`, consume it and append it to `string`.

  * If the stream starts with `\`, [consume an escaped code point][] with the
    `start` flag set and append it to `string`.

  * Otherwise, if the stream starts with an [identifier-start code point][],
    consume it and append it to `string`.

  * Otherwise, throw an error.

  [consume an escaped code point]: #consuming-an-escaped-code-point

* [Consume a name](#consuming-a-name) and append it to `string`.

* Return `string`.

### Consuming an Interpolated Identifier

This algorithm consumes input from a stream of [code points][] and returns a
sequence of strings and/or expressions. It follows the grammar for an
[`InterpolatedIdentifier`][].

[`InterpolatedIdentifier`]: #interpolatedidentifier

* Let `components` be an empty list of strings and/or expressions.

### Consuming a Name

This algorithm consumes input from a stream of [code points][] and returns a
string. The grammar for this production is:

<x><pre>
**Name** ::= ([identifier code point][] | [escape][])+
</pre></x>

* Let `string` be an empty string.

* While the input starts with a [identifier code point][] or `\`:

  * If the input starts with a [identifier code point][], consume it and append
    it to `string`.

  * Otherwise, [consume an escaped code point][] and append it to `string`.

* Return `string`.

### Consuming an Escaped Code Point

This algorithm consumes input from a stream of [code points][]. It takes an
optional boolean flag, `start`, which indicates whether it's at the beginning of
an identifier and defaults to false. It returns a string.

This production has the same grammar as [`escape`][escape] in CSS Syntax Level 3.

* If the stream doesn't [start with a valid escape][], throw an error.

* Let `codepoint` be the result of [consuming an escaped code point][].

* Let `character` be the string containing only `codepoint`.

* If `codepoint` is a [identifier-start code point][], return `character`.

* Otherwise, if `codepoint` is an [identifier code point][] and the `start` flag
  is not set, return `character`.

* Otherwise, if `codepoint` is a [non-printable code point][], U+0009 CHARACTER
  TABULATION, U+000A LINE FEED, U+000D CARRIAGE RETURN, or U+000C FORM FEED;
  *or* if `codepoint` is a [digit][] and the `start` flag is set:

  * Let `code` be the lowercase hexadecimal representation of `codepoint`,
    with no leading `0`s.

  * Return `"\"` + `code` + `" "`.

  > Tab characters are parsed as explicit escapes in order to support a browser
  > hack that targets IE 10 and earlier, wherein ending a declaration value with
  > `\9` would cause IE to interpret it as valid but other browsers to ignore
  > it.

* Otherwise, return `"\"` + `character`.

### Consuming a special function

This algorithm consumes input from a stream of [code points] and returns a
SassScript expression.

* Let `expression` be the result of consuming a [`SpecialFunctionExpression`].

  [`SpecialFunctionExpression`]: #specialfunctionexpression

* Return an unquoted interpolated string expression that would be identical to
  the source text according to CSS semantics for all possible interpolated
  strings.


**T**

**U**

# Unknown At-Rules

In order to be flexible in its compatibility with future additions to CSS, Sass
supports *all* at-rule names with a default syntax that's highly liberal in the
structures it allows. It uses the following grammar:

[InterpolatedIdentifier]: ../syntax.md#interpolatedidentifier

No whitespace is allowed after `@`. As with all statements, an `UnknownAtRule`
without a block must be separated from other statements with a semicolon.

When an at-rule is executed, its name is evaluated to produce an unquoted string
which is used as the name of the generated at-rule. Then that generated name is
checked to see if it's an at-rule that has special runtime handling.

> Note that only `@keyframes` has special runtime handling that's triggered
> here. Other CSS at-rules that Sass handles specially, like `@media` or
> `@supports`, are detected at parse-time. This means that `@m#{ed}ia` will be
> treated as an unknown at-rule rather than a media rule.

# `@use`

The `@use` rule loads a [module][] from a URL, makes its members available to
the current stylesheet, and includes its CSS in the compilation output.

[module]: ../modules.md#module

## Table of Contents

* [Definitions](#definitions)
  * [A `@use` Rule's Module](#a-use-rules-module)
* [Syntax](#syntax)
* [Procedures](#procedures)
  * [Determining a `@use` Rule's Namespace](#determining-a-use-rules-namespace)
* [Semantics](#semantics)

## Definitions

### A `@use` Rule's Module

A `@use` rule's *module* is a [module][] associated with a `@use` rule. This
module is only associated once the rule has been [executed](#semantics).

## Syntax

The grammar for the `@use` rule is as follows:

<x><pre>
**UseRule**         ::= '@use' QuotedString AsClause? WithClause?
**AsClause**        ::= 'as' ('\*' | [\<ident-token>][])
**WithClause**      ::= 'with' '('
&#32;                     KeywordArgument (',' KeywordArgument)\* ','?
&#32;                   ')'
**KeywordArgument** ::= '$' [\<ident-token>][] ':' Expression
</pre></x>

`@use` rules must be at the top level of the document, and must come before any
rules other than `@charset` or `@forward`. The `QuotedString`'s contents, known
as the rule's *URL*, must be a [valid URL string][] (for non-[special][] base
URL). No whitespace is allowed after `$` in `KeywordArgument`.

> Because each `@use` rule affects the namespace of the entire [source file][]
> that contains it, whereas most other Sass constructs are purely imperative,
> keeping it at the top of the file helps reduce confusion.
>
> [source file]: ../syntax.md#source-file

> Variable declarations aren't rules, and so *are* valid before or between
> `@use` and `@forward` rules. This makes it possible to define intermediate
> variables when passing configuration to a `WithClause`.
>
> ```scss
> @use "sass:color";
>
> $base-color: #abc;
> @use "library" with (
>   $base-color: $base-color,
>   $secondary-color: color.scale($base-color, $lightness: -10%),
> );
> ```

A `@use` rule's *namespace* is determined using [this
algorithm](#determining-a-use-rules-namespace). If the algorithm for determining
a namespace fails for a `@use` rule, that rule is invalid. If it returns `null`,
that rule is called *global*. A namespace is used to identify the used
[module][]'s members within the current [source file][].

## Procedures

### Determining a `@use` Rule's Namespace

This algorithm takes a `@use` rule `rule`, and returns either an identifier or
`null`.

> This algorithm is context-independent, so a namespace for a `@use` rule can be
> determined without reference to anything outside the syntax of that rule.

* If `rule` has an `'as'` clause `as`:

  * If `as` has an identifier, return it.

  * Otherwise, return `null`. The rule is global.

* Let `path` be the `rule`'s URL's [path][URL path].

* Let `basename` be the text after the final `/` in `path`, or the entire `path`
  if `path` doesn't contain `/`.

* Let `module-name` be the text before the first `.` in `basename`, or the entire
  `basename` if `basename` doesn't contain `.`.

* If `module-name` begins with `_`, remove the leading `_` and set `module-name`
  to the result.

* If `module-name` isn't a Sass identifier, throw an error.

* Return `module-name`.

## Semantics

To execute a `@use` rule `rule`:

* If `rule` has a namespace that's the same as another `@use` rule's namespace
  in [the current source file][], throw an error.

  [the current source file]: ../spec.md#current-source-file

* Let `rule-config` be the empty configuration.

* If `rule` has a `WithClause`:

  * For each `KeywordArgument` `argument` in this clause:

    * Let `value` be the result of evaluating `argument`'s expression.

    * Add a variable to `rule-config` with the same name as `argument`'s identifier
      and with `value` as its value.

* Let `module` be the result of [loading the module][] with `rule`'s URL string
  and `rule-config`.

  [loading the module]: ../modules.md#loading-a-module

* For every variable name `name` in `rule-config`:

  * Let `variable` be the variable in `module` named `name`. If no such variable
    exists, throw an error.

  * If `variable` wasn't declared with a `!default` flag, throw an error.

* Set [`rule`'s module](#a-use-rules-module) to `module`.

**V**

# Variables

## Syntax

<x><pre>
**Variable**            ::= PlainVariable | NamespacedVariable
**PlainVariable**       ::= '$' [\<ident-token>][]
**NamespacedVariable**  ::= [\<ident-token>][] '.$' [PublicIdentifier][]
**VariableDeclaration** ::= Variable ':' Expression ('!global' | '!default')*
</pre></x>

[PublicIdentifier]: modules.md#syntax

No whitespace is allowed after the `$` in `PlainVariable` or before or after
the `.$` in `NamespacedVariable`. Each of `!global` and `!default` is allowed
at most once in `VariableDeclaration`. As with all statements, a
`VariableDeclaration` must be separated from other statements with a semicolon.

## Semantics

### Executing a Variable Declaration

To execute a `VariableDeclaration` `declaration`:

* Let `value` be the result of evaluating `declaration`'s `Expression`.

* Let `name` be `declaration`'s `Variable`.

* Let `resolved` be the result of [resolving a variable][] named `name`.

  [resolving a variable]: modules.md#resolving-a-member

* If `name` is a `NamespacedVariable` and `declaration` has a `!global` flag,
  throw an error.

* Otherwise, if `resolved` is a variable from a built-in module, throw an
  error.

* Otherwise, if `declaration` is outside of any block of statements, *or*
  `declaration` has a `!global` flag, *or* `name` is a `NamespacedVariable`:

  * If `declaration` has a `!default` flag, `resolved` isn't null, *and*
   `resolved`'s value isn't null, do nothing.

  * Otherwise, if `resolved` is a variable in another module:

    * Evaluate `declaration`'s value and set `resolved`'s value to the result.

  * Otherwise:

    * If `declaration` is outside of any block of statements, it has a
      `!default` flag, *and* `config` contains a variable named `name` whose
      value is not null:

      * Let `value` be the value of `config`'s variable named `name`.

    * Otherwise, let `value` be the result of evaluating `declaration`'s value.

    * If `name` *doesn't* begin with `-` or `_`, add a variable with name `name`
      and value `value` to `module`.

      > This overrides the previous definition, if one exists.

    * Add a variable with name `name` and value `value` to `import`.

      > This also overrides the previous definition.

* Otherwise, if `declaration` is within one or more blocks associated with
  `@if`, `@each`, `@for`, and/or `@while` rules *and no other blocks*:

  * If `resolved` is not null:

    * If `declaration` has a `!default` flag and `resolved`'s value isn't
      null, do nothing.

    * Otherwise, let `value` be the result of evaluating `declaration`'s value.

    * If `name` *doesn't* begin with `-` or `_`, add a variable with name `name`
      and value `value` to `module`.

      > This overrides the previous definition, if one exists.

    * Add a variable with name `name` and value `value` to `import`.

      > This also overrides the previous definition.

* Otherwise, if `resolved` is null, set the [current scope]'s variable `name` to
  `value`.

  [current scope]: spec.md#scope

* Otherwise, set `resolved`'s value to `value`.

### Evaluating a Variable

To evaluate a `Variable` `variable`:

* Let `definition` be the result of [resolving a variable][] named `variable`.
  If this returns null, throw an error.

* Return `definition`'s value.

**W**

**X**

**Y**

**Z**